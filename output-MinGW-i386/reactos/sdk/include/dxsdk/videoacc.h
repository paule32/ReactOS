/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/sdk/include/dxsdk/videoacc.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __videoacc_h__
#define __videoacc_h__

/* Forward declarations */

#ifndef __IAMVideoAccelerator_FWD_DEFINED__
#define __IAMVideoAccelerator_FWD_DEFINED__
typedef interface IAMVideoAccelerator IAMVideoAccelerator;
#ifdef __cplusplus
interface IAMVideoAccelerator;
#endif /* __cplusplus */
#endif

#ifndef __IAMVideoAcceleratorNotify_FWD_DEFINED__
#define __IAMVideoAcceleratorNotify_FWD_DEFINED__
typedef interface IAMVideoAcceleratorNotify IAMVideoAcceleratorNotify;
#ifdef __cplusplus
interface IAMVideoAcceleratorNotify;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <unknwn.h>

#ifdef __cplusplus
extern "C" {
#endif

#if 0
typedef void *LPDIRECTDRAWSURFACE;
typedef void *LPDDPIXELFORMAT;
typedef void *LPAMVAInternalMemInfo;
typedef void AMVAUncompDataInfo;
typedef void *LPAMVACompBufferInfo;
typedef void AMVABUFFERINFO;
typedef void AMVAEndFrameInfo;
typedef void *LPAMVAUncompBufferInfo;
typedef void AMVABeginFrameInfo;
typedef IUnknown *IMediaSample;
#endif
#include <ddraw.h>
#include <amva.h>
/*****************************************************************************
 * IAMVideoAccelerator interface
 */
#ifndef __IAMVideoAccelerator_INTERFACE_DEFINED__
#define __IAMVideoAccelerator_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAMVideoAccelerator, 0x256a6a22, 0xfbad, 0x11d1, 0x82,0xbf, 0x00,0xa0,0xc9,0x69,0x6c,0x8f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("256a6a22-fbad-11d1-82bf-00a0c9696c8f")
IAMVideoAccelerator : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetVideoAcceleratorGUIDs(
        LPDWORD pdwNumGuidsSupported,
        LPGUID pGuidsSupported) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUncompFormatsSupported(
        const GUID *pGuid,
        LPDWORD pdwNumFormatsSupported,
        LPDDPIXELFORMAT pFormatsSupported) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInternalMemInfo(
        const GUID *pGuid,
        const AMVAUncompDataInfo *pamvaUncompDataInfo,
        LPAMVAInternalMemInfo pamvaInternalMemInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCompBufferInfo(
        const GUID *pGuid,
        const AMVAUncompDataInfo *pamvaUncompDataInfo,
        LPDWORD pdwNumTypesCompBuffers,
        LPAMVACompBufferInfo pamvaCompBufferInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInternalCompBufferInfo(
        LPDWORD pdwNumTypesCompBuffers,
        LPAMVACompBufferInfo pamvaCompBufferInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE BeginFrame(
        const AMVABeginFrameInfo *amvaBeginFrameInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE EndFrame(
        const AMVAEndFrameInfo *pEndFrameInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBuffer(
        DWORD dwTypeIndex,
        DWORD dwBufferIndex,
        BOOL bReadOnly,
        LPVOID *ppBuffer,
        LONG *lpStride) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseBuffer(
        DWORD dwTypeIndex,
        DWORD dwBufferIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE Execute(
        DWORD dwFunction,
        LPVOID lpPrivateInputData,
        DWORD cbPrivateInputData,
        LPVOID lpPrivateOutputDat,
        DWORD cbPrivateOutputData,
        DWORD dwNumBuffers,
        const AMVABUFFERINFO *pamvaBufferInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE QueryRenderStatus(
        DWORD dwTypeIndex,
        DWORD dwBufferIndex,
        DWORD dwFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE DisplayFrame(
        DWORD dwFlipToIndex,
        IMediaSample *pMediaSample) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAMVideoAccelerator, 0x256a6a22, 0xfbad, 0x11d1, 0x82,0xbf, 0x00,0xa0,0xc9,0x69,0x6c,0x8f)
#endif
#else
typedef struct IAMVideoAcceleratorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAMVideoAccelerator *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAMVideoAccelerator *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAMVideoAccelerator *This);

    /*** IAMVideoAccelerator methods ***/
    HRESULT (STDMETHODCALLTYPE *GetVideoAcceleratorGUIDs)(
        IAMVideoAccelerator *This,
        LPDWORD pdwNumGuidsSupported,
        LPGUID pGuidsSupported);

    HRESULT (STDMETHODCALLTYPE *GetUncompFormatsSupported)(
        IAMVideoAccelerator *This,
        const GUID *pGuid,
        LPDWORD pdwNumFormatsSupported,
        LPDDPIXELFORMAT pFormatsSupported);

    HRESULT (STDMETHODCALLTYPE *GetInternalMemInfo)(
        IAMVideoAccelerator *This,
        const GUID *pGuid,
        const AMVAUncompDataInfo *pamvaUncompDataInfo,
        LPAMVAInternalMemInfo pamvaInternalMemInfo);

    HRESULT (STDMETHODCALLTYPE *GetCompBufferInfo)(
        IAMVideoAccelerator *This,
        const GUID *pGuid,
        const AMVAUncompDataInfo *pamvaUncompDataInfo,
        LPDWORD pdwNumTypesCompBuffers,
        LPAMVACompBufferInfo pamvaCompBufferInfo);

    HRESULT (STDMETHODCALLTYPE *GetInternalCompBufferInfo)(
        IAMVideoAccelerator *This,
        LPDWORD pdwNumTypesCompBuffers,
        LPAMVACompBufferInfo pamvaCompBufferInfo);

    HRESULT (STDMETHODCALLTYPE *BeginFrame)(
        IAMVideoAccelerator *This,
        const AMVABeginFrameInfo *amvaBeginFrameInfo);

    HRESULT (STDMETHODCALLTYPE *EndFrame)(
        IAMVideoAccelerator *This,
        const AMVAEndFrameInfo *pEndFrameInfo);

    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
        IAMVideoAccelerator *This,
        DWORD dwTypeIndex,
        DWORD dwBufferIndex,
        BOOL bReadOnly,
        LPVOID *ppBuffer,
        LONG *lpStride);

    HRESULT (STDMETHODCALLTYPE *ReleaseBuffer)(
        IAMVideoAccelerator *This,
        DWORD dwTypeIndex,
        DWORD dwBufferIndex);

    HRESULT (STDMETHODCALLTYPE *Execute)(
        IAMVideoAccelerator *This,
        DWORD dwFunction,
        LPVOID lpPrivateInputData,
        DWORD cbPrivateInputData,
        LPVOID lpPrivateOutputDat,
        DWORD cbPrivateOutputData,
        DWORD dwNumBuffers,
        const AMVABUFFERINFO *pamvaBufferInfo);

    HRESULT (STDMETHODCALLTYPE *QueryRenderStatus)(
        IAMVideoAccelerator *This,
        DWORD dwTypeIndex,
        DWORD dwBufferIndex,
        DWORD dwFlags);

    HRESULT (STDMETHODCALLTYPE *DisplayFrame)(
        IAMVideoAccelerator *This,
        DWORD dwFlipToIndex,
        IMediaSample *pMediaSample);

    END_INTERFACE
} IAMVideoAcceleratorVtbl;

interface IAMVideoAccelerator {
    CONST_VTBL IAMVideoAcceleratorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAMVideoAccelerator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAMVideoAccelerator_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAMVideoAccelerator_Release(This) (This)->lpVtbl->Release(This)
/*** IAMVideoAccelerator methods ***/
#define IAMVideoAccelerator_GetVideoAcceleratorGUIDs(This,pdwNumGuidsSupported,pGuidsSupported) (This)->lpVtbl->GetVideoAcceleratorGUIDs(This,pdwNumGuidsSupported,pGuidsSupported)
#define IAMVideoAccelerator_GetUncompFormatsSupported(This,pGuid,pdwNumFormatsSupported,pFormatsSupported) (This)->lpVtbl->GetUncompFormatsSupported(This,pGuid,pdwNumFormatsSupported,pFormatsSupported)
#define IAMVideoAccelerator_GetInternalMemInfo(This,pGuid,pamvaUncompDataInfo,pamvaInternalMemInfo) (This)->lpVtbl->GetInternalMemInfo(This,pGuid,pamvaUncompDataInfo,pamvaInternalMemInfo)
#define IAMVideoAccelerator_GetCompBufferInfo(This,pGuid,pamvaUncompDataInfo,pdwNumTypesCompBuffers,pamvaCompBufferInfo) (This)->lpVtbl->GetCompBufferInfo(This,pGuid,pamvaUncompDataInfo,pdwNumTypesCompBuffers,pamvaCompBufferInfo)
#define IAMVideoAccelerator_GetInternalCompBufferInfo(This,pdwNumTypesCompBuffers,pamvaCompBufferInfo) (This)->lpVtbl->GetInternalCompBufferInfo(This,pdwNumTypesCompBuffers,pamvaCompBufferInfo)
#define IAMVideoAccelerator_BeginFrame(This,amvaBeginFrameInfo) (This)->lpVtbl->BeginFrame(This,amvaBeginFrameInfo)
#define IAMVideoAccelerator_EndFrame(This,pEndFrameInfo) (This)->lpVtbl->EndFrame(This,pEndFrameInfo)
#define IAMVideoAccelerator_GetBuffer(This,dwTypeIndex,dwBufferIndex,bReadOnly,ppBuffer,lpStride) (This)->lpVtbl->GetBuffer(This,dwTypeIndex,dwBufferIndex,bReadOnly,ppBuffer,lpStride)
#define IAMVideoAccelerator_ReleaseBuffer(This,dwTypeIndex,dwBufferIndex) (This)->lpVtbl->ReleaseBuffer(This,dwTypeIndex,dwBufferIndex)
#define IAMVideoAccelerator_Execute(This,dwFunction,lpPrivateInputData,cbPrivateInputData,lpPrivateOutputDat,cbPrivateOutputData,dwNumBuffers,pamvaBufferInfo) (This)->lpVtbl->Execute(This,dwFunction,lpPrivateInputData,cbPrivateInputData,lpPrivateOutputDat,cbPrivateOutputData,dwNumBuffers,pamvaBufferInfo)
#define IAMVideoAccelerator_QueryRenderStatus(This,dwTypeIndex,dwBufferIndex,dwFlags) (This)->lpVtbl->QueryRenderStatus(This,dwTypeIndex,dwBufferIndex,dwFlags)
#define IAMVideoAccelerator_DisplayFrame(This,dwFlipToIndex,pMediaSample) (This)->lpVtbl->DisplayFrame(This,dwFlipToIndex,pMediaSample)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IAMVideoAccelerator_QueryInterface(IAMVideoAccelerator* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IAMVideoAccelerator_AddRef(IAMVideoAccelerator* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IAMVideoAccelerator_Release(IAMVideoAccelerator* This) {
    return This->lpVtbl->Release(This);
}
/*** IAMVideoAccelerator methods ***/
FORCEINLINE HRESULT IAMVideoAccelerator_GetVideoAcceleratorGUIDs(IAMVideoAccelerator* This,LPDWORD pdwNumGuidsSupported,LPGUID pGuidsSupported) {
    return This->lpVtbl->GetVideoAcceleratorGUIDs(This,pdwNumGuidsSupported,pGuidsSupported);
}
FORCEINLINE HRESULT IAMVideoAccelerator_GetUncompFormatsSupported(IAMVideoAccelerator* This,const GUID *pGuid,LPDWORD pdwNumFormatsSupported,LPDDPIXELFORMAT pFormatsSupported) {
    return This->lpVtbl->GetUncompFormatsSupported(This,pGuid,pdwNumFormatsSupported,pFormatsSupported);
}
FORCEINLINE HRESULT IAMVideoAccelerator_GetInternalMemInfo(IAMVideoAccelerator* This,const GUID *pGuid,const AMVAUncompDataInfo *pamvaUncompDataInfo,LPAMVAInternalMemInfo pamvaInternalMemInfo) {
    return This->lpVtbl->GetInternalMemInfo(This,pGuid,pamvaUncompDataInfo,pamvaInternalMemInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_GetCompBufferInfo(IAMVideoAccelerator* This,const GUID *pGuid,const AMVAUncompDataInfo *pamvaUncompDataInfo,LPDWORD pdwNumTypesCompBuffers,LPAMVACompBufferInfo pamvaCompBufferInfo) {
    return This->lpVtbl->GetCompBufferInfo(This,pGuid,pamvaUncompDataInfo,pdwNumTypesCompBuffers,pamvaCompBufferInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_GetInternalCompBufferInfo(IAMVideoAccelerator* This,LPDWORD pdwNumTypesCompBuffers,LPAMVACompBufferInfo pamvaCompBufferInfo) {
    return This->lpVtbl->GetInternalCompBufferInfo(This,pdwNumTypesCompBuffers,pamvaCompBufferInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_BeginFrame(IAMVideoAccelerator* This,const AMVABeginFrameInfo *amvaBeginFrameInfo) {
    return This->lpVtbl->BeginFrame(This,amvaBeginFrameInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_EndFrame(IAMVideoAccelerator* This,const AMVAEndFrameInfo *pEndFrameInfo) {
    return This->lpVtbl->EndFrame(This,pEndFrameInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_GetBuffer(IAMVideoAccelerator* This,DWORD dwTypeIndex,DWORD dwBufferIndex,BOOL bReadOnly,LPVOID *ppBuffer,LONG *lpStride) {
    return This->lpVtbl->GetBuffer(This,dwTypeIndex,dwBufferIndex,bReadOnly,ppBuffer,lpStride);
}
FORCEINLINE HRESULT IAMVideoAccelerator_ReleaseBuffer(IAMVideoAccelerator* This,DWORD dwTypeIndex,DWORD dwBufferIndex) {
    return This->lpVtbl->ReleaseBuffer(This,dwTypeIndex,dwBufferIndex);
}
FORCEINLINE HRESULT IAMVideoAccelerator_Execute(IAMVideoAccelerator* This,DWORD dwFunction,LPVOID lpPrivateInputData,DWORD cbPrivateInputData,LPVOID lpPrivateOutputDat,DWORD cbPrivateOutputData,DWORD dwNumBuffers,const AMVABUFFERINFO *pamvaBufferInfo) {
    return This->lpVtbl->Execute(This,dwFunction,lpPrivateInputData,cbPrivateInputData,lpPrivateOutputDat,cbPrivateOutputData,dwNumBuffers,pamvaBufferInfo);
}
FORCEINLINE HRESULT IAMVideoAccelerator_QueryRenderStatus(IAMVideoAccelerator* This,DWORD dwTypeIndex,DWORD dwBufferIndex,DWORD dwFlags) {
    return This->lpVtbl->QueryRenderStatus(This,dwTypeIndex,dwBufferIndex,dwFlags);
}
FORCEINLINE HRESULT IAMVideoAccelerator_DisplayFrame(IAMVideoAccelerator* This,DWORD dwFlipToIndex,IMediaSample *pMediaSample) {
    return This->lpVtbl->DisplayFrame(This,dwFlipToIndex,pMediaSample);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetVideoAcceleratorGUIDs_Proxy(
    IAMVideoAccelerator* This,
    LPDWORD pdwNumGuidsSupported,
    LPGUID pGuidsSupported);
void __RPC_STUB IAMVideoAccelerator_GetVideoAcceleratorGUIDs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetUncompFormatsSupported_Proxy(
    IAMVideoAccelerator* This,
    const GUID *pGuid,
    LPDWORD pdwNumFormatsSupported,
    LPDDPIXELFORMAT pFormatsSupported);
void __RPC_STUB IAMVideoAccelerator_GetUncompFormatsSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetInternalMemInfo_Proxy(
    IAMVideoAccelerator* This,
    const GUID *pGuid,
    const AMVAUncompDataInfo *pamvaUncompDataInfo,
    LPAMVAInternalMemInfo pamvaInternalMemInfo);
void __RPC_STUB IAMVideoAccelerator_GetInternalMemInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetCompBufferInfo_Proxy(
    IAMVideoAccelerator* This,
    const GUID *pGuid,
    const AMVAUncompDataInfo *pamvaUncompDataInfo,
    LPDWORD pdwNumTypesCompBuffers,
    LPAMVACompBufferInfo pamvaCompBufferInfo);
void __RPC_STUB IAMVideoAccelerator_GetCompBufferInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetInternalCompBufferInfo_Proxy(
    IAMVideoAccelerator* This,
    LPDWORD pdwNumTypesCompBuffers,
    LPAMVACompBufferInfo pamvaCompBufferInfo);
void __RPC_STUB IAMVideoAccelerator_GetInternalCompBufferInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_BeginFrame_Proxy(
    IAMVideoAccelerator* This,
    const AMVABeginFrameInfo *amvaBeginFrameInfo);
void __RPC_STUB IAMVideoAccelerator_BeginFrame_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_EndFrame_Proxy(
    IAMVideoAccelerator* This,
    const AMVAEndFrameInfo *pEndFrameInfo);
void __RPC_STUB IAMVideoAccelerator_EndFrame_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_GetBuffer_Proxy(
    IAMVideoAccelerator* This,
    DWORD dwTypeIndex,
    DWORD dwBufferIndex,
    BOOL bReadOnly,
    LPVOID *ppBuffer,
    LONG *lpStride);
void __RPC_STUB IAMVideoAccelerator_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_ReleaseBuffer_Proxy(
    IAMVideoAccelerator* This,
    DWORD dwTypeIndex,
    DWORD dwBufferIndex);
void __RPC_STUB IAMVideoAccelerator_ReleaseBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_Execute_Proxy(
    IAMVideoAccelerator* This,
    DWORD dwFunction,
    LPVOID lpPrivateInputData,
    DWORD cbPrivateInputData,
    LPVOID lpPrivateOutputDat,
    DWORD cbPrivateOutputData,
    DWORD dwNumBuffers,
    const AMVABUFFERINFO *pamvaBufferInfo);
void __RPC_STUB IAMVideoAccelerator_Execute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_QueryRenderStatus_Proxy(
    IAMVideoAccelerator* This,
    DWORD dwTypeIndex,
    DWORD dwBufferIndex,
    DWORD dwFlags);
void __RPC_STUB IAMVideoAccelerator_QueryRenderStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAccelerator_DisplayFrame_Proxy(
    IAMVideoAccelerator* This,
    DWORD dwFlipToIndex,
    IMediaSample *pMediaSample);
void __RPC_STUB IAMVideoAccelerator_DisplayFrame_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IAMVideoAccelerator_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IAMVideoAcceleratorNotify interface
 */
#ifndef __IAMVideoAcceleratorNotify_INTERFACE_DEFINED__
#define __IAMVideoAcceleratorNotify_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAMVideoAcceleratorNotify, 0x256a6a21, 0xfbad, 0x11d1, 0x82,0xbf, 0x00,0xa0,0xc9,0x69,0x6c,0x8f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("256a6a21-fbad-11d1-82bf-00a0c9696c8f")
IAMVideoAcceleratorNotify : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetUncompSurfacesInfo(
        const GUID *pGuid,
        LPAMVAUncompBufferInfo pUncompBufferInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetUncompSurfacesInfo(
        DWORD dwActualUncompSurfacesAllocated) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCreateVideoAcceleratorData(
        const GUID *pGuid,
        LPDWORD pdwSizeMiscData,
        LPVOID *ppMiscData) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAMVideoAcceleratorNotify, 0x256a6a21, 0xfbad, 0x11d1, 0x82,0xbf, 0x00,0xa0,0xc9,0x69,0x6c,0x8f)
#endif
#else
typedef struct IAMVideoAcceleratorNotifyVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAMVideoAcceleratorNotify *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAMVideoAcceleratorNotify *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAMVideoAcceleratorNotify *This);

    /*** IAMVideoAcceleratorNotify methods ***/
    HRESULT (STDMETHODCALLTYPE *GetUncompSurfacesInfo)(
        IAMVideoAcceleratorNotify *This,
        const GUID *pGuid,
        LPAMVAUncompBufferInfo pUncompBufferInfo);

    HRESULT (STDMETHODCALLTYPE *SetUncompSurfacesInfo)(
        IAMVideoAcceleratorNotify *This,
        DWORD dwActualUncompSurfacesAllocated);

    HRESULT (STDMETHODCALLTYPE *GetCreateVideoAcceleratorData)(
        IAMVideoAcceleratorNotify *This,
        const GUID *pGuid,
        LPDWORD pdwSizeMiscData,
        LPVOID *ppMiscData);

    END_INTERFACE
} IAMVideoAcceleratorNotifyVtbl;

interface IAMVideoAcceleratorNotify {
    CONST_VTBL IAMVideoAcceleratorNotifyVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAMVideoAcceleratorNotify_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAMVideoAcceleratorNotify_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAMVideoAcceleratorNotify_Release(This) (This)->lpVtbl->Release(This)
/*** IAMVideoAcceleratorNotify methods ***/
#define IAMVideoAcceleratorNotify_GetUncompSurfacesInfo(This,pGuid,pUncompBufferInfo) (This)->lpVtbl->GetUncompSurfacesInfo(This,pGuid,pUncompBufferInfo)
#define IAMVideoAcceleratorNotify_SetUncompSurfacesInfo(This,dwActualUncompSurfacesAllocated) (This)->lpVtbl->SetUncompSurfacesInfo(This,dwActualUncompSurfacesAllocated)
#define IAMVideoAcceleratorNotify_GetCreateVideoAcceleratorData(This,pGuid,pdwSizeMiscData,ppMiscData) (This)->lpVtbl->GetCreateVideoAcceleratorData(This,pGuid,pdwSizeMiscData,ppMiscData)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IAMVideoAcceleratorNotify_QueryInterface(IAMVideoAcceleratorNotify* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IAMVideoAcceleratorNotify_AddRef(IAMVideoAcceleratorNotify* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IAMVideoAcceleratorNotify_Release(IAMVideoAcceleratorNotify* This) {
    return This->lpVtbl->Release(This);
}
/*** IAMVideoAcceleratorNotify methods ***/
FORCEINLINE HRESULT IAMVideoAcceleratorNotify_GetUncompSurfacesInfo(IAMVideoAcceleratorNotify* This,const GUID *pGuid,LPAMVAUncompBufferInfo pUncompBufferInfo) {
    return This->lpVtbl->GetUncompSurfacesInfo(This,pGuid,pUncompBufferInfo);
}
FORCEINLINE HRESULT IAMVideoAcceleratorNotify_SetUncompSurfacesInfo(IAMVideoAcceleratorNotify* This,DWORD dwActualUncompSurfacesAllocated) {
    return This->lpVtbl->SetUncompSurfacesInfo(This,dwActualUncompSurfacesAllocated);
}
FORCEINLINE HRESULT IAMVideoAcceleratorNotify_GetCreateVideoAcceleratorData(IAMVideoAcceleratorNotify* This,const GUID *pGuid,LPDWORD pdwSizeMiscData,LPVOID *ppMiscData) {
    return This->lpVtbl->GetCreateVideoAcceleratorData(This,pGuid,pdwSizeMiscData,ppMiscData);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IAMVideoAcceleratorNotify_GetUncompSurfacesInfo_Proxy(
    IAMVideoAcceleratorNotify* This,
    const GUID *pGuid,
    LPAMVAUncompBufferInfo pUncompBufferInfo);
void __RPC_STUB IAMVideoAcceleratorNotify_GetUncompSurfacesInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAcceleratorNotify_SetUncompSurfacesInfo_Proxy(
    IAMVideoAcceleratorNotify* This,
    DWORD dwActualUncompSurfacesAllocated);
void __RPC_STUB IAMVideoAcceleratorNotify_SetUncompSurfacesInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IAMVideoAcceleratorNotify_GetCreateVideoAcceleratorData_Proxy(
    IAMVideoAcceleratorNotify* This,
    const GUID *pGuid,
    LPDWORD pdwSizeMiscData,
    LPVOID *ppMiscData);
void __RPC_STUB IAMVideoAcceleratorNotify_GetCreateVideoAcceleratorData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IAMVideoAcceleratorNotify_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __videoacc_h__ */
