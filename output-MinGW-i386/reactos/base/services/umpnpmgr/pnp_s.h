/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/sdk/include/reactos/idl/pnp.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __pnp_s_h__
#define __pnp_s_h__

/* Forward declarations */

/* Headers for imported files */


#ifdef __cplusplus
extern "C" {
#endif

#ifndef _DTYP_IDL
#define _DTYP_IDL
#ifndef _WINDEF_H
typedef int BOOL;
typedef int *PBOOL;
typedef int *LPBOOL;
typedef unsigned char BYTE;
typedef unsigned char *PBYTE;
typedef unsigned char *LPBYTE;
typedef ULONG DWORD;
typedef ULONG *PDWORD;
typedef ULONG *LPDWORD;
#endif
#ifndef _BASETSD_H_
typedef unsigned int DWORD32;
typedef UINT64 DWORD64;
#endif
#ifndef _WINDEF_H
typedef int INT;
typedef int *LPINT;
#endif
#ifndef _BASETSD_H_
typedef signed char INT8;
typedef signed short INT16;
typedef signed int INT32;
typedef INT64 INT64;
#endif
#ifndef _BASETSD_H_
typedef signed int LONG32;
typedef INT64 LONG64;
#endif
typedef UINT64 QWORD;
#ifndef _WINNT_
typedef short SHORT;
#endif
typedef INT64 TIME;
#ifndef _WINNT_
typedef char CHAR;
typedef char *PCHAR;
typedef unsigned char UCHAR;
typedef unsigned char *PUCHAR;
#endif
#ifndef _WINDEF_H
typedef unsigned int UINT;
#endif
#ifndef _BASETSD_H_
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef UINT64 UINT64;
#endif
#ifndef _WINNT_
typedef ULONG ULONG;
typedef ULONG *PULONG;
#endif
#ifndef _BASETSD_H_
typedef unsigned int ULONG32;
typedef UINT64 ULONG64;
#endif
#ifndef _WINNT_
typedef UINT64 ULONGLONG;
typedef unsigned short USHORT;
#endif
#ifndef _WINDEF_H
typedef unsigned short WORD;
typedef unsigned short *PWORD;
typedef unsigned short *LPWORD;
#endif
#ifndef _WINNT_
typedef LONG LONG;
typedef LONG *PLONG;
#endif
#ifndef _WINDEF_H
typedef LONG *LPLONG;
#endif
#ifndef _WINNT_
typedef INT64 LONGLONG;
#endif
#ifndef _WINDEF_H
typedef float FLOAT;
#endif
#ifndef __wtypes_h__
typedef double DOUBLE;
#endif
#ifndef _WINNT_
typedef BYTE BOOLEAN;
typedef BYTE *PBOOLEAN;
#endif
#ifndef _BASETSD_H_
typedef LONG LONG_PTR;
typedef ULONG ULONG_PTR;
typedef ULONG_PTR SIZE_T;
typedef ULONG_PTR DWORD_PTR;
#endif
typedef DWORD NET_API_STATUS;
#ifndef _WINNT_
typedef ULONGLONG DWORDLONG;
typedef ULONGLONG *PDWORDLONG;
#endif
typedef DWORD HCALL;
#ifndef _WINNT_
typedef void *HANDLE;
typedef void *PVOID;
#endif
#ifndef __WINE_RPCDCE_H
typedef void *RPC_BINDING_HANDLE;
#endif
typedef void *PCONTEXT_HANDLE;
typedef PCONTEXT_HANDLE *PPCONTEXT_HANDLE;
#ifndef _WINNT_
typedef wchar_t WCHAR;
typedef wchar_t *PWCHAR;
#if 0
typedef wchar_t UNICODE;
#endif
typedef const char *LPCSTR;
typedef const wchar_t *LPCWSTR;
typedef char *PSTR;
typedef char *LPSTR;
typedef wchar_t *LPWSTR;
typedef wchar_t *PWSTR;
#endif
typedef const wchar_t *LMCSTR;
typedef WCHAR *LMSTR;
#ifndef __wtypes_h__
typedef WCHAR *BSTR;
#endif
#if 0
typedef LPCSTR LPCTSTR;
typedef LPSTR LPTSTR;
typedef CHAR TCHAR;
#endif
#if 0
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME;
typedef struct _FILETIME *PFILETIME;
typedef struct _FILETIME *LPFILETIME;
typedef struct _GUID {
    DWORD Data1;
    WORD Data2;
    WORD Data3;
    BYTE Data4[8];
} GUID;
typedef struct _GUID UUID;
typedef struct _GUID *PGUID;
typedef struct _LARGE_INTEGER {
    LONGLONG QuadPart;
} LARGE_INTEGER;
typedef struct _LARGE_INTEGER *PLARGE_INTEGER;
typedef DWORD LCID;
#endif
typedef struct _RPC_UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    LPWSTR Buffer;
} RPC_UNICODE_STRING;
typedef struct _RPC_UNICODE_STRING *PRPC_UNICODE_STRING;
#if 0
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME;
typedef struct _SYSTEMTIME *PSYSTEMTIME;
typedef struct _UINT128 {
    UINT64 lower;
    UINT64 upper;
} UINT128;
typedef struct _UINT128 *PUINT128;
typedef struct _ULARGE_INTEGER {
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
typedef struct _ULARGE_INTEGER *PULARGE_INTEGER;
#endif
#if 0
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} SID;
typedef struct _SID *PSID;
typedef struct _ACCESS_MASK {
    DWORD ACCESS_MASK;
} ACCESS_MASK;
typedef struct _ACCESS_MASK *PACCESS_MASK;
typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
} ACE_HEADER;
typedef struct _ACE_HEADER *PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;
typedef struct _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef struct _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
} ACL;
typedef struct _ACL *PACL;
typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
} SECURITY_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR *PSECURITY_DESCRIPTOR;
typedef DWORD SECURITY_INFORMATION;
typedef DWORD *PSECURITY_INFORMATION;
#endif
typedef struct _RPC_SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} RPC_SID;
typedef struct _RPC_SID *PRPC_SID;
#endif /* _DTYP_IDL */
#define PNP_MAX_STRING_LEN (32767)

#define PNP_MAX_DEVICE_ID_LEN (200)

#define PNP_MAX_GUID_STRING_LEN (39)

#define PNP_MAX_DEVINTERFACE_LEN (PNP_MAX_STRING_LEN)

#define PNP_MAX_CULTURE_NAME_LEN (85)

#define PNP_MAX_CM_PATH (360)

#define PNP_MAX_PROP_SIZE (65534)

#define PNP_MAX_PROP_COUNT (32767)

#define PNP_MAX_BUFFER_SIZE (16000000)

#ifndef _CFGMGR32_H_
typedef ULONG RESOURCEID;
typedef struct _HWPROFILEINFO {
    DWORD HWPI_ulHWProfile;
    WCHAR HWPI_szFriendlyName[80];
    DWORD HWPI_dwFlags;
} HWPROFILEINFO;
#endif
typedef ULONG DEVPROPTYPE;
typedef ULONG PNP_PROP_SIZE;
typedef ULONG PNP_PROP_COUNT;
typedef ULONG PNP_RPC_STRING_LEN;
typedef ULONG PNP_RPC_BUFFER_SIZE;
typedef PNP_PROP_SIZE *PPNP_PROP_SIZE;
typedef PNP_PROP_COUNT *PPNP_PROP_COUNT;
typedef PNP_RPC_STRING_LEN *PPNP_RPC_STRING_LEN;
typedef PNP_RPC_BUFFER_SIZE *PPNP_RPC_BUFFER_SIZE;
#ifndef _CFG_INCLUDED_
typedef enum _PNP_VETO_TYPE {
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12
} *PPNP_VETO_TYPE;
#endif
#if 0
typedef struct _BUSNUMBER_DES {
    DWORD BUSD_Count;
    DWORD BUSD_Type;
    DWORD BUSD_Flags;
    DWORD BUSD_Alloc_Base;
    DWORD BUSD_Alloc_End;
} BUSNUMBER_DES;
typedef struct _BUSNUMBER_DES *PBUSNUMBER_DES;
typedef struct _BUSNUMBER_RANGE {
    DWORD BUSR_Min;
    DWORD BUSR_Max;
    DWORD BUSR_nBusNumbers;
    DWORD BUSR_Flags;
} BUSNUMBER_RANGE;
typedef struct _BUSNUMBER_RANGE *PBUSNUMBER_RANGE;
typedef struct _BUSNUMBER_RESOURCE {
    BUSNUMBER_DES BusNumber_Header;
    BUSNUMBER_RANGE BusNumber_Data[1];
} BUSNUMBER_RESOURCE;
typedef struct _BUSNUMBER_RESOURCE *PBUSNUMBER_RESOURCE;
typedef struct _CS_DES {
    DWORD CSD_SignatureLength;
    DWORD CSD_LegacyDataOffset;
    DWORD CSD_LegacyDataSize;
    DWORD CSD_Flags;
    GUID CSD_ClassGuid;
    BYTE CSD_Signature[1];
} CS_DES;
typedef struct _CS_DES *PCS_DES;
typedef struct _CS_RESOURCE {
    CS_DES CS_Header;
} CS_RESOURCE;
typedef struct _CS_RESOURCE *PCS_RESOURCE;
typedef struct _DEVPRIVATE_DES {
    DWORD PD_Count;
    DWORD PD_Type;
    DWORD PD_Data1;
    DWORD PD_Data2;
    DWORD PD_Data3;
    DWORD PD_Flags;
} DEVPRIVATE_DES;
typedef struct _DEVPRIVATE_DES *PDEVPRIVATE_DES;
typedef struct _DEVPRIVATE_RANGE {
    DWORD PR_Data1;
    DWORD PR_Data2;
    DWORD PR_Data3;
} DEVPRIVATE_RANGE;
typedef struct _DEVPRIVATE_RANGE *PDEVPRIVATE_RANGE;
typedef struct _DEVPRIVATE_RESOURCE {
    DEVPRIVATE_DES PRV_Header;
    DEVPRIVATE_RANGE PRV_Data[1];
} DEVPRIVATE_RESOURCE;
typedef struct _DEVPRIVATE_RESOURCE *PDEVPRIVATE_RESOURCE;
typedef struct _DMA_DES {
    DWORD DD_Count;
    DWORD DD_Type;
    DWORD DD_Flags;
    ULONG DD_Alloc_Chan;
} DMA_DES;
typedef struct _DMA_DES *PDMA_DES;
typedef struct _DMA_RANGE {
    DWORD DR_Min;
    DWORD DR_Max;
    DWORD DR_Flags;
} DMA_RANGE;
typedef struct _DMA_RANGE *PDMA_RANGE;
typedef struct _DMA_RESOURCE {
    DMA_DES DMA_Header;
    DMA_RANGE DMA_Data[1];
} DMA_RESOURCE;
typedef struct _DMA_RESOURCE *PDMA_RESOURCE;
typedef struct _IO_DES {
    DWORD IOD_Count;
    DWORD IOD_Type;
    UINT64 IOD_AllocBase;
    UINT64 IOD_AllocEnd;
    DWORD IOD_DesFlags;
} IO_DES;
typedef struct _IO_DES *PIO_DES;
typedef struct _IO_RANGE {
    UINT64 IOR_Align;
    DWORD IOR_nPorts;
    UINT64 IOR_Min;
    UINT64 IOR_Max;
    DWORD IOR_RangeFlags;
    UINT64 IOR_Alias;
} IO_RANGE;
typedef struct _IO_RANGE *PIO_RANGE;
typedef struct _IO_RESOURCE {
    IO_DES IO_Header;
    IO_RANGE IO_Data[1];
} IO_RESOURCE;
typedef struct _IO_RESOURCE *PIO_RESOURCE;
typedef struct _IRQ_DES {
    DWORD IRQD_Count;
    DWORD IRQD_Type;
    DWORD IRQD_Flags;
    DWORD IRQD_Alloc_Num;
    DWORD IRQD_Affinity;
} IRQ_DES;
typedef struct _IRQ_DES *PIRQ_DES;
typedef struct _IRQ_RANGE {
    DWORD IRQR_Min;
    DWORD IRQR_Max;
    DWORD IRQR_Flags;
} IRQ_RANGE;
typedef struct _IRQ_RANGE *PIRQ_RANGE;
typedef struct _IRQ_RESOURCE {
    IRQ_DES IO_Header;
    IRQ_RANGE IO_Data[1];
} IRQ_RESOURCE;
typedef struct _IRQ_RESOURCE *PIRQ_RESOURCE;
typedef struct _MEM_DES {
    DWORD MD_Count;
    DWORD MD_Type;
    UINT64 MD_Alloc_Base;
    UINT64 MD_Alloc_End;
    DWORD MD_Flags;
    DWORD Reserved;
} MEM_DES;
typedef struct _MEM_DES *PMEM_DES;
typedef struct _MEM_RANGE {
    INT64 MR_Align;
    DWORD MR_nBytes;
    INT64 MR_Min;
    INT64 MR_Max;
    DWORD MR_Flags;
    DWORD MR_Reserved;
} MEM_RANGE;
typedef struct _MEM_RANGE *PMEM_RANGE;
typedef struct _MEM_RESOURCE {
    MEM_DES MEM_Header;
    MEM_RANGE MEM_Data[1];
} MEM_RESOURCE;
typedef struct _MEM_RESOURCE *PMEM_RESOURCE;
typedef struct _MFCARD_DES {
    DWORD PMF_Count;
    DWORD PMF_Type;
    DWORD PMF_Flags;
    BYTE PMF_ConfigOptions;
    BYTE PMF_IoResourceIndex;
    BYTE PMF_Reserved[2];
    DWORD PMF_ConfigRegisterBase;
} MFCARD_DES;
typedef struct _MFCARD_DES *PMFCARD_DES;
typedef struct _MFCARD_RESOURCE {
    MFCARD_DES MfCard_Header;
} MFCARD_RESOURCE;
typedef struct _MFCARD_RESOURCE *PMFCARD_RESOURCE;
typedef struct _PCCARD_DES {
    DWORD PCD_Count;
    DWORD PCD_Type;
    DWORD PCD_Flags;
    BYTE PCD_ConfigIndex;
    BYTE PCD_Reserved[3];
    DWORD PCD_MemoryCardBase1;
    DWORD PCD_MemoryCardBase2;
} PCCARD_DES;
typedef struct _PCCARD_DES *PPCCARD_DES;
typedef struct _PCCARD_RESOURCE {
    PCCARD_DES PcCard_Header;
} PCCARD_RESOURCE;
typedef struct _PCCARD_RESOURCE *PPCARD_RESOURCE;
#endif
typedef struct _PNP_CONFLICT_ENTRY {
    DWORD DeviceInstance;
    DWORD DeviceFlags;
    DWORD ResourceType;
    INT64 ResourceStart;
    INT64 ResourceEnd;
    DWORD ResourceFlags;
} PNP_CONFLICT_ENTRY;
typedef struct _PNP_CONFLICT_ENTRY *PPNP_CONFLICT_ENTRY;
typedef struct _PNP_CONFLICT_LIST {
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD ConflictsCounted;
    DWORD ConflictsListed;
    DWORD RequiredBufferSize;
    PNP_CONFLICT_ENTRY ConflictEntry[1];
} PNP_CONFLICT_LIST;
typedef struct _PNP_CONFLICT_LIST *PPNP_CONFLICT_LIST;
typedef struct _PNP_CONFLICT_STRINGS {
    DWORD NullDeviceInstance;
    WCHAR DeviceInstanceStrings[1];
} PNP_CONFLICT_STRINGS;
typedef struct _PNP_CONFLICT_STRINGS *PPNP_CONFLICT_STRINGS;
typedef struct _DEVPROPKEY {
    GUID fmtid;
    DWORD pid;
} DEVPROPKEY;
/*****************************************************************************
 * pnp interface (v1.0)
 */
#ifndef __pnp_INTERFACE_DEFINED__
#define __pnp_INTERFACE_DEFINED__

extern RPC_IF_HANDLE pnp_v1_0_c_ifspec;
extern RPC_IF_HANDLE pnp_v1_0_s_ifspec;
DWORD __stdcall PNP_Disconnect(
    handle_t hBinding);

DWORD __stdcall PNP_Connect(
    handle_t hBinding);

DWORD __stdcall PNP_GetVersion(
    handle_t hBinding,
    WORD *pVersion);

DWORD __stdcall PNP_GetGlobalState(
    handle_t hBinding,
    DWORD *pulState,
    DWORD ulFlags);

DWORD __stdcall PNP_InitDetection(
    handle_t hBinding);

DWORD __stdcall PNP_ReportLogOn(
    handle_t hBinding,
    BOOL Admin,
    DWORD ProcessId);

DWORD __stdcall PNP_ValidateDeviceInstance(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulFlags);

DWORD __stdcall PNP_GetRootDeviceInstance(
    handle_t hBinding,
    LPWSTR pDeviceID,
    PNP_RPC_STRING_LEN ulLength);

#define PNP_GET_PARENT_DEVICE_INSTANCE  0x1
#define PNP_GET_CHILD_DEVICE_INSTANCE   0x2
#define PNP_GET_SIBLING_DEVICE_INSTANCE 0x3
DWORD __stdcall PNP_GetRelatedDeviceInstance(
    handle_t hBinding,
    DWORD ulRelationship,
    LPWSTR pDeviceID,
    LPWSTR pRelatedDeviceId,
    PNP_RPC_STRING_LEN *pulLength,
    DWORD ulFlags);

#define PNP_ENUMERATOR_SUBKEYS 0x1
#define PNP_CLASS_SUBKEYS      0x2
DWORD __stdcall PNP_EnumerateSubKeys(
    handle_t hBinding,
    DWORD ulBranch,
    DWORD ulIndex,
    LPWSTR Buffer,
    PNP_RPC_STRING_LEN ulLength,
    PNP_RPC_STRING_LEN *pulRequiredLen,
    DWORD ulFlags);

DWORD __stdcall PNP_GetDeviceList(
    handle_t hBinding,
    LPWSTR pszFilter,
    LPWSTR Buffer,
    PNP_RPC_STRING_LEN *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetDeviceListSize(
    handle_t hBinding,
    LPWSTR pszFilter,
    PNP_RPC_BUFFER_SIZE *pulLen,
    DWORD ulFlags);

DWORD __stdcall PNP_GetDepth(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    DWORD *pulDepth,
    DWORD ulFlags);

DWORD __stdcall PNP_GetDeviceRegProp(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulProperty,
    DWORD *pulRegDataType,
    BYTE *Buffer,
    PNP_PROP_SIZE *pulTransferLen,
    PNP_PROP_SIZE *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_SetDeviceRegProp(
    handle_t hBinding,
    LPWSTR pDeviceId,
    DWORD ulProperty,
    DWORD ulDataType,
    BYTE *Buffer,
    PNP_PROP_SIZE ulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetClassInstance(
    handle_t hBinding,
    LPWSTR pDeviceId,
    LPWSTR pszClassInstance,
    PNP_RPC_STRING_LEN ulLength);

DWORD __stdcall PNP_CreateKey(
    handle_t hBinding,
    LPWSTR pszSubKey,
    DWORD samDesired,
    DWORD ulFlags);

DWORD __stdcall PNP_DeleteRegistryKey(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    LPWSTR pszParentKey,
    LPWSTR pszChildKey,
    DWORD ulFlags);

DWORD __stdcall PNP_GetClassCount(
    handle_t hBinding,
    DWORD *pulClassCount,
    DWORD ulFlags);

DWORD __stdcall PNP_GetClassName(
    handle_t hBinding,
    LPWSTR pszClassGuid,
    LPWSTR Buffer,
    PNP_RPC_STRING_LEN *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_DeleteClassKey(
    handle_t hBinding,
    LPWSTR pszClassGuid,
    DWORD ulFlags);

DWORD __stdcall PNP_GetInterfaceDeviceAlias(
    handle_t hBinding,
    LPWSTR pszInterfaceDevice,
    GUID *AliasInterfaceGuid,
    LPWSTR pszAliasInterfaceDevice,
    PNP_RPC_STRING_LEN *pulLength,
    PNP_RPC_STRING_LEN *pulTransferLen,
    DWORD ulFlags);

DWORD __stdcall PNP_GetInterfaceDeviceList(
    handle_t hBinding,
    GUID *InterfaceGuid,
    LPWSTR pszDeviceID,
    BYTE *Buffer,
    PNP_RPC_BUFFER_SIZE *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetInterfaceDeviceListSize(
    handle_t hBinding,
    PNP_RPC_BUFFER_SIZE *pulLen,
    GUID *InterfaceGuid,
    LPWSTR pszDeviceID,
    DWORD ulFlags);

DWORD __stdcall PNP_RegisterDeviceClassAssociation(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    GUID *InterfaceGuid,
    LPWSTR pszReference,
    LPWSTR pszSymLink,
    PNP_RPC_STRING_LEN *pulLength,
    PNP_RPC_STRING_LEN *pulTransferLen,
    DWORD ulFlags);

DWORD __stdcall PNP_UnregisterDeviceClassAssociation(
    handle_t hBinding,
    LPWSTR pszInterfaceDevice,
    DWORD ulFlags);

DWORD __stdcall PNP_GetClassRegProp(
    handle_t hBinding,
    LPWSTR pszClassGuid,
    DWORD ulProperty,
    DWORD *pulRegDataType,
    BYTE *Buffer,
    PNP_RPC_STRING_LEN *pulTransferLen,
    PNP_RPC_STRING_LEN *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_SetClassRegProp(
    handle_t hBinding,
    LPWSTR pszClassGuid,
    DWORD ulProperty,
    DWORD ulDataType,
    BYTE *Buffer,
    PNP_PROP_SIZE ulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_CreateDevInst(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    LPWSTR pszParentDeviceID,
    PNP_RPC_STRING_LEN ulLength,
    DWORD ulFlags);

#define PNP_DEVINST_MOVE        0x2
#define PNP_DEVINST_SETUP       0x3
#define PNP_DEVINST_ENABLE      0x4
#define PNP_DEVINST_DISABLE     0x5
#define PNP_DEVINST_REENUMERATE 0x7
DWORD __stdcall PNP_DeviceInstanceAction(
    handle_t hBinding,
    DWORD ulAction,
    DWORD ulFlags,
    LPWSTR pszDeviceInstance1,
    LPWSTR pszDeviceInstance2);

DWORD __stdcall PNP_GetDeviceStatus(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD *pulStatus,
    DWORD *pulProblem,
    DWORD ulFlags);

DWORD __stdcall PNP_SetDeviceProblem(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulProblem,
    DWORD ulFlags);

DWORD __stdcall PNP_DisableDevInst(
    handle_t hBinding,
    LPWSTR pDeviceID,
    PPNP_VETO_TYPE pVetoType,
    LPWSTR pszVetoName,
    DWORD ulNameLength,
    DWORD ulFlags);

DWORD __stdcall PNP_UninstallDevInst(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulFlags);

DWORD __stdcall PNP_AddID(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    LPWSTR pszID,
    DWORD ulFlags);

DWORD __stdcall PNP_RegisterDriver(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    DWORD ulFlags);

DWORD __stdcall PNP_QueryRemove(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    PPNP_VETO_TYPE pVetoType,
    LPWSTR pszVetoName,
    DWORD ulNameLength,
    DWORD ulFlags);

DWORD __stdcall PNP_RequestDeviceEject(
    handle_t hBinding,
    LPWSTR pszDeviceID,
    PPNP_VETO_TYPE pVetoType,
    LPWSTR pszVetoName,
    DWORD ulNameLength,
    DWORD ulFlags);

DWORD __stdcall PNP_IsDockStationPresent(
    handle_t hBinding,
    BOOL *Present);

DWORD __stdcall PNP_RequestEjectPC(
    handle_t hBinding);

#define PNP_GET_HWPROFFLAGS 0x1
#define PNP_SET_HWPROFFLAGS 0x2
DWORD __stdcall PNP_HwProfFlags(
    handle_t hBinding,
    DWORD ulAction,
    LPWSTR pDeviceID,
    DWORD ulConfig,
    DWORD *pulValue,
    PPNP_VETO_TYPE pVetoType,
    LPWSTR pszVetoName,
    DWORD ulNameLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetHwProfInfo(
    handle_t hBinding,
    DWORD ulIndex,
    HWPROFILEINFO *pHWProfileInfo,
    DWORD ulProfileInfoSize,
    DWORD ulFlags);

DWORD __stdcall PNP_AddEmptyLogConf(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulPriority,
    DWORD *pulLogConfTag,
    DWORD ulFlags);

DWORD __stdcall PNP_FreeLogConf(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfType,
    DWORD ulLogConfTag,
    DWORD ulFlags);

DWORD __stdcall PNP_GetFirstLogConf(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfType,
    DWORD *pulLogConfTag,
    DWORD ulFlags);

DWORD __stdcall PNP_GetNextLogConf(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfType,
    DWORD ulCurrentTag,
    DWORD *pulNextTag,
    DWORD ulFlags);

DWORD __stdcall PNP_GetLogConfPriority(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulType,
    DWORD ulTag,
    DWORD *pPriority,
    DWORD ulFlags);

DWORD __stdcall PNP_AddResDes(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID ResourceID,
    DWORD *pulResourceTag,
    BYTE *ResourceData,
    PNP_RPC_BUFFER_SIZE ResourceLen,
    DWORD ulFlags);

DWORD __stdcall PNP_FreeResDes(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID ResourceID,
    DWORD ulResourceTag,
    DWORD *pulPreviousResType,
    DWORD *pulPreviousResTag,
    DWORD ulFlags);

DWORD __stdcall PNP_GetNextResDes(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID ResourceID,
    DWORD ulResourceTag,
    DWORD *pulNextResType,
    DWORD *pulNextResTag,
    DWORD ulFlags);

DWORD __stdcall PNP_GetResDesData(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID ResourceID,
    DWORD ulResourceTag,
    BYTE *Buffer,
    PNP_RPC_BUFFER_SIZE BufferLen,
    DWORD ulFlags);

DWORD __stdcall PNP_GetResDesDataSize(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID ResourceID,
    DWORD ulResourceTag,
    DWORD *pulSize,
    DWORD ulFlags);

DWORD __stdcall PNP_ModifyResDes(
    handle_t hBinding,
    LPWSTR pDeviceID,
    DWORD ulLogConfTag,
    DWORD ulLogConfType,
    RESOURCEID CurrentResourceID,
    RESOURCEID NewResourceID,
    DWORD ulResourceTag,
    BYTE *ResourceData,
    PNP_RPC_BUFFER_SIZE ResourceLen,
    DWORD ulFlags);

DWORD __stdcall PNP_DetectResourceConflict(
    handle_t hBinding,
    LPWSTR pDeviceID,
    RESOURCEID ResourceID,
    BYTE *ResourceData,
    PNP_RPC_BUFFER_SIZE ResourceLen,
    BOOL *pbConflictDetected,
    DWORD ulFlags);

DWORD __stdcall PNP_QueryResConfList(
    handle_t hBinding,
    LPWSTR pDeviceID,
    RESOURCEID ResourceID,
    BYTE *ResourceData,
    PNP_RPC_BUFFER_SIZE ResourceLen,
    BYTE *Buffer,
    PNP_RPC_BUFFER_SIZE BufferLen,
    DWORD ulFlags);

DWORD __stdcall PNP_SetHwProf(
    handle_t hBinding,
    DWORD ulHardwareProfile,
    DWORD ulFlags);

DWORD __stdcall PNP_QueryArbitratorFreeData(
    handle_t hBinding,
    BYTE *pData,
    DWORD DataLen,
    LPWSTR pDeviceID,
    RESOURCEID ResourceID,
    DWORD ulFlags);

DWORD __stdcall PNP_QueryArbitratorFreeSize(
    handle_t hBinding,
    DWORD *pulSize,
    LPWSTR pDeviceID,
    RESOURCEID ResourceID,
    DWORD ulFlags);

DWORD __stdcall PNP_RunDetection(
    handle_t hBinding,
    DWORD ulFlags);

DWORD __stdcall PNP_RegisterNotification(
    handle_t hBinding,
    DWORD ulFlags,
    DWORD *pulNotifyData);

DWORD __stdcall PNP_UnregisterNotification(
    handle_t hBinding,
    DWORD ulNotifyData);

#if _WIN32_WINNT >= 0x0501
DWORD __stdcall PNP_GetCustomDevProp(
    handle_t hBinding,
    LPWSTR pDeviceID,
    LPWSTR CustomPropName,
    DWORD *pulRegDataType,
    BYTE *Buffer,
    PNP_RPC_STRING_LEN *pulTransferLen,
    PNP_RPC_STRING_LEN *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetVersionInternal(
    handle_t hBinding,
    WORD *pwVersion);

DWORD __stdcall PNP_GetBlockedDriverInfo(
    handle_t hBinding,
    BYTE *Buffer,
    PNP_RPC_BUFFER_SIZE *pulTransferLen,
    PNP_RPC_BUFFER_SIZE *pulLength,
    DWORD ulFlags);

DWORD __stdcall PNP_GetServerSideDeviceInstallFlags(
    handle_t hBinding,
    DWORD *pulSSDIFlags,
    DWORD ulFlags);

#endif /* _WIN32_WINNT >= 0x0501 */

#endif  /* __pnp_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __pnp_s_h__ */
