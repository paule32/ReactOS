/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/base/applications/cmdutils/wscript/ihost.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __ihost_h__
#define __ihost_h__

/* Forward declarations */

#ifndef __IArguments2_FWD_DEFINED__
#define __IArguments2_FWD_DEFINED__
typedef interface IArguments2 IArguments2;
#ifdef __cplusplus
interface IArguments2;
#endif /* __cplusplus */
#endif

#ifndef __ITextStream_FWD_DEFINED__
#define __ITextStream_FWD_DEFINED__
typedef interface ITextStream ITextStream;
#ifdef __cplusplus
interface ITextStream;
#endif /* __cplusplus */
#endif

#ifndef __IHost_FWD_DEFINED__
#define __IHost_FWD_DEFINED__
typedef interface IHost IHost;
#ifdef __cplusplus
interface IHost;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif


DEFINE_GUID(LIBID_IHost, 0x60254ca0, 0x953b, 0x11cf, 0x8c,0x96, 0x00,0xaa,0x00,0xb8,0x70,0x8c);

/*****************************************************************************
 * IArguments2 interface
 */
#ifndef __IArguments2_INTERFACE_DEFINED__
#define __IArguments2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IArguments2, 0x2cc5a9d1, 0xb1e5, 0x11d3, 0xa2,0x86, 0x00,0x10,0x4b,0xd3,0x50,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2cc5a9d1-b1e5-11d3-a286-00104bd35090")
IArguments2 : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Item(
        LONG Index,
        BSTR *out_Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE Count(
        LONG *out_Count) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_length(
        LONG *out_Count) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IArguments2, 0x2cc5a9d1, 0xb1e5, 0x11d3, 0xa2,0x86, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#else
typedef struct IArguments2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IArguments2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IArguments2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IArguments2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IArguments2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IArguments2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IArguments2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IArguments2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IArguments2 methods ***/
    HRESULT (STDMETHODCALLTYPE *Item)(
        IArguments2 *This,
        LONG Index,
        BSTR *out_Value);

    HRESULT (STDMETHODCALLTYPE *Count)(
        IArguments2 *This,
        LONG *out_Count);

    HRESULT (STDMETHODCALLTYPE *get_length)(
        IArguments2 *This,
        LONG *out_Count);

    END_INTERFACE
} IArguments2Vtbl;

interface IArguments2 {
    CONST_VTBL IArguments2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IArguments2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IArguments2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IArguments2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IArguments2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IArguments2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IArguments2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IArguments2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IArguments2 methods ***/
#define IArguments2_Item(This,Index,out_Value) (This)->lpVtbl->Item(This,Index,out_Value)
#define IArguments2_Count(This,out_Count) (This)->lpVtbl->Count(This,out_Count)
#define IArguments2_get_length(This,out_Count) (This)->lpVtbl->get_length(This,out_Count)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IArguments2_QueryInterface(IArguments2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IArguments2_AddRef(IArguments2* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IArguments2_Release(IArguments2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IArguments2_GetTypeInfoCount(IArguments2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IArguments2_GetTypeInfo(IArguments2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IArguments2_GetIDsOfNames(IArguments2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IArguments2_Invoke(IArguments2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IArguments2 methods ***/
FORCEINLINE HRESULT IArguments2_Item(IArguments2* This,LONG Index,BSTR *out_Value) {
    return This->lpVtbl->Item(This,Index,out_Value);
}
FORCEINLINE HRESULT IArguments2_Count(IArguments2* This,LONG *out_Count) {
    return This->lpVtbl->Count(This,out_Count);
}
FORCEINLINE HRESULT IArguments2_get_length(IArguments2* This,LONG *out_Count) {
    return This->lpVtbl->get_length(This,out_Count);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IArguments2_Item_Proxy(
    IArguments2* This,
    LONG Index,
    BSTR *out_Value);
void __RPC_STUB IArguments2_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IArguments2_Count_Proxy(
    IArguments2* This,
    LONG *out_Count);
void __RPC_STUB IArguments2_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IArguments2_get_length_Proxy(
    IArguments2* This,
    LONG *out_Count);
void __RPC_STUB IArguments2_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IArguments2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITextStream interface
 */
#ifndef __ITextStream_INTERFACE_DEFINED__
#define __ITextStream_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53bad8c1-e718-11cf-893d-00a0c9054228")
ITextStream : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Line(
        LONG *Line) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Column(
        LONG *Column) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfStream(
        VARIANT_BOOL *EOS) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfLine(
        VARIANT_BOOL *EOL) = 0;

    virtual HRESULT STDMETHODCALLTYPE Read(
        LONG Characters,
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadLine(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadAll(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE Write(
        BSTR Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteLine(
        BSTR Text = L"") = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteBlankLines(
        LONG Lines) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        LONG Characters) = 0;

    virtual HRESULT STDMETHODCALLTYPE SkipLine(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Close(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28)
#endif
#else
typedef struct ITextStreamVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITextStream *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITextStream *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITextStream *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITextStream *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITextStream *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITextStream *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITextStream *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITextStream methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Line)(
        ITextStream *This,
        LONG *Line);

    HRESULT (STDMETHODCALLTYPE *get_Column)(
        ITextStream *This,
        LONG *Column);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfStream)(
        ITextStream *This,
        VARIANT_BOOL *EOS);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfLine)(
        ITextStream *This,
        VARIANT_BOOL *EOL);

    HRESULT (STDMETHODCALLTYPE *Read)(
        ITextStream *This,
        LONG Characters,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadLine)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadAll)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *Write)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteLine)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteBlankLines)(
        ITextStream *This,
        LONG Lines);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        ITextStream *This,
        LONG Characters);

    HRESULT (STDMETHODCALLTYPE *SkipLine)(
        ITextStream *This);

    HRESULT (STDMETHODCALLTYPE *Close)(
        ITextStream *This);

    END_INTERFACE
} ITextStreamVtbl;

interface ITextStream {
    CONST_VTBL ITextStreamVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITextStream_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITextStream_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITextStream_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITextStream_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITextStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITextStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITextStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITextStream methods ***/
#define ITextStream_get_Line(This,Line) (This)->lpVtbl->get_Line(This,Line)
#define ITextStream_get_Column(This,Column) (This)->lpVtbl->get_Column(This,Column)
#define ITextStream_get_AtEndOfStream(This,EOS) (This)->lpVtbl->get_AtEndOfStream(This,EOS)
#define ITextStream_get_AtEndOfLine(This,EOL) (This)->lpVtbl->get_AtEndOfLine(This,EOL)
#define ITextStream_Read(This,Characters,Text) (This)->lpVtbl->Read(This,Characters,Text)
#define ITextStream_ReadLine(This,Text) (This)->lpVtbl->ReadLine(This,Text)
#define ITextStream_ReadAll(This,Text) (This)->lpVtbl->ReadAll(This,Text)
#define ITextStream_Write(This,Text) (This)->lpVtbl->Write(This,Text)
#define ITextStream_WriteLine(This,Text) (This)->lpVtbl->WriteLine(This,Text)
#define ITextStream_WriteBlankLines(This,Lines) (This)->lpVtbl->WriteBlankLines(This,Lines)
#define ITextStream_Skip(This,Characters) (This)->lpVtbl->Skip(This,Characters)
#define ITextStream_SkipLine(This) (This)->lpVtbl->SkipLine(This)
#define ITextStream_Close(This) (This)->lpVtbl->Close(This)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT ITextStream_QueryInterface(ITextStream* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG ITextStream_AddRef(ITextStream* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG ITextStream_Release(ITextStream* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT ITextStream_GetTypeInfoCount(ITextStream* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT ITextStream_GetTypeInfo(ITextStream* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT ITextStream_GetIDsOfNames(ITextStream* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT ITextStream_Invoke(ITextStream* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITextStream methods ***/
FORCEINLINE HRESULT ITextStream_get_Line(ITextStream* This,LONG *Line) {
    return This->lpVtbl->get_Line(This,Line);
}
FORCEINLINE HRESULT ITextStream_get_Column(ITextStream* This,LONG *Column) {
    return This->lpVtbl->get_Column(This,Column);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfStream(ITextStream* This,VARIANT_BOOL *EOS) {
    return This->lpVtbl->get_AtEndOfStream(This,EOS);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfLine(ITextStream* This,VARIANT_BOOL *EOL) {
    return This->lpVtbl->get_AtEndOfLine(This,EOL);
}
FORCEINLINE HRESULT ITextStream_Read(ITextStream* This,LONG Characters,BSTR *Text) {
    return This->lpVtbl->Read(This,Characters,Text);
}
FORCEINLINE HRESULT ITextStream_ReadLine(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_ReadAll(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadAll(This,Text);
}
FORCEINLINE HRESULT ITextStream_Write(ITextStream* This,BSTR Text) {
    return This->lpVtbl->Write(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteLine(ITextStream* This,BSTR Text) {
    return This->lpVtbl->WriteLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteBlankLines(ITextStream* This,LONG Lines) {
    return This->lpVtbl->WriteBlankLines(This,Lines);
}
FORCEINLINE HRESULT ITextStream_Skip(ITextStream* This,LONG Characters) {
    return This->lpVtbl->Skip(This,Characters);
}
FORCEINLINE HRESULT ITextStream_SkipLine(ITextStream* This) {
    return This->lpVtbl->SkipLine(This);
}
FORCEINLINE HRESULT ITextStream_Close(ITextStream* This) {
    return This->lpVtbl->Close(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ITextStream_get_Line_Proxy(
    ITextStream* This,
    LONG *Line);
void __RPC_STUB ITextStream_get_Line_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_Column_Proxy(
    ITextStream* This,
    LONG *Column);
void __RPC_STUB ITextStream_get_Column_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfStream_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOS);
void __RPC_STUB ITextStream_get_AtEndOfStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfLine_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOL);
void __RPC_STUB ITextStream_get_AtEndOfLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Read_Proxy(
    ITextStream* This,
    LONG Characters,
    BSTR *Text);
void __RPC_STUB ITextStream_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadLine_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadAll_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadAll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Write_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteLine_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_WriteLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteBlankLines_Proxy(
    ITextStream* This,
    LONG Lines);
void __RPC_STUB ITextStream_WriteBlankLines_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Skip_Proxy(
    ITextStream* This,
    LONG Characters);
void __RPC_STUB ITextStream_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_SkipLine_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_SkipLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Close_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ITextStream_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IHost interface
 */
#ifndef __IHost_INTERFACE_DEFINED__
#define __IHost_INTERFACE_DEFINED__

DEFINE_GUID(IID_IHost, 0x91afbd1b, 0x5feb, 0x43f5, 0xb0,0x28, 0xe2,0xca,0x96,0x06,0x17,0xec);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("91afbd1b-5feb-43f5-b028-e2ca960617ec")
IHost : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *out_Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Application(
        IDispatch **out_Dispatch) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FullName(
        BSTR *out_Path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *out_Path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Interactive(
        VARIANT_BOOL *out_Interactive) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Interactive(
        VARIANT_BOOL out_Interactive) = 0;

    virtual HRESULT STDMETHODCALLTYPE Quit(
        int ExitCode = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScriptName(
        BSTR *out_ScriptName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScriptFullName(
        BSTR *out_ScriptFullName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Arguments(
        IArguments2 **out_Arguments) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Version(
        BSTR *out_Version) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BuildVersion(
        int *out_Build) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Timeout(
        LONG *out_Timeout) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Timeout(
        LONG out_Timeout) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateObject(
        BSTR ProgID,
        BSTR Prefix,
        IDispatch **out_Dispatch) = 0;

    virtual HRESULT STDMETHODCALLTYPE Echo(
        SAFEARRAY *pArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetObject(
        BSTR Pathname,
        BSTR ProgID,
        BSTR Prefix,
        IDispatch **out_Dispatch) = 0;

    virtual HRESULT STDMETHODCALLTYPE DisconnectObject(
        IDispatch *Object) = 0;

    virtual HRESULT STDMETHODCALLTYPE Sleep(
        LONG Time) = 0;

    virtual HRESULT STDMETHODCALLTYPE ConnectObject(
        IDispatch *Object,
        BSTR Prefix) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdIn(
        ITextStream **out_ppts) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdOut(
        ITextStream **ppts) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdErr(
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHost, 0x91afbd1b, 0x5feb, 0x43f5, 0xb0,0x28, 0xe2,0xca,0x96,0x06,0x17,0xec)
#endif
#else
typedef struct IHostVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHost *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHost *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHost *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IHost *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IHost *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IHost *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IHost *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IHost methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IHost *This,
        BSTR *out_Name);

    HRESULT (STDMETHODCALLTYPE *get_Application)(
        IHost *This,
        IDispatch **out_Dispatch);

    HRESULT (STDMETHODCALLTYPE *get_FullName)(
        IHost *This,
        BSTR *out_Path);

    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IHost *This,
        BSTR *out_Path);

    HRESULT (STDMETHODCALLTYPE *get_Interactive)(
        IHost *This,
        VARIANT_BOOL *out_Interactive);

    HRESULT (STDMETHODCALLTYPE *put_Interactive)(
        IHost *This,
        VARIANT_BOOL out_Interactive);

    HRESULT (STDMETHODCALLTYPE *Quit)(
        IHost *This,
        int ExitCode);

    HRESULT (STDMETHODCALLTYPE *get_ScriptName)(
        IHost *This,
        BSTR *out_ScriptName);

    HRESULT (STDMETHODCALLTYPE *get_ScriptFullName)(
        IHost *This,
        BSTR *out_ScriptFullName);

    HRESULT (STDMETHODCALLTYPE *get_Arguments)(
        IHost *This,
        IArguments2 **out_Arguments);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IHost *This,
        BSTR *out_Version);

    HRESULT (STDMETHODCALLTYPE *get_BuildVersion)(
        IHost *This,
        int *out_Build);

    HRESULT (STDMETHODCALLTYPE *get_Timeout)(
        IHost *This,
        LONG *out_Timeout);

    HRESULT (STDMETHODCALLTYPE *put_Timeout)(
        IHost *This,
        LONG out_Timeout);

    HRESULT (STDMETHODCALLTYPE *CreateObject)(
        IHost *This,
        BSTR ProgID,
        BSTR Prefix,
        IDispatch **out_Dispatch);

    HRESULT (STDMETHODCALLTYPE *Echo)(
        IHost *This,
        SAFEARRAY *pArgs);

    HRESULT (STDMETHODCALLTYPE *GetObject)(
        IHost *This,
        BSTR Pathname,
        BSTR ProgID,
        BSTR Prefix,
        IDispatch **out_Dispatch);

    HRESULT (STDMETHODCALLTYPE *DisconnectObject)(
        IHost *This,
        IDispatch *Object);

    HRESULT (STDMETHODCALLTYPE *Sleep)(
        IHost *This,
        LONG Time);

    HRESULT (STDMETHODCALLTYPE *ConnectObject)(
        IHost *This,
        IDispatch *Object,
        BSTR Prefix);

    HRESULT (STDMETHODCALLTYPE *get_StdIn)(
        IHost *This,
        ITextStream **out_ppts);

    HRESULT (STDMETHODCALLTYPE *get_StdOut)(
        IHost *This,
        ITextStream **ppts);

    HRESULT (STDMETHODCALLTYPE *get_StdErr)(
        IHost *This,
        ITextStream **ppts);

    END_INTERFACE
} IHostVtbl;

interface IHost {
    CONST_VTBL IHostVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHost_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHost_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHost_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IHost_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IHost_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IHost_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IHost_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IHost methods ***/
#define IHost_get_Name(This,out_Name) (This)->lpVtbl->get_Name(This,out_Name)
#define IHost_get_Application(This,out_Dispatch) (This)->lpVtbl->get_Application(This,out_Dispatch)
#define IHost_get_FullName(This,out_Path) (This)->lpVtbl->get_FullName(This,out_Path)
#define IHost_get_Path(This,out_Path) (This)->lpVtbl->get_Path(This,out_Path)
#define IHost_get_Interactive(This,out_Interactive) (This)->lpVtbl->get_Interactive(This,out_Interactive)
#define IHost_put_Interactive(This,out_Interactive) (This)->lpVtbl->put_Interactive(This,out_Interactive)
#define IHost_Quit(This,ExitCode) (This)->lpVtbl->Quit(This,ExitCode)
#define IHost_get_ScriptName(This,out_ScriptName) (This)->lpVtbl->get_ScriptName(This,out_ScriptName)
#define IHost_get_ScriptFullName(This,out_ScriptFullName) (This)->lpVtbl->get_ScriptFullName(This,out_ScriptFullName)
#define IHost_get_Arguments(This,out_Arguments) (This)->lpVtbl->get_Arguments(This,out_Arguments)
#define IHost_get_Version(This,out_Version) (This)->lpVtbl->get_Version(This,out_Version)
#define IHost_get_BuildVersion(This,out_Build) (This)->lpVtbl->get_BuildVersion(This,out_Build)
#define IHost_get_Timeout(This,out_Timeout) (This)->lpVtbl->get_Timeout(This,out_Timeout)
#define IHost_put_Timeout(This,out_Timeout) (This)->lpVtbl->put_Timeout(This,out_Timeout)
#define IHost_CreateObject(This,ProgID,Prefix,out_Dispatch) (This)->lpVtbl->CreateObject(This,ProgID,Prefix,out_Dispatch)
#define IHost_Echo(This,pArgs) (This)->lpVtbl->Echo(This,pArgs)
#define IHost_GetObject(This,Pathname,ProgID,Prefix,out_Dispatch) (This)->lpVtbl->GetObject(This,Pathname,ProgID,Prefix,out_Dispatch)
#define IHost_DisconnectObject(This,Object) (This)->lpVtbl->DisconnectObject(This,Object)
#define IHost_Sleep(This,Time) (This)->lpVtbl->Sleep(This,Time)
#define IHost_ConnectObject(This,Object,Prefix) (This)->lpVtbl->ConnectObject(This,Object,Prefix)
#define IHost_get_StdIn(This,out_ppts) (This)->lpVtbl->get_StdIn(This,out_ppts)
#define IHost_get_StdOut(This,ppts) (This)->lpVtbl->get_StdOut(This,ppts)
#define IHost_get_StdErr(This,ppts) (This)->lpVtbl->get_StdErr(This,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IHost_QueryInterface(IHost* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IHost_AddRef(IHost* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IHost_Release(IHost* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IHost_GetTypeInfoCount(IHost* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IHost_GetTypeInfo(IHost* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IHost_GetIDsOfNames(IHost* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IHost_Invoke(IHost* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IHost methods ***/
FORCEINLINE HRESULT IHost_get_Name(IHost* This,BSTR *out_Name) {
    return This->lpVtbl->get_Name(This,out_Name);
}
FORCEINLINE HRESULT IHost_get_Application(IHost* This,IDispatch **out_Dispatch) {
    return This->lpVtbl->get_Application(This,out_Dispatch);
}
FORCEINLINE HRESULT IHost_get_FullName(IHost* This,BSTR *out_Path) {
    return This->lpVtbl->get_FullName(This,out_Path);
}
FORCEINLINE HRESULT IHost_get_Path(IHost* This,BSTR *out_Path) {
    return This->lpVtbl->get_Path(This,out_Path);
}
FORCEINLINE HRESULT IHost_get_Interactive(IHost* This,VARIANT_BOOL *out_Interactive) {
    return This->lpVtbl->get_Interactive(This,out_Interactive);
}
FORCEINLINE HRESULT IHost_put_Interactive(IHost* This,VARIANT_BOOL out_Interactive) {
    return This->lpVtbl->put_Interactive(This,out_Interactive);
}
FORCEINLINE HRESULT IHost_Quit(IHost* This,int ExitCode) {
    return This->lpVtbl->Quit(This,ExitCode);
}
FORCEINLINE HRESULT IHost_get_ScriptName(IHost* This,BSTR *out_ScriptName) {
    return This->lpVtbl->get_ScriptName(This,out_ScriptName);
}
FORCEINLINE HRESULT IHost_get_ScriptFullName(IHost* This,BSTR *out_ScriptFullName) {
    return This->lpVtbl->get_ScriptFullName(This,out_ScriptFullName);
}
FORCEINLINE HRESULT IHost_get_Arguments(IHost* This,IArguments2 **out_Arguments) {
    return This->lpVtbl->get_Arguments(This,out_Arguments);
}
FORCEINLINE HRESULT IHost_get_Version(IHost* This,BSTR *out_Version) {
    return This->lpVtbl->get_Version(This,out_Version);
}
FORCEINLINE HRESULT IHost_get_BuildVersion(IHost* This,int *out_Build) {
    return This->lpVtbl->get_BuildVersion(This,out_Build);
}
FORCEINLINE HRESULT IHost_get_Timeout(IHost* This,LONG *out_Timeout) {
    return This->lpVtbl->get_Timeout(This,out_Timeout);
}
FORCEINLINE HRESULT IHost_put_Timeout(IHost* This,LONG out_Timeout) {
    return This->lpVtbl->put_Timeout(This,out_Timeout);
}
FORCEINLINE HRESULT IHost_CreateObject(IHost* This,BSTR ProgID,BSTR Prefix,IDispatch **out_Dispatch) {
    return This->lpVtbl->CreateObject(This,ProgID,Prefix,out_Dispatch);
}
FORCEINLINE HRESULT IHost_Echo(IHost* This,SAFEARRAY *pArgs) {
    return This->lpVtbl->Echo(This,pArgs);
}
FORCEINLINE HRESULT IHost_GetObject(IHost* This,BSTR Pathname,BSTR ProgID,BSTR Prefix,IDispatch **out_Dispatch) {
    return This->lpVtbl->GetObject(This,Pathname,ProgID,Prefix,out_Dispatch);
}
FORCEINLINE HRESULT IHost_DisconnectObject(IHost* This,IDispatch *Object) {
    return This->lpVtbl->DisconnectObject(This,Object);
}
FORCEINLINE HRESULT IHost_Sleep(IHost* This,LONG Time) {
    return This->lpVtbl->Sleep(This,Time);
}
FORCEINLINE HRESULT IHost_ConnectObject(IHost* This,IDispatch *Object,BSTR Prefix) {
    return This->lpVtbl->ConnectObject(This,Object,Prefix);
}
FORCEINLINE HRESULT IHost_get_StdIn(IHost* This,ITextStream **out_ppts) {
    return This->lpVtbl->get_StdIn(This,out_ppts);
}
FORCEINLINE HRESULT IHost_get_StdOut(IHost* This,ITextStream **ppts) {
    return This->lpVtbl->get_StdOut(This,ppts);
}
FORCEINLINE HRESULT IHost_get_StdErr(IHost* This,ITextStream **ppts) {
    return This->lpVtbl->get_StdErr(This,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IHost_get_Name_Proxy(
    IHost* This,
    BSTR *out_Name);
void __RPC_STUB IHost_get_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Application_Proxy(
    IHost* This,
    IDispatch **out_Dispatch);
void __RPC_STUB IHost_get_Application_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_FullName_Proxy(
    IHost* This,
    BSTR *out_Path);
void __RPC_STUB IHost_get_FullName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Path_Proxy(
    IHost* This,
    BSTR *out_Path);
void __RPC_STUB IHost_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Interactive_Proxy(
    IHost* This,
    VARIANT_BOOL *out_Interactive);
void __RPC_STUB IHost_get_Interactive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_put_Interactive_Proxy(
    IHost* This,
    VARIANT_BOOL out_Interactive);
void __RPC_STUB IHost_put_Interactive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_Quit_Proxy(
    IHost* This,
    int ExitCode);
void __RPC_STUB IHost_Quit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_ScriptName_Proxy(
    IHost* This,
    BSTR *out_ScriptName);
void __RPC_STUB IHost_get_ScriptName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_ScriptFullName_Proxy(
    IHost* This,
    BSTR *out_ScriptFullName);
void __RPC_STUB IHost_get_ScriptFullName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Arguments_Proxy(
    IHost* This,
    IArguments2 **out_Arguments);
void __RPC_STUB IHost_get_Arguments_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Version_Proxy(
    IHost* This,
    BSTR *out_Version);
void __RPC_STUB IHost_get_Version_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_BuildVersion_Proxy(
    IHost* This,
    int *out_Build);
void __RPC_STUB IHost_get_BuildVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_Timeout_Proxy(
    IHost* This,
    LONG *out_Timeout);
void __RPC_STUB IHost_get_Timeout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_put_Timeout_Proxy(
    IHost* This,
    LONG out_Timeout);
void __RPC_STUB IHost_put_Timeout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_CreateObject_Proxy(
    IHost* This,
    BSTR ProgID,
    BSTR Prefix,
    IDispatch **out_Dispatch);
void __RPC_STUB IHost_CreateObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_Echo_Proxy(
    IHost* This,
    SAFEARRAY *pArgs);
void __RPC_STUB IHost_Echo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_GetObject_Proxy(
    IHost* This,
    BSTR Pathname,
    BSTR ProgID,
    BSTR Prefix,
    IDispatch **out_Dispatch);
void __RPC_STUB IHost_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_DisconnectObject_Proxy(
    IHost* This,
    IDispatch *Object);
void __RPC_STUB IHost_DisconnectObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_Sleep_Proxy(
    IHost* This,
    LONG Time);
void __RPC_STUB IHost_Sleep_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_ConnectObject_Proxy(
    IHost* This,
    IDispatch *Object,
    BSTR Prefix);
void __RPC_STUB IHost_ConnectObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_StdIn_Proxy(
    IHost* This,
    ITextStream **out_ppts);
void __RPC_STUB IHost_get_StdIn_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_StdOut_Proxy(
    IHost* This,
    ITextStream **ppts);
void __RPC_STUB IHost_get_StdOut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IHost_get_StdErr_Proxy(
    IHost* This,
    ITextStream **ppts);
void __RPC_STUB IHost_get_StdErr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IHost_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __ihost_h__ */
