/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/dll/win32/scrrun/scrrun.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __scrrun_h__
#define __scrrun_h__

/* Forward declarations */

#ifndef __IDictionary_FWD_DEFINED__
#define __IDictionary_FWD_DEFINED__
typedef interface IDictionary IDictionary;
#ifdef __cplusplus
interface IDictionary;
#endif /* __cplusplus */
#endif

#ifndef __IDrive_FWD_DEFINED__
#define __IDrive_FWD_DEFINED__
typedef interface IDrive IDrive;
#ifdef __cplusplus
interface IDrive;
#endif /* __cplusplus */
#endif

#ifndef __IDriveCollection_FWD_DEFINED__
#define __IDriveCollection_FWD_DEFINED__
typedef interface IDriveCollection IDriveCollection;
#ifdef __cplusplus
interface IDriveCollection;
#endif /* __cplusplus */
#endif

#ifndef __ITextStream_FWD_DEFINED__
#define __ITextStream_FWD_DEFINED__
typedef interface ITextStream ITextStream;
#ifdef __cplusplus
interface ITextStream;
#endif /* __cplusplus */
#endif

#ifndef __IFile_FWD_DEFINED__
#define __IFile_FWD_DEFINED__
typedef interface IFile IFile;
#ifdef __cplusplus
interface IFile;
#endif /* __cplusplus */
#endif

#ifndef __IFileSystem_FWD_DEFINED__
#define __IFileSystem_FWD_DEFINED__
typedef interface IFileSystem IFileSystem;
#ifdef __cplusplus
interface IFileSystem;
#endif /* __cplusplus */
#endif

#ifndef __IFileCollection_FWD_DEFINED__
#define __IFileCollection_FWD_DEFINED__
typedef interface IFileCollection IFileCollection;
#ifdef __cplusplus
interface IFileCollection;
#endif /* __cplusplus */
#endif

#ifndef __IFolderCollection_FWD_DEFINED__
#define __IFolderCollection_FWD_DEFINED__
typedef interface IFolderCollection IFolderCollection;
#ifdef __cplusplus
interface IFolderCollection;
#endif /* __cplusplus */
#endif

#ifndef __IFolder_FWD_DEFINED__
#define __IFolder_FWD_DEFINED__
typedef interface IFolder IFolder;
#ifdef __cplusplus
interface IFolder;
#endif /* __cplusplus */
#endif

#ifndef __IFileSystem3_FWD_DEFINED__
#define __IFileSystem3_FWD_DEFINED__
typedef interface IFileSystem3 IFileSystem3;
#ifdef __cplusplus
interface IFileSystem3;
#endif /* __cplusplus */
#endif

#ifndef __IScriptEncoder_FWD_DEFINED__
#define __IScriptEncoder_FWD_DEFINED__
typedef interface IScriptEncoder IScriptEncoder;
#ifdef __cplusplus
interface IScriptEncoder;
#endif /* __cplusplus */
#endif

#ifndef __Dictionary_FWD_DEFINED__
#define __Dictionary_FWD_DEFINED__
#ifdef __cplusplus
typedef class Dictionary Dictionary;
#else
typedef struct Dictionary Dictionary;
#endif /* defined __cplusplus */
#endif /* defined __Dictionary_FWD_DEFINED__ */

#ifndef __FileSystemObject_FWD_DEFINED__
#define __FileSystemObject_FWD_DEFINED__
#ifdef __cplusplus
typedef class FileSystemObject FileSystemObject;
#else
typedef struct FileSystemObject FileSystemObject;
#endif /* defined __cplusplus */
#endif /* defined __FileSystemObject_FWD_DEFINED__ */

#ifndef __Drive_FWD_DEFINED__
#define __Drive_FWD_DEFINED__
#ifdef __cplusplus
typedef class Drive Drive;
#else
typedef struct Drive Drive;
#endif /* defined __cplusplus */
#endif /* defined __Drive_FWD_DEFINED__ */

#ifndef __Drives_FWD_DEFINED__
#define __Drives_FWD_DEFINED__
#ifdef __cplusplus
typedef class Drives Drives;
#else
typedef struct Drives Drives;
#endif /* defined __cplusplus */
#endif /* defined __Drives_FWD_DEFINED__ */

#ifndef __Folder_FWD_DEFINED__
#define __Folder_FWD_DEFINED__
#ifdef __cplusplus
typedef class Folder Folder;
#else
typedef struct Folder Folder;
#endif /* defined __cplusplus */
#endif /* defined __Folder_FWD_DEFINED__ */

#ifndef __Folders_FWD_DEFINED__
#define __Folders_FWD_DEFINED__
#ifdef __cplusplus
typedef class Folders Folders;
#else
typedef struct Folders Folders;
#endif /* defined __cplusplus */
#endif /* defined __Folders_FWD_DEFINED__ */

#ifndef __File_FWD_DEFINED__
#define __File_FWD_DEFINED__
#ifdef __cplusplus
typedef class File File;
#else
typedef struct File File;
#endif /* defined __cplusplus */
#endif /* defined __File_FWD_DEFINED__ */

#ifndef __Files_FWD_DEFINED__
#define __Files_FWD_DEFINED__
#ifdef __cplusplus
typedef class Files Files;
#else
typedef struct Files Files;
#endif /* defined __cplusplus */
#endif /* defined __Files_FWD_DEFINED__ */

#ifndef __TextStream_FWD_DEFINED__
#define __TextStream_FWD_DEFINED__
#ifdef __cplusplus
typedef class TextStream TextStream;
#else
typedef struct TextStream TextStream;
#endif /* defined __cplusplus */
#endif /* defined __TextStream_FWD_DEFINED__ */

#ifndef __Encoder_FWD_DEFINED__
#define __Encoder_FWD_DEFINED__
#ifdef __cplusplus
typedef class Encoder Encoder;
#else
typedef struct Encoder Encoder;
#endif /* defined __cplusplus */
#endif /* defined __Encoder_FWD_DEFINED__ */

/* Headers for imported files */

#include <unknwn.h>
#include <objidl.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WINE_NO_UNICODE_MACROS
#undef CopyFile
#undef DeleteFile
#undef MoveFile
#endif
#define CTL_E_ENDOFFILE STD_CTL_SCODE(62)
#define CTL_E_KEY_ALREADY_EXISTS STD_CTL_SCODE(457)
#define CTL_E_ELEMENT_NOT_FOUND STD_CTL_SCODE(32811)

DEFINE_GUID(LIBID_Scripting, 0x420b2830, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28);

#ifndef __IFolder_FWD_DEFINED__
#define __IFolder_FWD_DEFINED__
typedef interface IFolder IFolder;
#ifdef __cplusplus
interface IFolder;
#endif /* __cplusplus */
#endif

typedef enum CompareMethod {
    BinaryCompare = 0,
    TextCompare = 1,
    DatabaseCompare = 2
} CompareMethod;
typedef enum IOMode {
    ForReading = 1,
    ForWriting = 2,
    ForAppending = 8
} IOMode;
typedef enum Tristate {
    TristateTrue = -1,
    TristateFalse = 0,
    TristateUseDefault = -2,
    TristateMixed = -2
} Tristate;
typedef enum FileAttribute {
    Normal = 0,
    ReadOnly = 1,
    Hidden = 2,
    System = 4,
    Volume = 8,
    Directory = 16,
    Archive = 32,
    Alias = 1024,
    Compressed = 2048
} FileAttribute;
typedef enum SpecialFolderConst {
    WindowsFolder = 0,
    SystemFolder = 1,
    TemporaryFolder = 2
} SpecialFolderConst;
typedef enum DriveTypeConst {
    UnknownType = 0,
    Removable = 1,
    Fixed = 2,
    Remote = 3,
    CDRom = 4,
    RamDisk = 5
} DriveTypeConst;
typedef enum StandardStreamTypes {
    StdIn = 0,
    StdOut = 1,
    StdErr = 2
} StandardStreamTypes;
/*****************************************************************************
 * IDictionary interface
 */
#ifndef __IDictionary_INTERFACE_DEFINED__
#define __IDictionary_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDictionary, 0x42c642c1, 0x97e1, 0x11cf, 0x97,0x8f, 0x00,0xa0,0x24,0x63,0xe0,0x6f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("42c642c1-97e1-11cf-978f-00a02463e06f")
IDictionary : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE putref_Item(
        VARIANT *Key,
        VARIANT *pRetItem) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Item(
        VARIANT *Key,
        VARIANT *pRetItem) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT *Key,
        VARIANT *pRetItem) = 0;

    virtual HRESULT STDMETHODCALLTYPE Add(
        VARIANT *Key,
        VARIANT *Item) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *pCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Exists(
        VARIANT *Key,
        VARIANT_BOOL *pExists) = 0;

    virtual HRESULT STDMETHODCALLTYPE Items(
        VARIANT *pItemsArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Key(
        VARIANT *Key,
        VARIANT *rhs) = 0;

    virtual HRESULT STDMETHODCALLTYPE Keys(
        VARIANT *pKeysArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        VARIANT *Key) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveAll(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CompareMode(
        CompareMethod pcomp) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CompareMode(
        CompareMethod *pcomp) = 0;

    virtual HRESULT STDMETHODCALLTYPE _NewEnum(
        IUnknown **ppunk) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HashVal(
        VARIANT *Key,
        VARIANT *HashVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDictionary, 0x42c642c1, 0x97e1, 0x11cf, 0x97,0x8f, 0x00,0xa0,0x24,0x63,0xe0,0x6f)
#endif
#else
typedef struct IDictionaryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDictionary *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDictionary *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDictionary *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDictionary *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDictionary *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDictionary *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDictionary *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDictionary methods ***/
    HRESULT (STDMETHODCALLTYPE *putref_Item)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *pRetItem);

    HRESULT (STDMETHODCALLTYPE *put_Item)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *pRetItem);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *pRetItem);

    HRESULT (STDMETHODCALLTYPE *Add)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *Item);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IDictionary *This,
        LONG *pCount);

    HRESULT (STDMETHODCALLTYPE *Exists)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT_BOOL *pExists);

    HRESULT (STDMETHODCALLTYPE *Items)(
        IDictionary *This,
        VARIANT *pItemsArray);

    HRESULT (STDMETHODCALLTYPE *put_Key)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *rhs);

    HRESULT (STDMETHODCALLTYPE *Keys)(
        IDictionary *This,
        VARIANT *pKeysArray);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDictionary *This,
        VARIANT *Key);

    HRESULT (STDMETHODCALLTYPE *RemoveAll)(
        IDictionary *This);

    HRESULT (STDMETHODCALLTYPE *put_CompareMode)(
        IDictionary *This,
        CompareMethod pcomp);

    HRESULT (STDMETHODCALLTYPE *get_CompareMode)(
        IDictionary *This,
        CompareMethod *pcomp);

    HRESULT (STDMETHODCALLTYPE *_NewEnum)(
        IDictionary *This,
        IUnknown **ppunk);

    HRESULT (STDMETHODCALLTYPE *get_HashVal)(
        IDictionary *This,
        VARIANT *Key,
        VARIANT *HashVal);

    END_INTERFACE
} IDictionaryVtbl;

interface IDictionary {
    CONST_VTBL IDictionaryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDictionary_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDictionary_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDictionary_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDictionary_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDictionary methods ***/
#define IDictionary_putref_Item(This,Key,pRetItem) (This)->lpVtbl->putref_Item(This,Key,pRetItem)
#define IDictionary_put_Item(This,Key,pRetItem) (This)->lpVtbl->put_Item(This,Key,pRetItem)
#define IDictionary_get_Item(This,Key,pRetItem) (This)->lpVtbl->get_Item(This,Key,pRetItem)
#define IDictionary_Add(This,Key,Item) (This)->lpVtbl->Add(This,Key,Item)
#define IDictionary_get_Count(This,pCount) (This)->lpVtbl->get_Count(This,pCount)
#define IDictionary_Exists(This,Key,pExists) (This)->lpVtbl->Exists(This,Key,pExists)
#define IDictionary_Items(This,pItemsArray) (This)->lpVtbl->Items(This,pItemsArray)
#define IDictionary_put_Key(This,Key,rhs) (This)->lpVtbl->put_Key(This,Key,rhs)
#define IDictionary_Keys(This,pKeysArray) (This)->lpVtbl->Keys(This,pKeysArray)
#define IDictionary_Remove(This,Key) (This)->lpVtbl->Remove(This,Key)
#define IDictionary_RemoveAll(This) (This)->lpVtbl->RemoveAll(This)
#define IDictionary_put_CompareMode(This,pcomp) (This)->lpVtbl->put_CompareMode(This,pcomp)
#define IDictionary_get_CompareMode(This,pcomp) (This)->lpVtbl->get_CompareMode(This,pcomp)
#define IDictionary__NewEnum(This,ppunk) (This)->lpVtbl->_NewEnum(This,ppunk)
#define IDictionary_get_HashVal(This,Key,HashVal) (This)->lpVtbl->get_HashVal(This,Key,HashVal)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IDictionary_QueryInterface(IDictionary* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IDictionary_AddRef(IDictionary* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IDictionary_Release(IDictionary* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IDictionary_GetTypeInfoCount(IDictionary* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IDictionary_GetTypeInfo(IDictionary* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IDictionary_GetIDsOfNames(IDictionary* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IDictionary_Invoke(IDictionary* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDictionary methods ***/
FORCEINLINE HRESULT IDictionary_putref_Item(IDictionary* This,VARIANT *Key,VARIANT *pRetItem) {
    return This->lpVtbl->putref_Item(This,Key,pRetItem);
}
FORCEINLINE HRESULT IDictionary_put_Item(IDictionary* This,VARIANT *Key,VARIANT *pRetItem) {
    return This->lpVtbl->put_Item(This,Key,pRetItem);
}
FORCEINLINE HRESULT IDictionary_get_Item(IDictionary* This,VARIANT *Key,VARIANT *pRetItem) {
    return This->lpVtbl->get_Item(This,Key,pRetItem);
}
FORCEINLINE HRESULT IDictionary_Add(IDictionary* This,VARIANT *Key,VARIANT *Item) {
    return This->lpVtbl->Add(This,Key,Item);
}
FORCEINLINE HRESULT IDictionary_get_Count(IDictionary* This,LONG *pCount) {
    return This->lpVtbl->get_Count(This,pCount);
}
FORCEINLINE HRESULT IDictionary_Exists(IDictionary* This,VARIANT *Key,VARIANT_BOOL *pExists) {
    return This->lpVtbl->Exists(This,Key,pExists);
}
FORCEINLINE HRESULT IDictionary_Items(IDictionary* This,VARIANT *pItemsArray) {
    return This->lpVtbl->Items(This,pItemsArray);
}
FORCEINLINE HRESULT IDictionary_put_Key(IDictionary* This,VARIANT *Key,VARIANT *rhs) {
    return This->lpVtbl->put_Key(This,Key,rhs);
}
FORCEINLINE HRESULT IDictionary_Keys(IDictionary* This,VARIANT *pKeysArray) {
    return This->lpVtbl->Keys(This,pKeysArray);
}
FORCEINLINE HRESULT IDictionary_Remove(IDictionary* This,VARIANT *Key) {
    return This->lpVtbl->Remove(This,Key);
}
FORCEINLINE HRESULT IDictionary_RemoveAll(IDictionary* This) {
    return This->lpVtbl->RemoveAll(This);
}
FORCEINLINE HRESULT IDictionary_put_CompareMode(IDictionary* This,CompareMethod pcomp) {
    return This->lpVtbl->put_CompareMode(This,pcomp);
}
FORCEINLINE HRESULT IDictionary_get_CompareMode(IDictionary* This,CompareMethod *pcomp) {
    return This->lpVtbl->get_CompareMode(This,pcomp);
}
FORCEINLINE HRESULT IDictionary__NewEnum(IDictionary* This,IUnknown **ppunk) {
    return This->lpVtbl->_NewEnum(This,ppunk);
}
FORCEINLINE HRESULT IDictionary_get_HashVal(IDictionary* This,VARIANT *Key,VARIANT *HashVal) {
    return This->lpVtbl->get_HashVal(This,Key,HashVal);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IDictionary_putref_Item_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *pRetItem);
void __RPC_STUB IDictionary_putref_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_put_Item_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *pRetItem);
void __RPC_STUB IDictionary_put_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_get_Item_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *pRetItem);
void __RPC_STUB IDictionary_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_Add_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *Item);
void __RPC_STUB IDictionary_Add_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_get_Count_Proxy(
    IDictionary* This,
    LONG *pCount);
void __RPC_STUB IDictionary_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_Exists_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT_BOOL *pExists);
void __RPC_STUB IDictionary_Exists_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_Items_Proxy(
    IDictionary* This,
    VARIANT *pItemsArray);
void __RPC_STUB IDictionary_Items_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_put_Key_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *rhs);
void __RPC_STUB IDictionary_put_Key_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_Keys_Proxy(
    IDictionary* This,
    VARIANT *pKeysArray);
void __RPC_STUB IDictionary_Keys_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_Remove_Proxy(
    IDictionary* This,
    VARIANT *Key);
void __RPC_STUB IDictionary_Remove_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_RemoveAll_Proxy(
    IDictionary* This);
void __RPC_STUB IDictionary_RemoveAll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_put_CompareMode_Proxy(
    IDictionary* This,
    CompareMethod pcomp);
void __RPC_STUB IDictionary_put_CompareMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_get_CompareMode_Proxy(
    IDictionary* This,
    CompareMethod *pcomp);
void __RPC_STUB IDictionary_get_CompareMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary__NewEnum_Proxy(
    IDictionary* This,
    IUnknown **ppunk);
void __RPC_STUB IDictionary__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDictionary_get_HashVal_Proxy(
    IDictionary* This,
    VARIANT *Key,
    VARIANT *HashVal);
void __RPC_STUB IDictionary_get_HashVal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IDictionary_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDrive interface
 */
#ifndef __IDrive_INTERFACE_DEFINED__
#define __IDrive_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDrive, 0xc7c3f5a0, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a0-88a3-11d0-abcb-00a0c90fffc0")
IDrive : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *pbstrPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DriveLetter(
        BSTR *pbstrLetter) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShareName(
        BSTR *pbstrShareName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DriveType(
        DriveTypeConst *pdt) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RootFolder(
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AvailableSpace(
        VARIANT *pvarAvail) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FreeSpace(
        VARIANT *pvarFree) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TotalSize(
        VARIANT *pvarTotal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VolumeName(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VolumeName(
        BSTR pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FileSystem(
        BSTR *pbstrFileSystem) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SerialNumber(
        LONG *pulSerialNumber) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsReady(
        VARIANT_BOOL *pfReady) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDrive, 0xc7c3f5a0, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IDriveVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDrive *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDrive *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDrive *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDrive *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDrive *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDrive *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDrive *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDrive methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IDrive *This,
        BSTR *pbstrPath);

    HRESULT (STDMETHODCALLTYPE *get_DriveLetter)(
        IDrive *This,
        BSTR *pbstrLetter);

    HRESULT (STDMETHODCALLTYPE *get_ShareName)(
        IDrive *This,
        BSTR *pbstrShareName);

    HRESULT (STDMETHODCALLTYPE *get_DriveType)(
        IDrive *This,
        DriveTypeConst *pdt);

    HRESULT (STDMETHODCALLTYPE *get_RootFolder)(
        IDrive *This,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *get_AvailableSpace)(
        IDrive *This,
        VARIANT *pvarAvail);

    HRESULT (STDMETHODCALLTYPE *get_FreeSpace)(
        IDrive *This,
        VARIANT *pvarFree);

    HRESULT (STDMETHODCALLTYPE *get_TotalSize)(
        IDrive *This,
        VARIANT *pvarTotal);

    HRESULT (STDMETHODCALLTYPE *get_VolumeName)(
        IDrive *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *put_VolumeName)(
        IDrive *This,
        BSTR pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_FileSystem)(
        IDrive *This,
        BSTR *pbstrFileSystem);

    HRESULT (STDMETHODCALLTYPE *get_SerialNumber)(
        IDrive *This,
        LONG *pulSerialNumber);

    HRESULT (STDMETHODCALLTYPE *get_IsReady)(
        IDrive *This,
        VARIANT_BOOL *pfReady);

    END_INTERFACE
} IDriveVtbl;

interface IDrive {
    CONST_VTBL IDriveVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDrive_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDrive_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDrive_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDrive_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDrive_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDrive_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDrive_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDrive methods ***/
#define IDrive_get_Path(This,pbstrPath) (This)->lpVtbl->get_Path(This,pbstrPath)
#define IDrive_get_DriveLetter(This,pbstrLetter) (This)->lpVtbl->get_DriveLetter(This,pbstrLetter)
#define IDrive_get_ShareName(This,pbstrShareName) (This)->lpVtbl->get_ShareName(This,pbstrShareName)
#define IDrive_get_DriveType(This,pdt) (This)->lpVtbl->get_DriveType(This,pdt)
#define IDrive_get_RootFolder(This,ppfolder) (This)->lpVtbl->get_RootFolder(This,ppfolder)
#define IDrive_get_AvailableSpace(This,pvarAvail) (This)->lpVtbl->get_AvailableSpace(This,pvarAvail)
#define IDrive_get_FreeSpace(This,pvarFree) (This)->lpVtbl->get_FreeSpace(This,pvarFree)
#define IDrive_get_TotalSize(This,pvarTotal) (This)->lpVtbl->get_TotalSize(This,pvarTotal)
#define IDrive_get_VolumeName(This,pbstrName) (This)->lpVtbl->get_VolumeName(This,pbstrName)
#define IDrive_put_VolumeName(This,pbstrName) (This)->lpVtbl->put_VolumeName(This,pbstrName)
#define IDrive_get_FileSystem(This,pbstrFileSystem) (This)->lpVtbl->get_FileSystem(This,pbstrFileSystem)
#define IDrive_get_SerialNumber(This,pulSerialNumber) (This)->lpVtbl->get_SerialNumber(This,pulSerialNumber)
#define IDrive_get_IsReady(This,pfReady) (This)->lpVtbl->get_IsReady(This,pfReady)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IDrive_QueryInterface(IDrive* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IDrive_AddRef(IDrive* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IDrive_Release(IDrive* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IDrive_GetTypeInfoCount(IDrive* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IDrive_GetTypeInfo(IDrive* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IDrive_GetIDsOfNames(IDrive* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IDrive_Invoke(IDrive* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDrive methods ***/
FORCEINLINE HRESULT IDrive_get_Path(IDrive* This,BSTR *pbstrPath) {
    return This->lpVtbl->get_Path(This,pbstrPath);
}
FORCEINLINE HRESULT IDrive_get_DriveLetter(IDrive* This,BSTR *pbstrLetter) {
    return This->lpVtbl->get_DriveLetter(This,pbstrLetter);
}
FORCEINLINE HRESULT IDrive_get_ShareName(IDrive* This,BSTR *pbstrShareName) {
    return This->lpVtbl->get_ShareName(This,pbstrShareName);
}
FORCEINLINE HRESULT IDrive_get_DriveType(IDrive* This,DriveTypeConst *pdt) {
    return This->lpVtbl->get_DriveType(This,pdt);
}
FORCEINLINE HRESULT IDrive_get_RootFolder(IDrive* This,IFolder **ppfolder) {
    return This->lpVtbl->get_RootFolder(This,ppfolder);
}
FORCEINLINE HRESULT IDrive_get_AvailableSpace(IDrive* This,VARIANT *pvarAvail) {
    return This->lpVtbl->get_AvailableSpace(This,pvarAvail);
}
FORCEINLINE HRESULT IDrive_get_FreeSpace(IDrive* This,VARIANT *pvarFree) {
    return This->lpVtbl->get_FreeSpace(This,pvarFree);
}
FORCEINLINE HRESULT IDrive_get_TotalSize(IDrive* This,VARIANT *pvarTotal) {
    return This->lpVtbl->get_TotalSize(This,pvarTotal);
}
FORCEINLINE HRESULT IDrive_get_VolumeName(IDrive* This,BSTR *pbstrName) {
    return This->lpVtbl->get_VolumeName(This,pbstrName);
}
FORCEINLINE HRESULT IDrive_put_VolumeName(IDrive* This,BSTR pbstrName) {
    return This->lpVtbl->put_VolumeName(This,pbstrName);
}
FORCEINLINE HRESULT IDrive_get_FileSystem(IDrive* This,BSTR *pbstrFileSystem) {
    return This->lpVtbl->get_FileSystem(This,pbstrFileSystem);
}
FORCEINLINE HRESULT IDrive_get_SerialNumber(IDrive* This,LONG *pulSerialNumber) {
    return This->lpVtbl->get_SerialNumber(This,pulSerialNumber);
}
FORCEINLINE HRESULT IDrive_get_IsReady(IDrive* This,VARIANT_BOOL *pfReady) {
    return This->lpVtbl->get_IsReady(This,pfReady);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IDrive_get_Path_Proxy(
    IDrive* This,
    BSTR *pbstrPath);
void __RPC_STUB IDrive_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_DriveLetter_Proxy(
    IDrive* This,
    BSTR *pbstrLetter);
void __RPC_STUB IDrive_get_DriveLetter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_ShareName_Proxy(
    IDrive* This,
    BSTR *pbstrShareName);
void __RPC_STUB IDrive_get_ShareName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_DriveType_Proxy(
    IDrive* This,
    DriveTypeConst *pdt);
void __RPC_STUB IDrive_get_DriveType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_RootFolder_Proxy(
    IDrive* This,
    IFolder **ppfolder);
void __RPC_STUB IDrive_get_RootFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_AvailableSpace_Proxy(
    IDrive* This,
    VARIANT *pvarAvail);
void __RPC_STUB IDrive_get_AvailableSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_FreeSpace_Proxy(
    IDrive* This,
    VARIANT *pvarFree);
void __RPC_STUB IDrive_get_FreeSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_TotalSize_Proxy(
    IDrive* This,
    VARIANT *pvarTotal);
void __RPC_STUB IDrive_get_TotalSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_VolumeName_Proxy(
    IDrive* This,
    BSTR *pbstrName);
void __RPC_STUB IDrive_get_VolumeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_put_VolumeName_Proxy(
    IDrive* This,
    BSTR pbstrName);
void __RPC_STUB IDrive_put_VolumeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_FileSystem_Proxy(
    IDrive* This,
    BSTR *pbstrFileSystem);
void __RPC_STUB IDrive_get_FileSystem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_SerialNumber_Proxy(
    IDrive* This,
    LONG *pulSerialNumber);
void __RPC_STUB IDrive_get_SerialNumber_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_IsReady_Proxy(
    IDrive* This,
    VARIANT_BOOL *pfReady);
void __RPC_STUB IDrive_get_IsReady_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IDrive_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDriveCollection interface
 */
#ifndef __IDriveCollection_INTERFACE_DEFINED__
#define __IDriveCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDriveCollection, 0xc7c3f5a1, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a1-88a3-11d0-abcb-00a0c90fffc0")
IDriveCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Key,
        IDrive **ppdrive) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *plCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDriveCollection, 0xc7c3f5a1, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IDriveCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDriveCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDriveCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDriveCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDriveCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDriveCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDriveCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDriveCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDriveCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IDriveCollection *This,
        VARIANT Key,
        IDrive **ppdrive);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IDriveCollection *This,
        IUnknown **ppenum);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IDriveCollection *This,
        LONG *plCount);

    END_INTERFACE
} IDriveCollectionVtbl;

interface IDriveCollection {
    CONST_VTBL IDriveCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDriveCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDriveCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDriveCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDriveCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDriveCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDriveCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDriveCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDriveCollection methods ***/
#define IDriveCollection_get_Item(This,Key,ppdrive) (This)->lpVtbl->get_Item(This,Key,ppdrive)
#define IDriveCollection_get__NewEnum(This,ppenum) (This)->lpVtbl->get__NewEnum(This,ppenum)
#define IDriveCollection_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IDriveCollection_QueryInterface(IDriveCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IDriveCollection_AddRef(IDriveCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IDriveCollection_Release(IDriveCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IDriveCollection_GetTypeInfoCount(IDriveCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IDriveCollection_GetTypeInfo(IDriveCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IDriveCollection_GetIDsOfNames(IDriveCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IDriveCollection_Invoke(IDriveCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDriveCollection methods ***/
FORCEINLINE HRESULT IDriveCollection_get_Item(IDriveCollection* This,VARIANT Key,IDrive **ppdrive) {
    return This->lpVtbl->get_Item(This,Key,ppdrive);
}
FORCEINLINE HRESULT IDriveCollection_get__NewEnum(IDriveCollection* This,IUnknown **ppenum) {
    return This->lpVtbl->get__NewEnum(This,ppenum);
}
FORCEINLINE HRESULT IDriveCollection_get_Count(IDriveCollection* This,LONG *plCount) {
    return This->lpVtbl->get_Count(This,plCount);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IDriveCollection_get_Item_Proxy(
    IDriveCollection* This,
    VARIANT Key,
    IDrive **ppdrive);
void __RPC_STUB IDriveCollection_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDriveCollection_get__NewEnum_Proxy(
    IDriveCollection* This,
    IUnknown **ppenum);
void __RPC_STUB IDriveCollection_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDriveCollection_get_Count_Proxy(
    IDriveCollection* This,
    LONG *plCount);
void __RPC_STUB IDriveCollection_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IDriveCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITextStream interface
 */
#ifndef __ITextStream_INTERFACE_DEFINED__
#define __ITextStream_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53bad8c1-e718-11cf-893d-00a0c9054228")
ITextStream : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Line(
        LONG *Line) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Column(
        LONG *Column) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfStream(
        VARIANT_BOOL *EOS) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfLine(
        VARIANT_BOOL *EOL) = 0;

    virtual HRESULT STDMETHODCALLTYPE Read(
        LONG Characters,
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadLine(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadAll(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE Write(
        BSTR Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteLine(
        BSTR Text = L"") = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteBlankLines(
        LONG Lines) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        LONG Characters) = 0;

    virtual HRESULT STDMETHODCALLTYPE SkipLine(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Close(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28)
#endif
#else
typedef struct ITextStreamVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITextStream *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITextStream *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITextStream *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITextStream *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITextStream *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITextStream *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITextStream *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITextStream methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Line)(
        ITextStream *This,
        LONG *Line);

    HRESULT (STDMETHODCALLTYPE *get_Column)(
        ITextStream *This,
        LONG *Column);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfStream)(
        ITextStream *This,
        VARIANT_BOOL *EOS);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfLine)(
        ITextStream *This,
        VARIANT_BOOL *EOL);

    HRESULT (STDMETHODCALLTYPE *Read)(
        ITextStream *This,
        LONG Characters,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadLine)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadAll)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *Write)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteLine)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteBlankLines)(
        ITextStream *This,
        LONG Lines);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        ITextStream *This,
        LONG Characters);

    HRESULT (STDMETHODCALLTYPE *SkipLine)(
        ITextStream *This);

    HRESULT (STDMETHODCALLTYPE *Close)(
        ITextStream *This);

    END_INTERFACE
} ITextStreamVtbl;

interface ITextStream {
    CONST_VTBL ITextStreamVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITextStream_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITextStream_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITextStream_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITextStream_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITextStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITextStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITextStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITextStream methods ***/
#define ITextStream_get_Line(This,Line) (This)->lpVtbl->get_Line(This,Line)
#define ITextStream_get_Column(This,Column) (This)->lpVtbl->get_Column(This,Column)
#define ITextStream_get_AtEndOfStream(This,EOS) (This)->lpVtbl->get_AtEndOfStream(This,EOS)
#define ITextStream_get_AtEndOfLine(This,EOL) (This)->lpVtbl->get_AtEndOfLine(This,EOL)
#define ITextStream_Read(This,Characters,Text) (This)->lpVtbl->Read(This,Characters,Text)
#define ITextStream_ReadLine(This,Text) (This)->lpVtbl->ReadLine(This,Text)
#define ITextStream_ReadAll(This,Text) (This)->lpVtbl->ReadAll(This,Text)
#define ITextStream_Write(This,Text) (This)->lpVtbl->Write(This,Text)
#define ITextStream_WriteLine(This,Text) (This)->lpVtbl->WriteLine(This,Text)
#define ITextStream_WriteBlankLines(This,Lines) (This)->lpVtbl->WriteBlankLines(This,Lines)
#define ITextStream_Skip(This,Characters) (This)->lpVtbl->Skip(This,Characters)
#define ITextStream_SkipLine(This) (This)->lpVtbl->SkipLine(This)
#define ITextStream_Close(This) (This)->lpVtbl->Close(This)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT ITextStream_QueryInterface(ITextStream* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG ITextStream_AddRef(ITextStream* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG ITextStream_Release(ITextStream* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT ITextStream_GetTypeInfoCount(ITextStream* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT ITextStream_GetTypeInfo(ITextStream* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT ITextStream_GetIDsOfNames(ITextStream* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT ITextStream_Invoke(ITextStream* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITextStream methods ***/
FORCEINLINE HRESULT ITextStream_get_Line(ITextStream* This,LONG *Line) {
    return This->lpVtbl->get_Line(This,Line);
}
FORCEINLINE HRESULT ITextStream_get_Column(ITextStream* This,LONG *Column) {
    return This->lpVtbl->get_Column(This,Column);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfStream(ITextStream* This,VARIANT_BOOL *EOS) {
    return This->lpVtbl->get_AtEndOfStream(This,EOS);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfLine(ITextStream* This,VARIANT_BOOL *EOL) {
    return This->lpVtbl->get_AtEndOfLine(This,EOL);
}
FORCEINLINE HRESULT ITextStream_Read(ITextStream* This,LONG Characters,BSTR *Text) {
    return This->lpVtbl->Read(This,Characters,Text);
}
FORCEINLINE HRESULT ITextStream_ReadLine(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_ReadAll(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadAll(This,Text);
}
FORCEINLINE HRESULT ITextStream_Write(ITextStream* This,BSTR Text) {
    return This->lpVtbl->Write(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteLine(ITextStream* This,BSTR Text) {
    return This->lpVtbl->WriteLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteBlankLines(ITextStream* This,LONG Lines) {
    return This->lpVtbl->WriteBlankLines(This,Lines);
}
FORCEINLINE HRESULT ITextStream_Skip(ITextStream* This,LONG Characters) {
    return This->lpVtbl->Skip(This,Characters);
}
FORCEINLINE HRESULT ITextStream_SkipLine(ITextStream* This) {
    return This->lpVtbl->SkipLine(This);
}
FORCEINLINE HRESULT ITextStream_Close(ITextStream* This) {
    return This->lpVtbl->Close(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ITextStream_get_Line_Proxy(
    ITextStream* This,
    LONG *Line);
void __RPC_STUB ITextStream_get_Line_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_Column_Proxy(
    ITextStream* This,
    LONG *Column);
void __RPC_STUB ITextStream_get_Column_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfStream_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOS);
void __RPC_STUB ITextStream_get_AtEndOfStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfLine_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOL);
void __RPC_STUB ITextStream_get_AtEndOfLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Read_Proxy(
    ITextStream* This,
    LONG Characters,
    BSTR *Text);
void __RPC_STUB ITextStream_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadLine_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadAll_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadAll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Write_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteLine_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_WriteLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteBlankLines_Proxy(
    ITextStream* This,
    LONG Lines);
void __RPC_STUB ITextStream_WriteBlankLines_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Skip_Proxy(
    ITextStream* This,
    LONG Characters);
void __RPC_STUB ITextStream_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_SkipLine_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_SkipLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Close_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ITextStream_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFile interface
 */
#ifndef __IFile_INTERFACE_DEFINED__
#define __IFile_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFile, 0xc7c3f5a4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a4-88a3-11d0-abcb-00a0c90fffc0")
IFile : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *pbstrPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortPath(
        BSTR *pbstrPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortName(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Drive(
        IDrive **ppdrive) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParentFolder(
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Attributes(
        FileAttribute *pfa) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Attributes(
        FileAttribute pfa) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateCreated(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastAccessed(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        VARIANT *pvarSize) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        BSTR *pbstrType) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delete(
        VARIANT_BOOL Force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE Move(
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenAsTextStream(
        IOMode IOMode,
        Tristate Format,
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFile, 0xc7c3f5a4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFileVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFile *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFile *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFile *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFile *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFile *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFile *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFile *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFile methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IFile *This,
        BSTR *pbstrPath);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFile *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFile *This,
        BSTR pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_ShortPath)(
        IFile *This,
        BSTR *pbstrPath);

    HRESULT (STDMETHODCALLTYPE *get_ShortName)(
        IFile *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_Drive)(
        IFile *This,
        IDrive **ppdrive);

    HRESULT (STDMETHODCALLTYPE *get_ParentFolder)(
        IFile *This,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFile *This,
        FileAttribute *pfa);

    HRESULT (STDMETHODCALLTYPE *put_Attributes)(
        IFile *This,
        FileAttribute pfa);

    HRESULT (STDMETHODCALLTYPE *get_DateCreated)(
        IFile *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_DateLastModified)(
        IFile *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_DateLastAccessed)(
        IFile *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFile *This,
        VARIANT *pvarSize);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFile *This,
        BSTR *pbstrType);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFile *This,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IFile *This,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *Move)(
        IFile *This,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *OpenAsTextStream)(
        IFile *This,
        IOMode IOMode,
        Tristate Format,
        ITextStream **ppts);

    END_INTERFACE
} IFileVtbl;

interface IFile {
    CONST_VTBL IFileVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFile_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFile_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFile_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFile_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFile_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFile methods ***/
#define IFile_get_Path(This,pbstrPath) (This)->lpVtbl->get_Path(This,pbstrPath)
#define IFile_get_Name(This,pbstrName) (This)->lpVtbl->get_Name(This,pbstrName)
#define IFile_put_Name(This,pbstrName) (This)->lpVtbl->put_Name(This,pbstrName)
#define IFile_get_ShortPath(This,pbstrPath) (This)->lpVtbl->get_ShortPath(This,pbstrPath)
#define IFile_get_ShortName(This,pbstrName) (This)->lpVtbl->get_ShortName(This,pbstrName)
#define IFile_get_Drive(This,ppdrive) (This)->lpVtbl->get_Drive(This,ppdrive)
#define IFile_get_ParentFolder(This,ppfolder) (This)->lpVtbl->get_ParentFolder(This,ppfolder)
#define IFile_get_Attributes(This,pfa) (This)->lpVtbl->get_Attributes(This,pfa)
#define IFile_put_Attributes(This,pfa) (This)->lpVtbl->put_Attributes(This,pfa)
#define IFile_get_DateCreated(This,pdate) (This)->lpVtbl->get_DateCreated(This,pdate)
#define IFile_get_DateLastModified(This,pdate) (This)->lpVtbl->get_DateLastModified(This,pdate)
#define IFile_get_DateLastAccessed(This,pdate) (This)->lpVtbl->get_DateLastAccessed(This,pdate)
#define IFile_get_Size(This,pvarSize) (This)->lpVtbl->get_Size(This,pvarSize)
#define IFile_get_Type(This,pbstrType) (This)->lpVtbl->get_Type(This,pbstrType)
#define IFile_Delete(This,Force) (This)->lpVtbl->Delete(This,Force)
#define IFile_Copy(This,Destination,OverWriteFiles) (This)->lpVtbl->Copy(This,Destination,OverWriteFiles)
#define IFile_Move(This,Destination) (This)->lpVtbl->Move(This,Destination)
#define IFile_OpenAsTextStream(This,IOMode,Format,ppts) (This)->lpVtbl->OpenAsTextStream(This,IOMode,Format,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFile_QueryInterface(IFile* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFile_AddRef(IFile* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFile_Release(IFile* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFile_GetTypeInfoCount(IFile* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFile_GetTypeInfo(IFile* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFile_GetIDsOfNames(IFile* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFile_Invoke(IFile* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFile methods ***/
FORCEINLINE HRESULT IFile_get_Path(IFile* This,BSTR *pbstrPath) {
    return This->lpVtbl->get_Path(This,pbstrPath);
}
FORCEINLINE HRESULT IFile_get_Name(IFile* This,BSTR *pbstrName) {
    return This->lpVtbl->get_Name(This,pbstrName);
}
FORCEINLINE HRESULT IFile_put_Name(IFile* This,BSTR pbstrName) {
    return This->lpVtbl->put_Name(This,pbstrName);
}
FORCEINLINE HRESULT IFile_get_ShortPath(IFile* This,BSTR *pbstrPath) {
    return This->lpVtbl->get_ShortPath(This,pbstrPath);
}
FORCEINLINE HRESULT IFile_get_ShortName(IFile* This,BSTR *pbstrName) {
    return This->lpVtbl->get_ShortName(This,pbstrName);
}
FORCEINLINE HRESULT IFile_get_Drive(IFile* This,IDrive **ppdrive) {
    return This->lpVtbl->get_Drive(This,ppdrive);
}
FORCEINLINE HRESULT IFile_get_ParentFolder(IFile* This,IFolder **ppfolder) {
    return This->lpVtbl->get_ParentFolder(This,ppfolder);
}
FORCEINLINE HRESULT IFile_get_Attributes(IFile* This,FileAttribute *pfa) {
    return This->lpVtbl->get_Attributes(This,pfa);
}
FORCEINLINE HRESULT IFile_put_Attributes(IFile* This,FileAttribute pfa) {
    return This->lpVtbl->put_Attributes(This,pfa);
}
FORCEINLINE HRESULT IFile_get_DateCreated(IFile* This,DATE *pdate) {
    return This->lpVtbl->get_DateCreated(This,pdate);
}
FORCEINLINE HRESULT IFile_get_DateLastModified(IFile* This,DATE *pdate) {
    return This->lpVtbl->get_DateLastModified(This,pdate);
}
FORCEINLINE HRESULT IFile_get_DateLastAccessed(IFile* This,DATE *pdate) {
    return This->lpVtbl->get_DateLastAccessed(This,pdate);
}
FORCEINLINE HRESULT IFile_get_Size(IFile* This,VARIANT *pvarSize) {
    return This->lpVtbl->get_Size(This,pvarSize);
}
FORCEINLINE HRESULT IFile_get_Type(IFile* This,BSTR *pbstrType) {
    return This->lpVtbl->get_Type(This,pbstrType);
}
FORCEINLINE HRESULT IFile_Delete(IFile* This,VARIANT_BOOL Force) {
    return This->lpVtbl->Delete(This,Force);
}
FORCEINLINE HRESULT IFile_Copy(IFile* This,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->Copy(This,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFile_Move(IFile* This,BSTR Destination) {
    return This->lpVtbl->Move(This,Destination);
}
FORCEINLINE HRESULT IFile_OpenAsTextStream(IFile* This,IOMode IOMode,Tristate Format,ITextStream **ppts) {
    return This->lpVtbl->OpenAsTextStream(This,IOMode,Format,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFile_get_Path_Proxy(
    IFile* This,
    BSTR *pbstrPath);
void __RPC_STUB IFile_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Name_Proxy(
    IFile* This,
    BSTR *pbstrName);
void __RPC_STUB IFile_get_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_put_Name_Proxy(
    IFile* This,
    BSTR pbstrName);
void __RPC_STUB IFile_put_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ShortPath_Proxy(
    IFile* This,
    BSTR *pbstrPath);
void __RPC_STUB IFile_get_ShortPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ShortName_Proxy(
    IFile* This,
    BSTR *pbstrName);
void __RPC_STUB IFile_get_ShortName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Drive_Proxy(
    IFile* This,
    IDrive **ppdrive);
void __RPC_STUB IFile_get_Drive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ParentFolder_Proxy(
    IFile* This,
    IFolder **ppfolder);
void __RPC_STUB IFile_get_ParentFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Attributes_Proxy(
    IFile* This,
    FileAttribute *pfa);
void __RPC_STUB IFile_get_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_put_Attributes_Proxy(
    IFile* This,
    FileAttribute pfa);
void __RPC_STUB IFile_put_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateCreated_Proxy(
    IFile* This,
    DATE *pdate);
void __RPC_STUB IFile_get_DateCreated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateLastModified_Proxy(
    IFile* This,
    DATE *pdate);
void __RPC_STUB IFile_get_DateLastModified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateLastAccessed_Proxy(
    IFile* This,
    DATE *pdate);
void __RPC_STUB IFile_get_DateLastAccessed_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Size_Proxy(
    IFile* This,
    VARIANT *pvarSize);
void __RPC_STUB IFile_get_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Type_Proxy(
    IFile* This,
    BSTR *pbstrType);
void __RPC_STUB IFile_get_Type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Delete_Proxy(
    IFile* This,
    VARIANT_BOOL Force);
void __RPC_STUB IFile_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Copy_Proxy(
    IFile* This,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFile_Copy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Move_Proxy(
    IFile* This,
    BSTR Destination);
void __RPC_STUB IFile_Move_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_OpenAsTextStream_Proxy(
    IFile* This,
    IOMode IOMode,
    Tristate Format,
    ITextStream **ppts);
void __RPC_STUB IFile_OpenAsTextStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFile_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFileSystem interface
 */
#ifndef __IFileSystem_INTERFACE_DEFINED__
#define __IFileSystem_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileSystem, 0x0ab5a3d0, 0xe5b6, 0x11d0, 0xab,0xf5, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0ab5a3d0-e5b6-11d0-abf5-00a0c90fffc0")
IFileSystem : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Drives(
        IDriveCollection **ppdrives) = 0;

    virtual HRESULT STDMETHODCALLTYPE BuildPath(
        BSTR Path,
        BSTR Name,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDriveName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParentFolderName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBaseName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetExtensionName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAbsolutePathName(
        BSTR Path,
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTempName(
        BSTR *pbstrResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE DriveExists(
        BSTR DriveSpec,
        VARIANT_BOOL *pfExists) = 0;

    virtual HRESULT STDMETHODCALLTYPE FileExists(
        BSTR FileSpec,
        VARIANT_BOOL *pfExists) = 0;

    virtual HRESULT STDMETHODCALLTYPE FolderExists(
        BSTR FolderSpec,
        VARIANT_BOOL *pfExists) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDrive(
        BSTR DriveSpec,
        IDrive **ppdrive) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFile(
        BSTR FilePath,
        IFile **ppfile) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFolder(
        BSTR FolderPath,
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSpecialFolder(
        SpecialFolderConst SpecialFolder,
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE DeleteFile(
        BSTR FileSpec,
        VARIANT_BOOL Force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE DeleteFolder(
        BSTR FolderSpec,
        VARIANT_BOOL Force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE MoveFile(
        BSTR Source,
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE MoveFolder(
        BSTR Source,
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE CopyFile(
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE CopyFolder(
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateFolder(
        BSTR Path,
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateTextFile(
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenTextFile(
        BSTR FileName,
        IOMode IOMode,
        VARIANT_BOOL Create,
        Tristate Format,
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileSystem, 0x0ab5a3d0, 0xe5b6, 0x11d0, 0xab,0xf5, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFileSystemVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileSystem *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileSystem *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileSystem *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFileSystem *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFileSystem *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFileSystem *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFileSystem *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFileSystem methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Drives)(
        IFileSystem *This,
        IDriveCollection **ppdrives);

    HRESULT (STDMETHODCALLTYPE *BuildPath)(
        IFileSystem *This,
        BSTR Path,
        BSTR Name,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetDriveName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetParentFolderName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetFileName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetBaseName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetExtensionName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetAbsolutePathName)(
        IFileSystem *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetTempName)(
        IFileSystem *This,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *DriveExists)(
        IFileSystem *This,
        BSTR DriveSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *FileExists)(
        IFileSystem *This,
        BSTR FileSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *FolderExists)(
        IFileSystem *This,
        BSTR FolderSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *GetDrive)(
        IFileSystem *This,
        BSTR DriveSpec,
        IDrive **ppdrive);

    HRESULT (STDMETHODCALLTYPE *GetFile)(
        IFileSystem *This,
        BSTR FilePath,
        IFile **ppfile);

    HRESULT (STDMETHODCALLTYPE *GetFolder)(
        IFileSystem *This,
        BSTR FolderPath,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *GetSpecialFolder)(
        IFileSystem *This,
        SpecialFolderConst SpecialFolder,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *DeleteFile)(
        IFileSystem *This,
        BSTR FileSpec,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *DeleteFolder)(
        IFileSystem *This,
        BSTR FolderSpec,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *MoveFile)(
        IFileSystem *This,
        BSTR Source,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *MoveFolder)(
        IFileSystem *This,
        BSTR Source,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *CopyFile)(
        IFileSystem *This,
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *CopyFolder)(
        IFileSystem *This,
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *CreateFolder)(
        IFileSystem *This,
        BSTR Path,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *CreateTextFile)(
        IFileSystem *This,
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts);

    HRESULT (STDMETHODCALLTYPE *OpenTextFile)(
        IFileSystem *This,
        BSTR FileName,
        IOMode IOMode,
        VARIANT_BOOL Create,
        Tristate Format,
        ITextStream **ppts);

    END_INTERFACE
} IFileSystemVtbl;

interface IFileSystem {
    CONST_VTBL IFileSystemVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileSystem_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileSystem_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileSystem_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFileSystem_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFileSystem_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFileSystem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFileSystem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFileSystem methods ***/
#define IFileSystem_get_Drives(This,ppdrives) (This)->lpVtbl->get_Drives(This,ppdrives)
#define IFileSystem_BuildPath(This,Path,Name,pbstrResult) (This)->lpVtbl->BuildPath(This,Path,Name,pbstrResult)
#define IFileSystem_GetDriveName(This,Path,pbstrResult) (This)->lpVtbl->GetDriveName(This,Path,pbstrResult)
#define IFileSystem_GetParentFolderName(This,Path,pbstrResult) (This)->lpVtbl->GetParentFolderName(This,Path,pbstrResult)
#define IFileSystem_GetFileName(This,Path,pbstrResult) (This)->lpVtbl->GetFileName(This,Path,pbstrResult)
#define IFileSystem_GetBaseName(This,Path,pbstrResult) (This)->lpVtbl->GetBaseName(This,Path,pbstrResult)
#define IFileSystem_GetExtensionName(This,Path,pbstrResult) (This)->lpVtbl->GetExtensionName(This,Path,pbstrResult)
#define IFileSystem_GetAbsolutePathName(This,Path,pbstrResult) (This)->lpVtbl->GetAbsolutePathName(This,Path,pbstrResult)
#define IFileSystem_GetTempName(This,pbstrResult) (This)->lpVtbl->GetTempName(This,pbstrResult)
#define IFileSystem_DriveExists(This,DriveSpec,pfExists) (This)->lpVtbl->DriveExists(This,DriveSpec,pfExists)
#define IFileSystem_FileExists(This,FileSpec,pfExists) (This)->lpVtbl->FileExists(This,FileSpec,pfExists)
#define IFileSystem_FolderExists(This,FolderSpec,pfExists) (This)->lpVtbl->FolderExists(This,FolderSpec,pfExists)
#define IFileSystem_GetDrive(This,DriveSpec,ppdrive) (This)->lpVtbl->GetDrive(This,DriveSpec,ppdrive)
#define IFileSystem_GetFile(This,FilePath,ppfile) (This)->lpVtbl->GetFile(This,FilePath,ppfile)
#define IFileSystem_GetFolder(This,FolderPath,ppfolder) (This)->lpVtbl->GetFolder(This,FolderPath,ppfolder)
#define IFileSystem_GetSpecialFolder(This,SpecialFolder,ppfolder) (This)->lpVtbl->GetSpecialFolder(This,SpecialFolder,ppfolder)
#define IFileSystem_DeleteFile(This,FileSpec,Force) (This)->lpVtbl->DeleteFile(This,FileSpec,Force)
#define IFileSystem_DeleteFolder(This,FolderSpec,Force) (This)->lpVtbl->DeleteFolder(This,FolderSpec,Force)
#define IFileSystem_MoveFile(This,Source,Destination) (This)->lpVtbl->MoveFile(This,Source,Destination)
#define IFileSystem_MoveFolder(This,Source,Destination) (This)->lpVtbl->MoveFolder(This,Source,Destination)
#define IFileSystem_CopyFile(This,Source,Destination,OverWriteFiles) (This)->lpVtbl->CopyFile(This,Source,Destination,OverWriteFiles)
#define IFileSystem_CopyFolder(This,Source,Destination,OverWriteFiles) (This)->lpVtbl->CopyFolder(This,Source,Destination,OverWriteFiles)
#define IFileSystem_CreateFolder(This,Path,ppfolder) (This)->lpVtbl->CreateFolder(This,Path,ppfolder)
#define IFileSystem_CreateTextFile(This,FileName,Overwrite,Unicode,ppts) (This)->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts)
#define IFileSystem_OpenTextFile(This,FileName,IOMode,Create,Format,ppts) (This)->lpVtbl->OpenTextFile(This,FileName,IOMode,Create,Format,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFileSystem_QueryInterface(IFileSystem* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFileSystem_AddRef(IFileSystem* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFileSystem_Release(IFileSystem* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFileSystem_GetTypeInfoCount(IFileSystem* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFileSystem_GetTypeInfo(IFileSystem* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFileSystem_GetIDsOfNames(IFileSystem* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFileSystem_Invoke(IFileSystem* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFileSystem methods ***/
FORCEINLINE HRESULT IFileSystem_get_Drives(IFileSystem* This,IDriveCollection **ppdrives) {
    return This->lpVtbl->get_Drives(This,ppdrives);
}
FORCEINLINE HRESULT IFileSystem_BuildPath(IFileSystem* This,BSTR Path,BSTR Name,BSTR *pbstrResult) {
    return This->lpVtbl->BuildPath(This,Path,Name,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetDriveName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetDriveName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetParentFolderName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetParentFolderName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetFileName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetFileName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetBaseName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetBaseName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetExtensionName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetExtensionName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetAbsolutePathName(IFileSystem* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetAbsolutePathName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_GetTempName(IFileSystem* This,BSTR *pbstrResult) {
    return This->lpVtbl->GetTempName(This,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem_DriveExists(IFileSystem* This,BSTR DriveSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->DriveExists(This,DriveSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem_FileExists(IFileSystem* This,BSTR FileSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->FileExists(This,FileSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem_FolderExists(IFileSystem* This,BSTR FolderSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->FolderExists(This,FolderSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem_GetDrive(IFileSystem* This,BSTR DriveSpec,IDrive **ppdrive) {
    return This->lpVtbl->GetDrive(This,DriveSpec,ppdrive);
}
FORCEINLINE HRESULT IFileSystem_GetFile(IFileSystem* This,BSTR FilePath,IFile **ppfile) {
    return This->lpVtbl->GetFile(This,FilePath,ppfile);
}
FORCEINLINE HRESULT IFileSystem_GetFolder(IFileSystem* This,BSTR FolderPath,IFolder **ppfolder) {
    return This->lpVtbl->GetFolder(This,FolderPath,ppfolder);
}
FORCEINLINE HRESULT IFileSystem_GetSpecialFolder(IFileSystem* This,SpecialFolderConst SpecialFolder,IFolder **ppfolder) {
    return This->lpVtbl->GetSpecialFolder(This,SpecialFolder,ppfolder);
}
FORCEINLINE HRESULT IFileSystem_DeleteFile(IFileSystem* This,BSTR FileSpec,VARIANT_BOOL Force) {
    return This->lpVtbl->DeleteFile(This,FileSpec,Force);
}
FORCEINLINE HRESULT IFileSystem_DeleteFolder(IFileSystem* This,BSTR FolderSpec,VARIANT_BOOL Force) {
    return This->lpVtbl->DeleteFolder(This,FolderSpec,Force);
}
FORCEINLINE HRESULT IFileSystem_MoveFile(IFileSystem* This,BSTR Source,BSTR Destination) {
    return This->lpVtbl->MoveFile(This,Source,Destination);
}
FORCEINLINE HRESULT IFileSystem_MoveFolder(IFileSystem* This,BSTR Source,BSTR Destination) {
    return This->lpVtbl->MoveFolder(This,Source,Destination);
}
FORCEINLINE HRESULT IFileSystem_CopyFile(IFileSystem* This,BSTR Source,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->CopyFile(This,Source,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFileSystem_CopyFolder(IFileSystem* This,BSTR Source,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->CopyFolder(This,Source,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFileSystem_CreateFolder(IFileSystem* This,BSTR Path,IFolder **ppfolder) {
    return This->lpVtbl->CreateFolder(This,Path,ppfolder);
}
FORCEINLINE HRESULT IFileSystem_CreateTextFile(IFileSystem* This,BSTR FileName,VARIANT_BOOL Overwrite,VARIANT_BOOL Unicode,ITextStream **ppts) {
    return This->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts);
}
FORCEINLINE HRESULT IFileSystem_OpenTextFile(IFileSystem* This,BSTR FileName,IOMode IOMode,VARIANT_BOOL Create,Tristate Format,ITextStream **ppts) {
    return This->lpVtbl->OpenTextFile(This,FileName,IOMode,Create,Format,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFileSystem_get_Drives_Proxy(
    IFileSystem* This,
    IDriveCollection **ppdrives);
void __RPC_STUB IFileSystem_get_Drives_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_BuildPath_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR Name,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_BuildPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetDriveName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetDriveName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetParentFolderName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetParentFolderName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetFileName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetBaseName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetBaseName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetExtensionName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetExtensionName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetAbsolutePathName_Proxy(
    IFileSystem* This,
    BSTR Path,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetAbsolutePathName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetTempName_Proxy(
    IFileSystem* This,
    BSTR *pbstrResult);
void __RPC_STUB IFileSystem_GetTempName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_DriveExists_Proxy(
    IFileSystem* This,
    BSTR DriveSpec,
    VARIANT_BOOL *pfExists);
void __RPC_STUB IFileSystem_DriveExists_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_FileExists_Proxy(
    IFileSystem* This,
    BSTR FileSpec,
    VARIANT_BOOL *pfExists);
void __RPC_STUB IFileSystem_FileExists_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_FolderExists_Proxy(
    IFileSystem* This,
    BSTR FolderSpec,
    VARIANT_BOOL *pfExists);
void __RPC_STUB IFileSystem_FolderExists_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetDrive_Proxy(
    IFileSystem* This,
    BSTR DriveSpec,
    IDrive **ppdrive);
void __RPC_STUB IFileSystem_GetDrive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetFile_Proxy(
    IFileSystem* This,
    BSTR FilePath,
    IFile **ppfile);
void __RPC_STUB IFileSystem_GetFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetFolder_Proxy(
    IFileSystem* This,
    BSTR FolderPath,
    IFolder **ppfolder);
void __RPC_STUB IFileSystem_GetFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_GetSpecialFolder_Proxy(
    IFileSystem* This,
    SpecialFolderConst SpecialFolder,
    IFolder **ppfolder);
void __RPC_STUB IFileSystem_GetSpecialFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_DeleteFile_Proxy(
    IFileSystem* This,
    BSTR FileSpec,
    VARIANT_BOOL Force);
void __RPC_STUB IFileSystem_DeleteFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_DeleteFolder_Proxy(
    IFileSystem* This,
    BSTR FolderSpec,
    VARIANT_BOOL Force);
void __RPC_STUB IFileSystem_DeleteFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_MoveFile_Proxy(
    IFileSystem* This,
    BSTR Source,
    BSTR Destination);
void __RPC_STUB IFileSystem_MoveFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_MoveFolder_Proxy(
    IFileSystem* This,
    BSTR Source,
    BSTR Destination);
void __RPC_STUB IFileSystem_MoveFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_CopyFile_Proxy(
    IFileSystem* This,
    BSTR Source,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFileSystem_CopyFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_CopyFolder_Proxy(
    IFileSystem* This,
    BSTR Source,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFileSystem_CopyFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_CreateFolder_Proxy(
    IFileSystem* This,
    BSTR Path,
    IFolder **ppfolder);
void __RPC_STUB IFileSystem_CreateFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_CreateTextFile_Proxy(
    IFileSystem* This,
    BSTR FileName,
    VARIANT_BOOL Overwrite,
    VARIANT_BOOL Unicode,
    ITextStream **ppts);
void __RPC_STUB IFileSystem_CreateTextFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem_OpenTextFile_Proxy(
    IFileSystem* This,
    BSTR FileName,
    IOMode IOMode,
    VARIANT_BOOL Create,
    Tristate Format,
    ITextStream **ppts);
void __RPC_STUB IFileSystem_OpenTextFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFileSystem_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFileCollection interface
 */
#ifndef __IFileCollection_INTERFACE_DEFINED__
#define __IFileCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileCollection, 0xc7c3f5a5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a5-88a3-11d0-abcb-00a0c90fffc0")
IFileCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Key,
        IFile **ppfile) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *plCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileCollection, 0xc7c3f5a5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFileCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFileCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFileCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFileCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFileCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFileCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IFileCollection *This,
        VARIANT Key,
        IFile **ppfile);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IFileCollection *This,
        IUnknown **ppenum);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IFileCollection *This,
        LONG *plCount);

    END_INTERFACE
} IFileCollectionVtbl;

interface IFileCollection {
    CONST_VTBL IFileCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFileCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFileCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFileCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFileCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFileCollection methods ***/
#define IFileCollection_get_Item(This,Key,ppfile) (This)->lpVtbl->get_Item(This,Key,ppfile)
#define IFileCollection_get__NewEnum(This,ppenum) (This)->lpVtbl->get__NewEnum(This,ppenum)
#define IFileCollection_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFileCollection_QueryInterface(IFileCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFileCollection_AddRef(IFileCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFileCollection_Release(IFileCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFileCollection_GetTypeInfoCount(IFileCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFileCollection_GetTypeInfo(IFileCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFileCollection_GetIDsOfNames(IFileCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFileCollection_Invoke(IFileCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFileCollection methods ***/
FORCEINLINE HRESULT IFileCollection_get_Item(IFileCollection* This,VARIANT Key,IFile **ppfile) {
    return This->lpVtbl->get_Item(This,Key,ppfile);
}
FORCEINLINE HRESULT IFileCollection_get__NewEnum(IFileCollection* This,IUnknown **ppenum) {
    return This->lpVtbl->get__NewEnum(This,ppenum);
}
FORCEINLINE HRESULT IFileCollection_get_Count(IFileCollection* This,LONG *plCount) {
    return This->lpVtbl->get_Count(This,plCount);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFileCollection_get_Item_Proxy(
    IFileCollection* This,
    VARIANT Key,
    IFile **ppfile);
void __RPC_STUB IFileCollection_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileCollection_get__NewEnum_Proxy(
    IFileCollection* This,
    IUnknown **ppenum);
void __RPC_STUB IFileCollection_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileCollection_get_Count_Proxy(
    IFileCollection* This,
    LONG *plCount);
void __RPC_STUB IFileCollection_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFileCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFolderCollection interface
 */
#ifndef __IFolderCollection_INTERFACE_DEFINED__
#define __IFolderCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFolderCollection, 0xc7c3f5a3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a3-88a3-11d0-abcb-00a0c90fffc0")
IFolderCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Add(
        BSTR Name,
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Key,
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *plCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFolderCollection, 0xc7c3f5a3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFolderCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFolderCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFolderCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFolderCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFolderCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFolderCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFolderCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFolderCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFolderCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *Add)(
        IFolderCollection *This,
        BSTR Name,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IFolderCollection *This,
        VARIANT Key,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IFolderCollection *This,
        IUnknown **ppenum);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IFolderCollection *This,
        LONG *plCount);

    END_INTERFACE
} IFolderCollectionVtbl;

interface IFolderCollection {
    CONST_VTBL IFolderCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFolderCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFolderCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFolderCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFolderCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFolderCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFolderCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFolderCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFolderCollection methods ***/
#define IFolderCollection_Add(This,Name,ppfolder) (This)->lpVtbl->Add(This,Name,ppfolder)
#define IFolderCollection_get_Item(This,Key,ppfolder) (This)->lpVtbl->get_Item(This,Key,ppfolder)
#define IFolderCollection_get__NewEnum(This,ppenum) (This)->lpVtbl->get__NewEnum(This,ppenum)
#define IFolderCollection_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFolderCollection_QueryInterface(IFolderCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFolderCollection_AddRef(IFolderCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFolderCollection_Release(IFolderCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFolderCollection_GetTypeInfoCount(IFolderCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFolderCollection_GetTypeInfo(IFolderCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFolderCollection_GetIDsOfNames(IFolderCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFolderCollection_Invoke(IFolderCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFolderCollection methods ***/
FORCEINLINE HRESULT IFolderCollection_Add(IFolderCollection* This,BSTR Name,IFolder **ppfolder) {
    return This->lpVtbl->Add(This,Name,ppfolder);
}
FORCEINLINE HRESULT IFolderCollection_get_Item(IFolderCollection* This,VARIANT Key,IFolder **ppfolder) {
    return This->lpVtbl->get_Item(This,Key,ppfolder);
}
FORCEINLINE HRESULT IFolderCollection_get__NewEnum(IFolderCollection* This,IUnknown **ppenum) {
    return This->lpVtbl->get__NewEnum(This,ppenum);
}
FORCEINLINE HRESULT IFolderCollection_get_Count(IFolderCollection* This,LONG *plCount) {
    return This->lpVtbl->get_Count(This,plCount);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFolderCollection_Add_Proxy(
    IFolderCollection* This,
    BSTR Name,
    IFolder **ppfolder);
void __RPC_STUB IFolderCollection_Add_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get_Item_Proxy(
    IFolderCollection* This,
    VARIANT Key,
    IFolder **ppfolder);
void __RPC_STUB IFolderCollection_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get__NewEnum_Proxy(
    IFolderCollection* This,
    IUnknown **ppenum);
void __RPC_STUB IFolderCollection_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get_Count_Proxy(
    IFolderCollection* This,
    LONG *plCount);
void __RPC_STUB IFolderCollection_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFolderCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFolder interface
 */
#ifndef __IFolder_INTERFACE_DEFINED__
#define __IFolder_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFolder, 0xc7c3f5a2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a2-88a3-11d0-abcb-00a0c90fffc0")
IFolder : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *pbstrPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortPath(
        BSTR *pbstrPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortName(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Drive(
        IDrive **ppdrive) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParentFolder(
        IFolder **ppfolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Attributes(
        FileAttribute *pfa) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Attributes(
        FileAttribute pfa) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateCreated(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastAccessed(
        DATE *pdate) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        BSTR *pbstrType) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delete(
        VARIANT_BOOL Force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE Move(
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsRootFolder(
        VARIANT_BOOL *pfRootFolder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        VARIANT *pvarSize) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SubFolders(
        IFolderCollection **ppfolders) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Files(
        IFileCollection **ppfiles) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateTextFile(
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFolder, 0xc7c3f5a2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFolderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFolder *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFolder *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFolder *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFolder *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFolder *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFolder *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFolder *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFolder methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IFolder *This,
        BSTR *pbstrPath);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFolder *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFolder *This,
        BSTR pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_ShortPath)(
        IFolder *This,
        BSTR *pbstrPath);

    HRESULT (STDMETHODCALLTYPE *get_ShortName)(
        IFolder *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_Drive)(
        IFolder *This,
        IDrive **ppdrive);

    HRESULT (STDMETHODCALLTYPE *get_ParentFolder)(
        IFolder *This,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFolder *This,
        FileAttribute *pfa);

    HRESULT (STDMETHODCALLTYPE *put_Attributes)(
        IFolder *This,
        FileAttribute pfa);

    HRESULT (STDMETHODCALLTYPE *get_DateCreated)(
        IFolder *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_DateLastModified)(
        IFolder *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_DateLastAccessed)(
        IFolder *This,
        DATE *pdate);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFolder *This,
        BSTR *pbstrType);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFolder *This,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IFolder *This,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *Move)(
        IFolder *This,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *get_IsRootFolder)(
        IFolder *This,
        VARIANT_BOOL *pfRootFolder);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFolder *This,
        VARIANT *pvarSize);

    HRESULT (STDMETHODCALLTYPE *get_SubFolders)(
        IFolder *This,
        IFolderCollection **ppfolders);

    HRESULT (STDMETHODCALLTYPE *get_Files)(
        IFolder *This,
        IFileCollection **ppfiles);

    HRESULT (STDMETHODCALLTYPE *CreateTextFile)(
        IFolder *This,
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts);

    END_INTERFACE
} IFolderVtbl;

interface IFolder {
    CONST_VTBL IFolderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFolder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFolder_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFolder_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFolder_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFolder_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFolder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFolder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFolder methods ***/
#define IFolder_get_Path(This,pbstrPath) (This)->lpVtbl->get_Path(This,pbstrPath)
#define IFolder_get_Name(This,pbstrName) (This)->lpVtbl->get_Name(This,pbstrName)
#define IFolder_put_Name(This,pbstrName) (This)->lpVtbl->put_Name(This,pbstrName)
#define IFolder_get_ShortPath(This,pbstrPath) (This)->lpVtbl->get_ShortPath(This,pbstrPath)
#define IFolder_get_ShortName(This,pbstrName) (This)->lpVtbl->get_ShortName(This,pbstrName)
#define IFolder_get_Drive(This,ppdrive) (This)->lpVtbl->get_Drive(This,ppdrive)
#define IFolder_get_ParentFolder(This,ppfolder) (This)->lpVtbl->get_ParentFolder(This,ppfolder)
#define IFolder_get_Attributes(This,pfa) (This)->lpVtbl->get_Attributes(This,pfa)
#define IFolder_put_Attributes(This,pfa) (This)->lpVtbl->put_Attributes(This,pfa)
#define IFolder_get_DateCreated(This,pdate) (This)->lpVtbl->get_DateCreated(This,pdate)
#define IFolder_get_DateLastModified(This,pdate) (This)->lpVtbl->get_DateLastModified(This,pdate)
#define IFolder_get_DateLastAccessed(This,pdate) (This)->lpVtbl->get_DateLastAccessed(This,pdate)
#define IFolder_get_Type(This,pbstrType) (This)->lpVtbl->get_Type(This,pbstrType)
#define IFolder_Delete(This,Force) (This)->lpVtbl->Delete(This,Force)
#define IFolder_Copy(This,Destination,OverWriteFiles) (This)->lpVtbl->Copy(This,Destination,OverWriteFiles)
#define IFolder_Move(This,Destination) (This)->lpVtbl->Move(This,Destination)
#define IFolder_get_IsRootFolder(This,pfRootFolder) (This)->lpVtbl->get_IsRootFolder(This,pfRootFolder)
#define IFolder_get_Size(This,pvarSize) (This)->lpVtbl->get_Size(This,pvarSize)
#define IFolder_get_SubFolders(This,ppfolders) (This)->lpVtbl->get_SubFolders(This,ppfolders)
#define IFolder_get_Files(This,ppfiles) (This)->lpVtbl->get_Files(This,ppfiles)
#define IFolder_CreateTextFile(This,FileName,Overwrite,Unicode,ppts) (This)->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFolder_QueryInterface(IFolder* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFolder_AddRef(IFolder* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFolder_Release(IFolder* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFolder_GetTypeInfoCount(IFolder* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFolder_GetTypeInfo(IFolder* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFolder_GetIDsOfNames(IFolder* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFolder_Invoke(IFolder* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFolder methods ***/
FORCEINLINE HRESULT IFolder_get_Path(IFolder* This,BSTR *pbstrPath) {
    return This->lpVtbl->get_Path(This,pbstrPath);
}
FORCEINLINE HRESULT IFolder_get_Name(IFolder* This,BSTR *pbstrName) {
    return This->lpVtbl->get_Name(This,pbstrName);
}
FORCEINLINE HRESULT IFolder_put_Name(IFolder* This,BSTR pbstrName) {
    return This->lpVtbl->put_Name(This,pbstrName);
}
FORCEINLINE HRESULT IFolder_get_ShortPath(IFolder* This,BSTR *pbstrPath) {
    return This->lpVtbl->get_ShortPath(This,pbstrPath);
}
FORCEINLINE HRESULT IFolder_get_ShortName(IFolder* This,BSTR *pbstrName) {
    return This->lpVtbl->get_ShortName(This,pbstrName);
}
FORCEINLINE HRESULT IFolder_get_Drive(IFolder* This,IDrive **ppdrive) {
    return This->lpVtbl->get_Drive(This,ppdrive);
}
FORCEINLINE HRESULT IFolder_get_ParentFolder(IFolder* This,IFolder **ppfolder) {
    return This->lpVtbl->get_ParentFolder(This,ppfolder);
}
FORCEINLINE HRESULT IFolder_get_Attributes(IFolder* This,FileAttribute *pfa) {
    return This->lpVtbl->get_Attributes(This,pfa);
}
FORCEINLINE HRESULT IFolder_put_Attributes(IFolder* This,FileAttribute pfa) {
    return This->lpVtbl->put_Attributes(This,pfa);
}
FORCEINLINE HRESULT IFolder_get_DateCreated(IFolder* This,DATE *pdate) {
    return This->lpVtbl->get_DateCreated(This,pdate);
}
FORCEINLINE HRESULT IFolder_get_DateLastModified(IFolder* This,DATE *pdate) {
    return This->lpVtbl->get_DateLastModified(This,pdate);
}
FORCEINLINE HRESULT IFolder_get_DateLastAccessed(IFolder* This,DATE *pdate) {
    return This->lpVtbl->get_DateLastAccessed(This,pdate);
}
FORCEINLINE HRESULT IFolder_get_Type(IFolder* This,BSTR *pbstrType) {
    return This->lpVtbl->get_Type(This,pbstrType);
}
FORCEINLINE HRESULT IFolder_Delete(IFolder* This,VARIANT_BOOL Force) {
    return This->lpVtbl->Delete(This,Force);
}
FORCEINLINE HRESULT IFolder_Copy(IFolder* This,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->Copy(This,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFolder_Move(IFolder* This,BSTR Destination) {
    return This->lpVtbl->Move(This,Destination);
}
FORCEINLINE HRESULT IFolder_get_IsRootFolder(IFolder* This,VARIANT_BOOL *pfRootFolder) {
    return This->lpVtbl->get_IsRootFolder(This,pfRootFolder);
}
FORCEINLINE HRESULT IFolder_get_Size(IFolder* This,VARIANT *pvarSize) {
    return This->lpVtbl->get_Size(This,pvarSize);
}
FORCEINLINE HRESULT IFolder_get_SubFolders(IFolder* This,IFolderCollection **ppfolders) {
    return This->lpVtbl->get_SubFolders(This,ppfolders);
}
FORCEINLINE HRESULT IFolder_get_Files(IFolder* This,IFileCollection **ppfiles) {
    return This->lpVtbl->get_Files(This,ppfiles);
}
FORCEINLINE HRESULT IFolder_CreateTextFile(IFolder* This,BSTR FileName,VARIANT_BOOL Overwrite,VARIANT_BOOL Unicode,ITextStream **ppts) {
    return This->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFolder_get_Path_Proxy(
    IFolder* This,
    BSTR *pbstrPath);
void __RPC_STUB IFolder_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Name_Proxy(
    IFolder* This,
    BSTR *pbstrName);
void __RPC_STUB IFolder_get_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_put_Name_Proxy(
    IFolder* This,
    BSTR pbstrName);
void __RPC_STUB IFolder_put_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ShortPath_Proxy(
    IFolder* This,
    BSTR *pbstrPath);
void __RPC_STUB IFolder_get_ShortPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ShortName_Proxy(
    IFolder* This,
    BSTR *pbstrName);
void __RPC_STUB IFolder_get_ShortName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Drive_Proxy(
    IFolder* This,
    IDrive **ppdrive);
void __RPC_STUB IFolder_get_Drive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ParentFolder_Proxy(
    IFolder* This,
    IFolder **ppfolder);
void __RPC_STUB IFolder_get_ParentFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Attributes_Proxy(
    IFolder* This,
    FileAttribute *pfa);
void __RPC_STUB IFolder_get_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_put_Attributes_Proxy(
    IFolder* This,
    FileAttribute pfa);
void __RPC_STUB IFolder_put_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateCreated_Proxy(
    IFolder* This,
    DATE *pdate);
void __RPC_STUB IFolder_get_DateCreated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateLastModified_Proxy(
    IFolder* This,
    DATE *pdate);
void __RPC_STUB IFolder_get_DateLastModified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateLastAccessed_Proxy(
    IFolder* This,
    DATE *pdate);
void __RPC_STUB IFolder_get_DateLastAccessed_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Type_Proxy(
    IFolder* This,
    BSTR *pbstrType);
void __RPC_STUB IFolder_get_Type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Delete_Proxy(
    IFolder* This,
    VARIANT_BOOL Force);
void __RPC_STUB IFolder_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Copy_Proxy(
    IFolder* This,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFolder_Copy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Move_Proxy(
    IFolder* This,
    BSTR Destination);
void __RPC_STUB IFolder_Move_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_IsRootFolder_Proxy(
    IFolder* This,
    VARIANT_BOOL *pfRootFolder);
void __RPC_STUB IFolder_get_IsRootFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Size_Proxy(
    IFolder* This,
    VARIANT *pvarSize);
void __RPC_STUB IFolder_get_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_SubFolders_Proxy(
    IFolder* This,
    IFolderCollection **ppfolders);
void __RPC_STUB IFolder_get_SubFolders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Files_Proxy(
    IFolder* This,
    IFileCollection **ppfiles);
void __RPC_STUB IFolder_get_Files_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_CreateTextFile_Proxy(
    IFolder* This,
    BSTR FileName,
    VARIANT_BOOL Overwrite,
    VARIANT_BOOL Unicode,
    ITextStream **ppts);
void __RPC_STUB IFolder_CreateTextFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFolder_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFileSystem3 interface
 */
#ifndef __IFileSystem3_INTERFACE_DEFINED__
#define __IFileSystem3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileSystem3, 0x2a0b9d10, 0x4b87, 0x11d3, 0xa9,0x7a, 0x00,0x10,0x4b,0x36,0x5c,0x9f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2a0b9d10-4b87-11d3-a97a-00104b365c9f")
IFileSystem3 : public IFileSystem
{
    virtual HRESULT STDMETHODCALLTYPE GetStandardStream(
        StandardStreamTypes StandardStreamType,
        VARIANT_BOOL Unicode,
        ITextStream **ppts) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileVersion(
        BSTR FileName,
        BSTR *FileVersion) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileSystem3, 0x2a0b9d10, 0x4b87, 0x11d3, 0xa9,0x7a, 0x00,0x10,0x4b,0x36,0x5c,0x9f)
#endif
#else
typedef struct IFileSystem3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileSystem3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileSystem3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileSystem3 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFileSystem3 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFileSystem3 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFileSystem3 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFileSystem3 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFileSystem methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Drives)(
        IFileSystem3 *This,
        IDriveCollection **ppdrives);

    HRESULT (STDMETHODCALLTYPE *BuildPath)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR Name,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetDriveName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetParentFolderName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetFileName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetBaseName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetExtensionName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetAbsolutePathName)(
        IFileSystem3 *This,
        BSTR Path,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *GetTempName)(
        IFileSystem3 *This,
        BSTR *pbstrResult);

    HRESULT (STDMETHODCALLTYPE *DriveExists)(
        IFileSystem3 *This,
        BSTR DriveSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *FileExists)(
        IFileSystem3 *This,
        BSTR FileSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *FolderExists)(
        IFileSystem3 *This,
        BSTR FolderSpec,
        VARIANT_BOOL *pfExists);

    HRESULT (STDMETHODCALLTYPE *GetDrive)(
        IFileSystem3 *This,
        BSTR DriveSpec,
        IDrive **ppdrive);

    HRESULT (STDMETHODCALLTYPE *GetFile)(
        IFileSystem3 *This,
        BSTR FilePath,
        IFile **ppfile);

    HRESULT (STDMETHODCALLTYPE *GetFolder)(
        IFileSystem3 *This,
        BSTR FolderPath,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *GetSpecialFolder)(
        IFileSystem3 *This,
        SpecialFolderConst SpecialFolder,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *DeleteFile)(
        IFileSystem3 *This,
        BSTR FileSpec,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *DeleteFolder)(
        IFileSystem3 *This,
        BSTR FolderSpec,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *MoveFile)(
        IFileSystem3 *This,
        BSTR Source,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *MoveFolder)(
        IFileSystem3 *This,
        BSTR Source,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *CopyFile)(
        IFileSystem3 *This,
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *CopyFolder)(
        IFileSystem3 *This,
        BSTR Source,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *CreateFolder)(
        IFileSystem3 *This,
        BSTR Path,
        IFolder **ppfolder);

    HRESULT (STDMETHODCALLTYPE *CreateTextFile)(
        IFileSystem3 *This,
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts);

    HRESULT (STDMETHODCALLTYPE *OpenTextFile)(
        IFileSystem3 *This,
        BSTR FileName,
        IOMode IOMode,
        VARIANT_BOOL Create,
        Tristate Format,
        ITextStream **ppts);

    /*** IFileSystem3 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetStandardStream)(
        IFileSystem3 *This,
        StandardStreamTypes StandardStreamType,
        VARIANT_BOOL Unicode,
        ITextStream **ppts);

    HRESULT (STDMETHODCALLTYPE *GetFileVersion)(
        IFileSystem3 *This,
        BSTR FileName,
        BSTR *FileVersion);

    END_INTERFACE
} IFileSystem3Vtbl;

interface IFileSystem3 {
    CONST_VTBL IFileSystem3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileSystem3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileSystem3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileSystem3_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFileSystem3_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFileSystem3_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFileSystem3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFileSystem3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFileSystem methods ***/
#define IFileSystem3_get_Drives(This,ppdrives) (This)->lpVtbl->get_Drives(This,ppdrives)
#define IFileSystem3_BuildPath(This,Path,Name,pbstrResult) (This)->lpVtbl->BuildPath(This,Path,Name,pbstrResult)
#define IFileSystem3_GetDriveName(This,Path,pbstrResult) (This)->lpVtbl->GetDriveName(This,Path,pbstrResult)
#define IFileSystem3_GetParentFolderName(This,Path,pbstrResult) (This)->lpVtbl->GetParentFolderName(This,Path,pbstrResult)
#define IFileSystem3_GetFileName(This,Path,pbstrResult) (This)->lpVtbl->GetFileName(This,Path,pbstrResult)
#define IFileSystem3_GetBaseName(This,Path,pbstrResult) (This)->lpVtbl->GetBaseName(This,Path,pbstrResult)
#define IFileSystem3_GetExtensionName(This,Path,pbstrResult) (This)->lpVtbl->GetExtensionName(This,Path,pbstrResult)
#define IFileSystem3_GetAbsolutePathName(This,Path,pbstrResult) (This)->lpVtbl->GetAbsolutePathName(This,Path,pbstrResult)
#define IFileSystem3_GetTempName(This,pbstrResult) (This)->lpVtbl->GetTempName(This,pbstrResult)
#define IFileSystem3_DriveExists(This,DriveSpec,pfExists) (This)->lpVtbl->DriveExists(This,DriveSpec,pfExists)
#define IFileSystem3_FileExists(This,FileSpec,pfExists) (This)->lpVtbl->FileExists(This,FileSpec,pfExists)
#define IFileSystem3_FolderExists(This,FolderSpec,pfExists) (This)->lpVtbl->FolderExists(This,FolderSpec,pfExists)
#define IFileSystem3_GetDrive(This,DriveSpec,ppdrive) (This)->lpVtbl->GetDrive(This,DriveSpec,ppdrive)
#define IFileSystem3_GetFile(This,FilePath,ppfile) (This)->lpVtbl->GetFile(This,FilePath,ppfile)
#define IFileSystem3_GetFolder(This,FolderPath,ppfolder) (This)->lpVtbl->GetFolder(This,FolderPath,ppfolder)
#define IFileSystem3_GetSpecialFolder(This,SpecialFolder,ppfolder) (This)->lpVtbl->GetSpecialFolder(This,SpecialFolder,ppfolder)
#define IFileSystem3_DeleteFile(This,FileSpec,Force) (This)->lpVtbl->DeleteFile(This,FileSpec,Force)
#define IFileSystem3_DeleteFolder(This,FolderSpec,Force) (This)->lpVtbl->DeleteFolder(This,FolderSpec,Force)
#define IFileSystem3_MoveFile(This,Source,Destination) (This)->lpVtbl->MoveFile(This,Source,Destination)
#define IFileSystem3_MoveFolder(This,Source,Destination) (This)->lpVtbl->MoveFolder(This,Source,Destination)
#define IFileSystem3_CopyFile(This,Source,Destination,OverWriteFiles) (This)->lpVtbl->CopyFile(This,Source,Destination,OverWriteFiles)
#define IFileSystem3_CopyFolder(This,Source,Destination,OverWriteFiles) (This)->lpVtbl->CopyFolder(This,Source,Destination,OverWriteFiles)
#define IFileSystem3_CreateFolder(This,Path,ppfolder) (This)->lpVtbl->CreateFolder(This,Path,ppfolder)
#define IFileSystem3_CreateTextFile(This,FileName,Overwrite,Unicode,ppts) (This)->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts)
#define IFileSystem3_OpenTextFile(This,FileName,IOMode,Create,Format,ppts) (This)->lpVtbl->OpenTextFile(This,FileName,IOMode,Create,Format,ppts)
/*** IFileSystem3 methods ***/
#define IFileSystem3_GetStandardStream(This,StandardStreamType,Unicode,ppts) (This)->lpVtbl->GetStandardStream(This,StandardStreamType,Unicode,ppts)
#define IFileSystem3_GetFileVersion(This,FileName,FileVersion) (This)->lpVtbl->GetFileVersion(This,FileName,FileVersion)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFileSystem3_QueryInterface(IFileSystem3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFileSystem3_AddRef(IFileSystem3* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFileSystem3_Release(IFileSystem3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFileSystem3_GetTypeInfoCount(IFileSystem3* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFileSystem3_GetTypeInfo(IFileSystem3* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFileSystem3_GetIDsOfNames(IFileSystem3* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFileSystem3_Invoke(IFileSystem3* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFileSystem methods ***/
FORCEINLINE HRESULT IFileSystem3_get_Drives(IFileSystem3* This,IDriveCollection **ppdrives) {
    return This->lpVtbl->get_Drives(This,ppdrives);
}
FORCEINLINE HRESULT IFileSystem3_BuildPath(IFileSystem3* This,BSTR Path,BSTR Name,BSTR *pbstrResult) {
    return This->lpVtbl->BuildPath(This,Path,Name,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetDriveName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetDriveName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetParentFolderName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetParentFolderName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetFileName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetFileName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetBaseName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetBaseName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetExtensionName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetExtensionName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetAbsolutePathName(IFileSystem3* This,BSTR Path,BSTR *pbstrResult) {
    return This->lpVtbl->GetAbsolutePathName(This,Path,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_GetTempName(IFileSystem3* This,BSTR *pbstrResult) {
    return This->lpVtbl->GetTempName(This,pbstrResult);
}
FORCEINLINE HRESULT IFileSystem3_DriveExists(IFileSystem3* This,BSTR DriveSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->DriveExists(This,DriveSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem3_FileExists(IFileSystem3* This,BSTR FileSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->FileExists(This,FileSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem3_FolderExists(IFileSystem3* This,BSTR FolderSpec,VARIANT_BOOL *pfExists) {
    return This->lpVtbl->FolderExists(This,FolderSpec,pfExists);
}
FORCEINLINE HRESULT IFileSystem3_GetDrive(IFileSystem3* This,BSTR DriveSpec,IDrive **ppdrive) {
    return This->lpVtbl->GetDrive(This,DriveSpec,ppdrive);
}
FORCEINLINE HRESULT IFileSystem3_GetFile(IFileSystem3* This,BSTR FilePath,IFile **ppfile) {
    return This->lpVtbl->GetFile(This,FilePath,ppfile);
}
FORCEINLINE HRESULT IFileSystem3_GetFolder(IFileSystem3* This,BSTR FolderPath,IFolder **ppfolder) {
    return This->lpVtbl->GetFolder(This,FolderPath,ppfolder);
}
FORCEINLINE HRESULT IFileSystem3_GetSpecialFolder(IFileSystem3* This,SpecialFolderConst SpecialFolder,IFolder **ppfolder) {
    return This->lpVtbl->GetSpecialFolder(This,SpecialFolder,ppfolder);
}
FORCEINLINE HRESULT IFileSystem3_DeleteFile(IFileSystem3* This,BSTR FileSpec,VARIANT_BOOL Force) {
    return This->lpVtbl->DeleteFile(This,FileSpec,Force);
}
FORCEINLINE HRESULT IFileSystem3_DeleteFolder(IFileSystem3* This,BSTR FolderSpec,VARIANT_BOOL Force) {
    return This->lpVtbl->DeleteFolder(This,FolderSpec,Force);
}
FORCEINLINE HRESULT IFileSystem3_MoveFile(IFileSystem3* This,BSTR Source,BSTR Destination) {
    return This->lpVtbl->MoveFile(This,Source,Destination);
}
FORCEINLINE HRESULT IFileSystem3_MoveFolder(IFileSystem3* This,BSTR Source,BSTR Destination) {
    return This->lpVtbl->MoveFolder(This,Source,Destination);
}
FORCEINLINE HRESULT IFileSystem3_CopyFile(IFileSystem3* This,BSTR Source,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->CopyFile(This,Source,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFileSystem3_CopyFolder(IFileSystem3* This,BSTR Source,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->CopyFolder(This,Source,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFileSystem3_CreateFolder(IFileSystem3* This,BSTR Path,IFolder **ppfolder) {
    return This->lpVtbl->CreateFolder(This,Path,ppfolder);
}
FORCEINLINE HRESULT IFileSystem3_CreateTextFile(IFileSystem3* This,BSTR FileName,VARIANT_BOOL Overwrite,VARIANT_BOOL Unicode,ITextStream **ppts) {
    return This->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts);
}
FORCEINLINE HRESULT IFileSystem3_OpenTextFile(IFileSystem3* This,BSTR FileName,IOMode IOMode,VARIANT_BOOL Create,Tristate Format,ITextStream **ppts) {
    return This->lpVtbl->OpenTextFile(This,FileName,IOMode,Create,Format,ppts);
}
/*** IFileSystem3 methods ***/
FORCEINLINE HRESULT IFileSystem3_GetStandardStream(IFileSystem3* This,StandardStreamTypes StandardStreamType,VARIANT_BOOL Unicode,ITextStream **ppts) {
    return This->lpVtbl->GetStandardStream(This,StandardStreamType,Unicode,ppts);
}
FORCEINLINE HRESULT IFileSystem3_GetFileVersion(IFileSystem3* This,BSTR FileName,BSTR *FileVersion) {
    return This->lpVtbl->GetFileVersion(This,FileName,FileVersion);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFileSystem3_GetStandardStream_Proxy(
    IFileSystem3* This,
    StandardStreamTypes StandardStreamType,
    VARIANT_BOOL Unicode,
    ITextStream **ppts);
void __RPC_STUB IFileSystem3_GetStandardStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileSystem3_GetFileVersion_Proxy(
    IFileSystem3* This,
    BSTR FileName,
    BSTR *FileVersion);
void __RPC_STUB IFileSystem3_GetFileVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFileSystem3_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptEncoder interface
 */
#ifndef __IScriptEncoder_INTERFACE_DEFINED__
#define __IScriptEncoder_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptEncoder, 0xaadc65f6, 0xcff1, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("aadc65f6-cff1-11d1-b747-00c04fc2b085")
IScriptEncoder : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE EncodeScriptFile(
        BSTR szExt,
        BSTR bstrStreamIn,
        LONG cFlags,
        BSTR bstrDefaultLang,
        BSTR *pbstrStreamOut) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptEncoder, 0xaadc65f6, 0xcff1, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85)
#endif
#else
typedef struct IScriptEncoderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptEncoder *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptEncoder *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptEncoder *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptEncoder *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptEncoder *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptEncoder *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptEncoder *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptEncoder methods ***/
    HRESULT (STDMETHODCALLTYPE *EncodeScriptFile)(
        IScriptEncoder *This,
        BSTR szExt,
        BSTR bstrStreamIn,
        LONG cFlags,
        BSTR bstrDefaultLang,
        BSTR *pbstrStreamOut);

    END_INTERFACE
} IScriptEncoderVtbl;

interface IScriptEncoder {
    CONST_VTBL IScriptEncoderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptEncoder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptEncoder_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptEncoder_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptEncoder_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptEncoder_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptEncoder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptEncoder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptEncoder methods ***/
#define IScriptEncoder_EncodeScriptFile(This,szExt,bstrStreamIn,cFlags,bstrDefaultLang,pbstrStreamOut) (This)->lpVtbl->EncodeScriptFile(This,szExt,bstrStreamIn,cFlags,bstrDefaultLang,pbstrStreamOut)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IScriptEncoder_QueryInterface(IScriptEncoder* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IScriptEncoder_AddRef(IScriptEncoder* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IScriptEncoder_Release(IScriptEncoder* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IScriptEncoder_GetTypeInfoCount(IScriptEncoder* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IScriptEncoder_GetTypeInfo(IScriptEncoder* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IScriptEncoder_GetIDsOfNames(IScriptEncoder* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IScriptEncoder_Invoke(IScriptEncoder* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptEncoder methods ***/
FORCEINLINE HRESULT IScriptEncoder_EncodeScriptFile(IScriptEncoder* This,BSTR szExt,BSTR bstrStreamIn,LONG cFlags,BSTR bstrDefaultLang,BSTR *pbstrStreamOut) {
    return This->lpVtbl->EncodeScriptFile(This,szExt,bstrStreamIn,cFlags,bstrDefaultLang,pbstrStreamOut);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IScriptEncoder_EncodeScriptFile_Proxy(
    IScriptEncoder* This,
    BSTR szExt,
    BSTR bstrStreamIn,
    LONG cFlags,
    BSTR bstrDefaultLang,
    BSTR *pbstrStreamOut);
void __RPC_STUB IScriptEncoder_EncodeScriptFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IScriptEncoder_INTERFACE_DEFINED__ */

/*****************************************************************************
 * Dictionary coclass
 */

DEFINE_GUID(CLSID_Dictionary, 0xee09b103, 0x97e0, 0x11cf, 0x97,0x8f, 0x00,0xa0,0x24,0x63,0xe0,0x6f);

#ifdef __cplusplus
class DECLSPEC_UUID("ee09b103-97e0-11cf-978f-00a02463e06f") Dictionary;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Dictionary, 0xee09b103, 0x97e0, 0x11cf, 0x97,0x8f, 0x00,0xa0,0x24,0x63,0xe0,0x6f)
#endif
#endif

/*****************************************************************************
 * FileSystemObject coclass
 */

DEFINE_GUID(CLSID_FileSystemObject, 0x0d43fe01, 0xf093, 0x11cf, 0x89,0x40, 0x00,0xa0,0xc9,0x05,0x42,0x28);

#ifdef __cplusplus
class DECLSPEC_UUID("0d43fe01-f093-11cf-8940-00a0c9054228") FileSystemObject;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(FileSystemObject, 0x0d43fe01, 0xf093, 0x11cf, 0x89,0x40, 0x00,0xa0,0xc9,0x05,0x42,0x28)
#endif
#endif

/*****************************************************************************
 * Drive coclass
 */

DEFINE_GUID(CLSID_Drive, 0xc7c3f5b1, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b1-88a3-11d0-abcb-00a0c90fffc0") Drive;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Drive, 0xc7c3f5b1, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * Drives coclass
 */

DEFINE_GUID(CLSID_Drives, 0xc7c3f5b2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b2-88a3-11d0-abcb-00a0c90fffc0") Drives;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Drives, 0xc7c3f5b2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * Folder coclass
 */

DEFINE_GUID(CLSID_Folder, 0xc7c3f5b3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b3-88a3-11d0-abcb-00a0c90fffc0") Folder;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Folder, 0xc7c3f5b3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * Folders coclass
 */

DEFINE_GUID(CLSID_Folders, 0xc7c3f5b4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b4-88a3-11d0-abcb-00a0c90fffc0") Folders;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Folders, 0xc7c3f5b4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * File coclass
 */

DEFINE_GUID(CLSID_File, 0xc7c3f5b5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b5-88a3-11d0-abcb-00a0c90fffc0") File;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(File, 0xc7c3f5b5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * Files coclass
 */

DEFINE_GUID(CLSID_Files, 0xc7c3f5b6, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);

#ifdef __cplusplus
class DECLSPEC_UUID("c7c3f5b6-88a3-11d0-abcb-00a0c90fffc0") Files;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Files, 0xc7c3f5b6, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#endif

/*****************************************************************************
 * TextStream coclass
 */

DEFINE_GUID(CLSID_TextStream, 0x0bb02ec0, 0xef49, 0x11cf, 0x89,0x40, 0x00,0xa0,0xc9,0x05,0x42,0x28);

#ifdef __cplusplus
class DECLSPEC_UUID("0bb02ec0-ef49-11cf-8940-00a0c9054228") TextStream;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(TextStream, 0x0bb02ec0, 0xef49, 0x11cf, 0x89,0x40, 0x00,0xa0,0xc9,0x05,0x42,0x28)
#endif
#endif

/*****************************************************************************
 * Encoder coclass
 */

DEFINE_GUID(CLSID_Encoder, 0x32da2b15, 0xcfed, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85);

#ifdef __cplusplus
class DECLSPEC_UUID("32da2b15-cfed-11d1-b747-00c04fc2b085") Encoder;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Encoder, 0x32da2b15, 0xcfed, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85)
#endif
#endif

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);
ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __scrrun_h__ */
