/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/sdk/include/reactos/idl/srvsvc.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __srvsvc_c_h__
#define __srvsvc_c_h__

/* Forward declarations */

/* Headers for imported files */


#ifdef __cplusplus
extern "C" {
#endif

#ifndef _DTYP_IDL
#define _DTYP_IDL
#ifndef _WINDEF_H
typedef int BOOL;
typedef int *PBOOL;
typedef int *LPBOOL;
typedef unsigned char BYTE;
typedef unsigned char *PBYTE;
typedef unsigned char *LPBYTE;
typedef ULONG DWORD;
typedef ULONG *PDWORD;
typedef ULONG *LPDWORD;
#endif
#ifndef _BASETSD_H_
typedef unsigned int DWORD32;
typedef UINT64 DWORD64;
#endif
#ifndef _WINDEF_H
typedef int INT;
typedef int *LPINT;
#endif
#ifndef _BASETSD_H_
typedef signed char INT8;
typedef signed short INT16;
typedef signed int INT32;
typedef INT64 INT64;
#endif
#ifndef _BASETSD_H_
typedef signed int LONG32;
typedef INT64 LONG64;
#endif
typedef UINT64 QWORD;
#ifndef _WINNT_
typedef short SHORT;
#endif
typedef INT64 TIME;
#ifndef _WINNT_
typedef char CHAR;
typedef char *PCHAR;
typedef unsigned char UCHAR;
typedef unsigned char *PUCHAR;
#endif
#ifndef _WINDEF_H
typedef unsigned int UINT;
#endif
#ifndef _BASETSD_H_
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef UINT64 UINT64;
#endif
#ifndef _WINNT_
typedef ULONG ULONG;
typedef ULONG *PULONG;
#endif
#ifndef _BASETSD_H_
typedef unsigned int ULONG32;
typedef UINT64 ULONG64;
#endif
#ifndef _WINNT_
typedef UINT64 ULONGLONG;
typedef unsigned short USHORT;
#endif
#ifndef _WINDEF_H
typedef unsigned short WORD;
typedef unsigned short *PWORD;
typedef unsigned short *LPWORD;
#endif
#ifndef _WINNT_
typedef LONG LONG;
typedef LONG *PLONG;
#endif
#ifndef _WINDEF_H
typedef LONG *LPLONG;
#endif
#ifndef _WINNT_
typedef INT64 LONGLONG;
#endif
#ifndef _WINDEF_H
typedef float FLOAT;
#endif
#ifndef __wtypes_h__
typedef double DOUBLE;
#endif
#ifndef _WINNT_
typedef BYTE BOOLEAN;
typedef BYTE *PBOOLEAN;
#endif
#ifndef _BASETSD_H_
typedef LONG LONG_PTR;
typedef ULONG ULONG_PTR;
typedef ULONG_PTR SIZE_T;
typedef ULONG_PTR DWORD_PTR;
#endif
typedef DWORD NET_API_STATUS;
#ifndef _WINNT_
typedef ULONGLONG DWORDLONG;
typedef ULONGLONG *PDWORDLONG;
#endif
typedef DWORD HCALL;
#ifndef _WINNT_
typedef void *HANDLE;
typedef void *PVOID;
#endif
#ifndef __WINE_RPCDCE_H
typedef void *RPC_BINDING_HANDLE;
#endif
typedef void *PCONTEXT_HANDLE;
typedef PCONTEXT_HANDLE *PPCONTEXT_HANDLE;
#ifndef _WINNT_
typedef wchar_t WCHAR;
typedef wchar_t *PWCHAR;
#if 0
typedef wchar_t UNICODE;
#endif
typedef const char *LPCSTR;
typedef const wchar_t *LPCWSTR;
typedef char *PSTR;
typedef char *LPSTR;
typedef wchar_t *LPWSTR;
typedef wchar_t *PWSTR;
#endif
typedef const wchar_t *LMCSTR;
typedef WCHAR *LMSTR;
#ifndef __wtypes_h__
typedef WCHAR *BSTR;
#endif
#if 0
typedef LPCSTR LPCTSTR;
typedef LPSTR LPTSTR;
typedef CHAR TCHAR;
#endif
#if 0
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME;
typedef struct _FILETIME *PFILETIME;
typedef struct _FILETIME *LPFILETIME;
typedef struct _GUID {
    DWORD Data1;
    WORD Data2;
    WORD Data3;
    BYTE Data4[8];
} GUID;
typedef struct _GUID UUID;
typedef struct _GUID *PGUID;
typedef struct _LARGE_INTEGER {
    LONGLONG QuadPart;
} LARGE_INTEGER;
typedef struct _LARGE_INTEGER *PLARGE_INTEGER;
typedef DWORD LCID;
#endif
typedef struct _RPC_UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    LPWSTR Buffer;
} RPC_UNICODE_STRING;
typedef struct _RPC_UNICODE_STRING *PRPC_UNICODE_STRING;
#if 0
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME;
typedef struct _SYSTEMTIME *PSYSTEMTIME;
typedef struct _UINT128 {
    UINT64 lower;
    UINT64 upper;
} UINT128;
typedef struct _UINT128 *PUINT128;
typedef struct _ULARGE_INTEGER {
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
typedef struct _ULARGE_INTEGER *PULARGE_INTEGER;
#endif
#if 0
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} SID;
typedef struct _SID *PSID;
typedef struct _ACCESS_MASK {
    DWORD ACCESS_MASK;
} ACCESS_MASK;
typedef struct _ACCESS_MASK *PACCESS_MASK;
typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
} ACE_HEADER;
typedef struct _ACE_HEADER *PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;
typedef struct _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef struct _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
} ACL;
typedef struct _ACL *PACL;
typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
} SECURITY_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR *PSECURITY_DESCRIPTOR;
typedef DWORD SECURITY_INFORMATION;
typedef DWORD *PSECURITY_INFORMATION;
#endif
typedef struct _RPC_SID {
    UCHAR Revision;
    UCHAR SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} RPC_SID;
typedef struct _RPC_SID *PRPC_SID;
#endif /* _DTYP_IDL */
typedef wchar_t *SRVSVC_HANDLE;
typedef struct _CONNECTION_INFO_0 {
    DWORD coni0_id;
} CONNECTION_INFO_0;
typedef struct _CONNECTION_INFO_0 *PCONNECTION_INFO_0;
typedef struct _CONNECTION_INFO_0 *LPCONNECTION_INFO_0;
typedef struct _CONNECT_INFO_0_CONTAINER {
    DWORD EntriesRead;
    LPCONNECTION_INFO_0 Buffer;
} CONNECT_INFO_0_CONTAINER;
typedef struct _CONNECT_INFO_0_CONTAINER *PCONNECT_INFO_0_CONTAINER;
typedef struct _CONNECT_INFO_0_CONTAINER *LPCONNECT_INFO_0_CONTAINER;
typedef struct _CONNECTION_INFO_1 {
    DWORD coni1_id;
    DWORD coni1_type;
    DWORD coni1_num_opens;
    DWORD coni1_num_users;
    DWORD coni1_time;
    wchar_t *coni1_username;
    wchar_t *coni1_netname;
} CONNECTION_INFO_1;
typedef struct _CONNECTION_INFO_1 *PCONNECTION_INFO_1;
typedef struct _CONNECTION_INFO_1 *LPCONNECTION_INFO_1;
typedef struct _CONNECT_INFO_1_CONTAINER {
    DWORD EntriesRead;
    LPCONNECTION_INFO_1 Buffer;
} CONNECT_INFO_1_CONTAINER;
typedef struct _CONNECT_INFO_1_CONTAINER *PCONNECT_INFO_1_CONTAINER;
typedef struct _CONNECT_INFO_1_CONTAINER *LPCONNECT_INFO_1_CONTAINER;
typedef union _CONNECT_ENUM_UNION {
    CONNECT_INFO_0_CONTAINER *Level0;
    CONNECT_INFO_1_CONTAINER *Level1;
} CONNECT_ENUM_UNION;
typedef struct _CONNECT_ENUM_STRUCT {
    DWORD Level;
    CONNECT_ENUM_UNION ConnectInfo;
} CONNECT_ENUM_STRUCT;
typedef struct _CONNECT_ENUM_STRUCT *PCONNECT_ENUM_STRUCT;
typedef struct _CONNECT_ENUM_STRUCT *LPCONNECT_ENUM_STRUCT;
typedef struct _FILE_INFO_2 {
    DWORD fi2_id;
} FILE_INFO_2;
typedef struct _FILE_INFO_2 *PFILE_INFO_2;
typedef struct _FILE_INFO_2 *LPFILE_INFO_2;
typedef struct _FILE_INFO_2_CONTAINER {
    DWORD EntriesRead;
    LPFILE_INFO_2 Buffer;
} FILE_INFO_2_CONTAINER;
typedef struct _FILE_INFO_2_CONTAINER *PFILE_INFO_2_CONTAINER;
typedef struct _FILE_INFO_2_CONTAINER *LPFILE_INFO_2_CONTAINER;
typedef struct _FILE_INFO_3 {
    DWORD fi3_id;
    DWORD fi3_permissions;
    DWORD fi3_num_locks;
    wchar_t *fi3_pathname;
    wchar_t *fi3_username;
} FILE_INFO_3;
typedef struct _FILE_INFO_3 *PFILE_INFO_3;
typedef struct _FILE_INFO_3 *LPFILE_INFO_3;
typedef struct _FILE_INFO_3_CONTAINER {
    DWORD EntriesRead;
    LPFILE_INFO_3 Buffer;
} FILE_INFO_3_CONTAINER;
typedef struct _FILE_INFO_3_CONTAINER *PFILE_INFO_3_CONTAINER;
typedef struct _FILE_INFO_3_CONTAINER *LPFILE_INFO_3_CONTAINER;
typedef union _FILE_ENUM_UNION {
    FILE_INFO_2_CONTAINER *Level2;
    FILE_INFO_3_CONTAINER *Level3;
} FILE_ENUM_UNION;
typedef struct _FILE_ENUM_STRUCT {
    DWORD Level;
    FILE_ENUM_UNION FileInfo;
} FILE_ENUM_STRUCT;
typedef struct _FILE_ENUM_STRUCT *PFILE_ENUM_STRUCT;
typedef struct _FILE_ENUM_STRUCT *LPFILE_ENUM_STRUCT;
typedef union _FILE_INFO {
    LPFILE_INFO_2 FileInfo2;
    LPFILE_INFO_3 FileInfo3;
} FILE_INFO;
typedef union _FILE_INFO *PFILE_INFO;
typedef union _FILE_INFO *LPFILE_INFO;
typedef struct _SESSION_INFO_0 {
    wchar_t *sesi0_cname;
} SESSION_INFO_0;
typedef struct _SESSION_INFO_0 *PSESSION_INFO_0;
typedef struct _SESSION_INFO_0 *LPSESSION_INFO_0;
typedef struct _SESSION_INFO_0_CONTAINER {
    DWORD EntriesRead;
    LPSESSION_INFO_0 Buffer;
} SESSION_INFO_0_CONTAINER;
typedef struct _SESSION_INFO_0_CONTAINER *PSESSION_INFO_0_CONTAINER;
typedef struct _SESSION_INFO_0_CONTAINER *LPSESSION_INFO_0_CONTAINER;
typedef struct _SESSION_INFO_1 {
    wchar_t *sesi1_cname;
    wchar_t *sesi1_username;
    DWORD sesi1_num_opens;
    DWORD sesi1_time;
    DWORD sesi1_idle_time;
    DWORD sesi1_user_flags;
} SESSION_INFO_1;
typedef struct _SESSION_INFO_1 *PSESSION_INFO_1;
typedef struct _SESSION_INFO_1 *LPSESSION_INFO_1;
typedef struct _SESSION_INFO_1_CONTAINER {
    DWORD EntriesRead;
    LPSESSION_INFO_1 Buffer;
} SESSION_INFO_1_CONTAINER;
typedef struct _SESSION_INFO_1_CONTAINER *PSESSION_INFO_1_CONTAINER;
typedef struct _SESSION_INFO_1_CONTAINER *LPSESSION_INFO_1_CONTAINER;
typedef struct _SESSION_INFO_2 {
    wchar_t *sesi2_cname;
    wchar_t *sesi2_username;
    DWORD sesi2_num_opens;
    DWORD sesi2_time;
    DWORD sesi2_idle_time;
    DWORD sesi2_user_flags;
    wchar_t *sesi2_cltype_name;
} SESSION_INFO_2;
typedef struct _SESSION_INFO_2 *PSESSION_INFO_2;
typedef struct _SESSION_INFO_2 *LPSESSION_INFO_2;
typedef struct _SESSION_INFO_2_CONTAINER {
    DWORD EntriesRead;
    LPSESSION_INFO_2 Buffer;
} SESSION_INFO_2_CONTAINER;
typedef struct _SESSION_INFO_2_CONTAINER *PSESSION_INFO_2_CONTAINER;
typedef struct _SESSION_INFO_2_CONTAINER *LPSESSION_INFO_2_CONTAINER;
typedef struct _SESSION_INFO_10 {
    wchar_t *sesi10_cname;
    wchar_t *sesi10_username;
    DWORD sesi10_time;
    DWORD sesi10_idle_time;
} SESSION_INFO_10;
typedef struct _SESSION_INFO_10 *PSESSION_INFO_10;
typedef struct _SESSION_INFO_10 *LPSESSION_INFO_10;
typedef struct _SESSION_INFO_10_CONTAINER {
    DWORD EntriesRead;
    LPSESSION_INFO_10 Buffer;
} SESSION_INFO_10_CONTAINER;
typedef struct _SESSION_INFO_10_CONTAINER *PSESSION_INFO_10_CONTAINER;
typedef struct _SESSION_INFO_10_CONTAINER *LPSESSION_INFO_10_CONTAINER;
typedef struct _SESSION_INFO_502 {
    wchar_t *sesi502_cname;
    wchar_t *sesi502_username;
    DWORD sesi502_num_opens;
    DWORD sesi502_time;
    DWORD sesi502_idle_time;
    DWORD sesi502_user_flags;
    wchar_t *sesi502_cltype_name;
    wchar_t *sesi502_transport;
} SESSION_INFO_502;
typedef struct _SESSION_INFO_502 *PSESSION_INFO_502;
typedef struct _SESSION_INFO_502 *LPSESSION_INFO_502;
typedef struct _SESSION_INFO_502_CONTAINER {
    DWORD EntriesRead;
    LPSESSION_INFO_502 Buffer;
} SESSION_INFO_502_CONTAINER;
typedef struct _SESSION_INFO_502_CONTAINER *PSESSION_INFO_502_CONTAINER;
typedef struct _SESSION_INFO_502_CONTAINER *LPSESSION_INFO_502_CONTAINER;
typedef union _SESSION_ENUM_UNION {
    SESSION_INFO_0_CONTAINER *Level0;
    SESSION_INFO_1_CONTAINER *Level1;
    SESSION_INFO_2_CONTAINER *Level2;
    SESSION_INFO_10_CONTAINER *Level10;
    SESSION_INFO_502_CONTAINER *Level502;
} SESSION_ENUM_UNION;
typedef struct _SESSION_ENUM_STRUCT {
    DWORD Level;
    SESSION_ENUM_UNION SessionInfo;
} SESSION_ENUM_STRUCT;
typedef struct _SESSION_ENUM_STRUCT *PSESSION_ENUM_STRUCT;
typedef struct _SESSION_ENUM_STRUCT *LPSESSION_ENUM_STRUCT;
typedef struct _SHARE_INFO_502_I {
    WCHAR *shi502_netname;
    DWORD shi502_type;
    WCHAR *shi502_remark;
    DWORD shi502_permissions;
    DWORD shi502_max_uses;
    DWORD shi502_current_uses;
    WCHAR *shi502_path;
    WCHAR *shi502_passwd;
    DWORD shi502_reserved;
    unsigned char *shi502_security_descriptor;
} SHARE_INFO_502_I;
typedef struct _SHARE_INFO_502_I *PSHARE_INFO_502_I;
typedef struct _SHARE_INFO_502_I *LPSHARE_INFO_502_I;
typedef struct _SHARE_INFO_503_I {
    WCHAR *shi503_netname;
    DWORD shi503_type;
    WCHAR *shi503_remark;
    DWORD shi503_permissions;
    DWORD shi503_max_uses;
    DWORD shi503_current_uses;
    WCHAR *shi503_path;
    WCHAR *shi503_passwd;
    WCHAR *shi503_servername;
    DWORD shi503_reserved;
    PUCHAR shi503_security_descriptor;
} SHARE_INFO_503_I;
typedef struct _SHARE_INFO_503_I *PSHARE_INFO_503_I;
typedef struct _SHARE_INFO_503_I *LPSHARE_INFO_503_I;
typedef struct _SHARE_INFO_503_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_503_I Buffer;
} SHARE_INFO_503_CONTAINER;
typedef struct _SHARE_INFO_503_CONTAINER *PSHARE_INFO_503_CONTAINER;
typedef struct _SHARE_INFO_503_CONTAINER *LPSHARE_INFO_503_CONTAINER;
typedef struct _SHARE_INFO_1501_I {
    DWORD shi1501_reserved;
    unsigned char *shi1501_security_descriptor;
} SHARE_INFO_1501_I;
typedef struct _SHARE_INFO_1501_I *PSHARE_INFO_1501_I;
typedef struct _SHARE_INFO_1501_I *LPSHARE_INFO_1501_I;
typedef struct _SHARE_INFO_0 {
    wchar_t *shi0_netname;
} SHARE_INFO_0;
typedef struct _SHARE_INFO_0 *PSHARE_INFO_0;
typedef struct _SHARE_INFO_0 *LPSHARE_INFO_0;
typedef struct _SHARE_INFO_0_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_0 Buffer;
} SHARE_INFO_0_CONTAINER;
typedef struct _SHARE_INFO_1 {
    wchar_t *shi1_netname;
    DWORD shi1_type;
    wchar_t *shi1_remark;
} SHARE_INFO_1;
typedef struct _SHARE_INFO_1 *PSHARE_INFO_1;
typedef struct _SHARE_INFO_1 *LPSHARE_INFO_1;
typedef struct _SHARE_INFO_1_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_1 Buffer;
} SHARE_INFO_1_CONTAINER;
typedef struct _SHARE_INFO_2 {
    wchar_t *shi2_netname;
    DWORD shi2_type;
    wchar_t *shi2_remark;
    DWORD shi2_permissions;
    DWORD shi2_max_uses;
    DWORD shi2_current_uses;
    wchar_t *shi2_path;
    wchar_t *shi2_passwd;
} SHARE_INFO_2;
typedef struct _SHARE_INFO_2 *PSHARE_INFO_2;
typedef struct _SHARE_INFO_2 *LPSHARE_INFO_2;
typedef struct _SHARE_INFO_2_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_2 Buffer;
} SHARE_INFO_2_CONTAINER;
typedef struct _SHARE_INFO_2_CONTAINER *PSHARE_INFO_2_CONTAINER;
typedef struct _SHARE_INFO_2_CONTAINER *LPSHARE_INFO_2_CONTAINER;
typedef struct _SHARE_INFO_501 {
    wchar_t *shi501_netname;
    DWORD shi501_type;
    wchar_t *shi501_remark;
    DWORD shi501_flags;
} SHARE_INFO_501;
typedef struct _SHARE_INFO_501 *PSHARE_INFO_501;
typedef struct _SHARE_INFO_501 *LPSHARE_INFO_501;
typedef struct _SHARE_INFO_501_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_501 Buffer;
} SHARE_INFO_501_CONTAINER;
typedef struct _SHARE_INFO_501_CONTAINER *PSHARE_INFO_501_CONTAINER;
typedef struct _SHARE_INFO_501_CONTAINER *LPSHARE_INFO_501_CONTAINER;
typedef struct _SHARE_INFO_502_CONTAINER {
    DWORD EntriesRead;
    LPSHARE_INFO_502_I Buffer;
} SHARE_INFO_502_CONTAINER;
typedef struct _SHARE_INFO_502_CONTAINER *PSHARE_INFO_502_CONTAINER;
typedef struct _SHARE_INFO_502_CONTAINER *LPSHARE_INFO_502_CONTAINER;
typedef union _SHARE_ENUM_UNION {
    SHARE_INFO_0_CONTAINER *Level0;
    SHARE_INFO_1_CONTAINER *Level1;
    SHARE_INFO_2_CONTAINER *Level2;
    SHARE_INFO_501_CONTAINER *Level501;
    SHARE_INFO_502_CONTAINER *Level502;
    SHARE_INFO_503_CONTAINER *Level503;
} SHARE_ENUM_UNION;
typedef struct _SHARE_ENUM_STRUCT {
    DWORD Level;
    SHARE_ENUM_UNION ShareInfo;
} SHARE_ENUM_STRUCT;
typedef struct _SHARE_ENUM_STRUCT *PSHARE_ENUM_STRUCT;
typedef struct _SHARE_ENUM_STRUCT *LPSHARE_ENUM_STRUCT;
typedef struct _SHARE_INFO_1004 {
    wchar_t *shi1004_remark;
} SHARE_INFO_1004;
typedef struct _SHARE_INFO_1004 *PSHARE_INFO_1004;
typedef struct _SHARE_INFO_1004 *LPSHARE_INFO_1004;
typedef struct _SHARE_INFO_1006 {
    DWORD shi1006_max_uses;
} SHARE_INFO_1006;
typedef struct _SHARE_INFO_1006 *PSHARE_INFO_1006;
typedef struct _SHARE_INFO_1006 *LPSHARE_INFO_1006;
typedef struct _SHARE_INFO_1005 {
    DWORD shi1005_flags;
} SHARE_INFO_1005;
typedef struct _SHARE_INFO_1005 *PSHARE_INFO_1005;
typedef struct _SHARE_INFO_1005 *LPSHARE_INFO_1005;
typedef union _SHARE_INFO {
    LPSHARE_INFO_0 ShareInfo0;
    LPSHARE_INFO_1 ShareInfo1;
    LPSHARE_INFO_2 ShareInfo2;
    LPSHARE_INFO_502_I ShareInfo502;
    LPSHARE_INFO_1004 ShareInfo1004;
    LPSHARE_INFO_1006 ShareInfo1006;
    LPSHARE_INFO_1501_I ShareInfo1501;
    LPSHARE_INFO_1005 ShareInfo1005;
    LPSHARE_INFO_501 ShareInfo501;
    LPSHARE_INFO_503_I ShareInfo503;
} SHARE_INFO;
typedef union _SHARE_INFO *PSHARE_INFO;
typedef union _SHARE_INFO *LPSHARE_INFO;
typedef struct _SERVER_INFO_100 {
    DWORD sv100_platform_id;
    wchar_t *sv100_name;
} SERVER_INFO_100;
typedef struct _SERVER_INFO_100 *PSERVER_INFO_100;
typedef struct _SERVER_INFO_100 *LPSERVER_INFO_100;
typedef struct _SERVER_INFO_101 {
    DWORD sv101_platform_id;
    wchar_t *sv101_name;
    DWORD sv101_version_major;
    DWORD sv101_version_minor;
    DWORD sv101_type;
    wchar_t *sv101_comment;
} SERVER_INFO_101;
typedef struct _SERVER_INFO_101 *PSERVER_INFO_101;
typedef struct _SERVER_INFO_101 *LPSERVER_INFO_101;
typedef struct _SERVER_INFO_102 {
    DWORD sv102_platform_id;
    wchar_t *sv102_name;
    DWORD sv102_version_major;
    DWORD sv102_version_minor;
    DWORD sv102_type;
    wchar_t *sv102_comment;
    DWORD sv102_users;
    LONG sv102_disc;
    int sv102_hidden;
    DWORD sv102_announce;
    DWORD sv102_anndelta;
    DWORD sv102_licenses;
    wchar_t *sv102_userpath;
} SERVER_INFO_102;
typedef struct _SERVER_INFO_102 *PSERVER_INFO_102;
typedef struct _SERVER_INFO_102 *LPSERVER_INFO_102;
typedef struct _SERVER_INFO_103 {
    DWORD sv103_platform_id;
    wchar_t *sv103_name;
    DWORD sv103_version_major;
    DWORD sv103_version_minor;
    DWORD sv103_type;
    wchar_t *sv103_comment;
    DWORD sv103_users;
    LONG sv103_disc;
    BOOL sv103_hidden;
    DWORD sv103_announce;
    DWORD sv103_anndelta;
    DWORD sv103_licenses;
    wchar_t *sv103_userpath;
    DWORD sv103_capabilities;
} SERVER_INFO_103;
typedef struct _SERVER_INFO_103 *PSERVER_INFO_103;
typedef struct _SERVER_INFO_103 *LPSERVER_INFO_103;
typedef struct _SERVER_INFO_502 {
    DWORD sv502_sessopens;
    DWORD sv502_sessvcs;
    DWORD sv502_opensearch;
    DWORD sv502_sizreqbuf;
    DWORD sv502_initworkitems;
    DWORD sv502_maxworkitems;
    DWORD sv502_rawworkitems;
    DWORD sv502_irpstacksize;
    DWORD sv502_maxrawbuflen;
    DWORD sv502_sessusers;
    DWORD sv502_sessconns;
    DWORD sv502_maxpagedmemoryusage;
    DWORD sv502_maxnonpagedmemoryusage;
    int sv502_enablesoftcompat;
    int sv502_enableforcedlogoff;
    int sv502_timesource;
    int sv502_acceptdownlevelapis;
    int sv502_lmannounce;
} SERVER_INFO_502;
typedef struct _SERVER_INFO_502 *PSERVER_INFO_502;
typedef struct _SERVER_INFO_502 *LPSERVER_INFO_502;
typedef struct _SERVER_INFO_503 {
    DWORD sv503_sessopens;
    DWORD sv503_sessvcs;
    DWORD sv503_opensearch;
    DWORD sv503_sizreqbuf;
    DWORD sv503_initworkitems;
    DWORD sv503_maxworkitems;
    DWORD sv503_rawworkitems;
    DWORD sv503_irpstacksize;
    DWORD sv503_maxrawbuflen;
    DWORD sv503_sessusers;
    DWORD sv503_sessconns;
    DWORD sv503_maxpagedmemoryusage;
    DWORD sv503_maxnonpagedmemoryusage;
    int sv503_enablesoftcompat;
    int sv503_enableforcedlogoff;
    int sv503_timesource;
    int sv503_acceptdownlevelapis;
    int sv503_lmannounce;
    wchar_t *sv503_domain;
    DWORD sv503_maxcopyreadlen;
    DWORD sv503_maxcopywritelen;
    DWORD sv503_minkeepsearch;
    DWORD sv503_maxkeepsearch;
    DWORD sv503_minkeepcomplsearch;
    DWORD sv503_maxkeepcomplsearch;
    DWORD sv503_threadcountadd;
    DWORD sv503_numblockthreads;
    DWORD sv503_scavtimeout;
    DWORD sv503_minrcvqueue;
    DWORD sv503_minfreeworkitems;
    DWORD sv503_xactmemsize;
    DWORD sv503_threadpriority;
    DWORD sv503_maxmpxct;
    DWORD sv503_oplockbreakwait;
    DWORD sv503_oplockbreakresponsewait;
    int sv503_enableoplocks;
    int sv503_enableoplockforceclose;
    int sv503_enablefcbopens;
    int sv503_enableraw;
    int sv503_enablesharednetdrives;
    DWORD sv503_minfreeconnections;
    DWORD sv503_maxfreeconnections;
} SERVER_INFO_503;
typedef struct _SERVER_INFO_503 *PSERVER_INFO_503;
typedef struct _SERVER_INFO_503 *LPSERVER_INFO_503;
typedef struct _SERVER_INFO_599 {
    DWORD sv599_sessopens;
    DWORD sv599_sessvcs;
    DWORD sv599_opensearch;
    DWORD sv599_sizreqbuf;
    DWORD sv599_initworkitems;
    DWORD sv599_maxworkitems;
    DWORD sv599_rawworkitems;
    DWORD sv599_irpstacksize;
    DWORD sv599_maxrawbuflen;
    DWORD sv599_sessusers;
    DWORD sv599_sessconns;
    DWORD sv599_maxpagedmemoryusage;
    DWORD sv599_maxnonpagedmemoryusage;
    int sv599_enablesoftcompat;
    int sv599_enableforcedlogoff;
    int sv599_timesource;
    int sv599_acceptdownlevelapis;
    int sv599_lmannounce;
    wchar_t *sv599_domain;
    DWORD sv599_maxcopyreadlen;
    DWORD sv599_maxcopywritelen;
    DWORD sv599_minkeepsearch;
    DWORD sv599_maxkeepsearch;
    DWORD sv599_minkeepcomplsearch;
    DWORD sv599_maxkeepcomplsearch;
    DWORD sv599_threadcountadd;
    DWORD sv599_numblockthreads;
    DWORD sv599_scavtimeout;
    DWORD sv599_minrcvqueue;
    DWORD sv599_minfreeworkitems;
    DWORD sv599_xactmemsize;
    DWORD sv599_threadpriority;
    DWORD sv599_maxmpxct;
    DWORD sv599_oplockbreakwait;
    DWORD sv599_oplockbreakresponsewait;
    int sv599_enableoplocks;
    int sv599_enableoplockforceclose;
    int sv599_enablefcbopens;
    int sv599_enableraw;
    int sv599_enablesharednetdrives;
    DWORD sv599_minfreeconnections;
    DWORD sv599_maxfreeconnections;
    DWORD sv599_initsesstable;
    DWORD sv599_initconntable;
    DWORD sv599_initfiletable;
    DWORD sv599_initsearchtable;
    DWORD sv599_alertschedule;
    DWORD sv599_errorthreshold;
    DWORD sv599_networkerrorthreshold;
    DWORD sv599_diskspacethreshold;
    DWORD sv599_reserved;
    DWORD sv599_maxlinkdelay;
    DWORD sv599_minlinkthroughput;
    DWORD sv599_linkinfovalidtime;
    DWORD sv599_scavqosinfoupdatetime;
    DWORD sv599_maxworkitemidletime;
} SERVER_INFO_599;
typedef struct _SERVER_INFO_599 *PSERVER_INFO_599;
typedef struct _SERVER_INFO_599 *LPSERVER_INFO_599;
typedef struct _SERVER_INFO_1005 {
    wchar_t *sv1005_comment;
} SERVER_INFO_1005;
typedef struct _SERVER_INFO_1005 *PSERVER_INFO_1005;
typedef struct _SERVER_INFO_1005 *LPSERVER_INFO_1005;
typedef struct _SERVER_INFO_1107 {
    DWORD sv1107_users;
} SERVER_INFO_1107;
typedef struct _SERVER_INFO_1107 *PSERVER_INFO_1107;
typedef struct _SERVER_INFO_1107 *LPSERVER_INFO_1107;
typedef struct _SERVER_INFO_1010 {
    LONG sv1010_disc;
} SERVER_INFO_1010;
typedef struct _SERVER_INFO_1010 *PSERVER_INFO_1010;
typedef struct _SERVER_INFO_1010 *LPSERVER_INFO_1010;
typedef struct _SERVER_INFO_1016 {
    int sv1016_hidden;
} SERVER_INFO_1016;
typedef struct _SERVER_INFO_1016 *PSERVER_INFO_1016;
typedef struct _SERVER_INFO_1016 *LPSERVER_INFO_1016;
typedef struct _SERVER_INFO_1017 {
    DWORD sv1017_announce;
} SERVER_INFO_1017;
typedef struct _SERVER_INFO_1017 *PSERVER_INFO_1017;
typedef struct _SERVER_INFO_1017 *LPSERVER_INFO_1017;
typedef struct _SERVER_INFO_1018 {
    DWORD sv1018_anndelta;
} SERVER_INFO_1018;
typedef struct _SERVER_INFO_1018 *PSERVER_INFO_1018;
typedef struct _SERVER_INFO_1018 *LPSERVER_INFO_1018;
typedef struct _SERVER_INFO_1501 {
    DWORD sv1501_sessopens;
} SERVER_INFO_1501;
typedef struct _SERVER_INFO_1501 *PSERVER_INFO_1501;
typedef struct _SERVER_INFO_1501 *LPSERVER_INFO_1501;
typedef struct _SERVER_INFO_1502 {
    DWORD sv1502_sessvcs;
} SERVER_INFO_1502;
typedef struct _SERVER_INFO_1502 *PSERVER_INFO_1502;
typedef struct _SERVER_INFO_1502 *LPSERVER_INFO_1502;
typedef struct _SERVER_INFO_1503 {
    DWORD sv1503_opensearch;
} SERVER_INFO_1503;
typedef struct _SERVER_INFO_1503 *PSERVER_INFO_1503;
typedef struct _SERVER_INFO_1503 *LPSERVER_INFO_1503;
typedef struct _SERVER_INFO_1506 {
    DWORD sv1506_maxworkitems;
} SERVER_INFO_1506;
typedef struct _SERVER_INFO_1506 *PSERVER_INFO_1506;
typedef struct _SERVER_INFO_1506 *LPSERVER_INFO_1506;
typedef struct _SERVER_INFO_1510 {
    DWORD sv1510_sessusers;
} SERVER_INFO_1510;
typedef struct _SERVER_INFO_1510 *PSERVER_INFO_1510;
typedef struct _SERVER_INFO_1510 *LPSERVER_INFO_1510;
typedef struct _SERVER_INFO_1511 {
    DWORD sv1511_sessconns;
} SERVER_INFO_1511;
typedef struct _SERVER_INFO_1511 *PSERVER_INFO_1511;
typedef struct _SERVER_INFO_1511 *LPSERVER_INFO_1511;
typedef struct _SERVER_INFO_1512 {
    DWORD sv1512_maxnonpagedmemoryusage;
} SERVER_INFO_1512;
typedef struct _SERVER_INFO_1512 *PSERVER_INFO_1512;
typedef struct _SERVER_INFO_1512 *LPSERVER_INFO_1512;
typedef struct _SERVER_INFO_1513 {
    DWORD sv1513_maxpagedmemoryusage;
} SERVER_INFO_1513;
typedef struct _SERVER_INFO_1513 *PSERVER_INFO_1513;
typedef struct _SERVER_INFO_1513 *LPSERVER_INFO_1513;
typedef struct _SERVER_INFO_1514 {
    int sv1514_enablesoftcompat;
} SERVER_INFO_1514;
typedef struct _SERVER_INFO_1514 *PSERVER_INFO_1514;
typedef struct _SERVER_INFO_1514 *LPSERVER_INFO_1514;
typedef struct _SERVER_INFO_1515 {
    int sv1515_enableforcedlogoff;
} SERVER_INFO_1515;
typedef struct _SERVER_INFO_1515 *PSERVER_INFO_1515;
typedef struct _SERVER_INFO_1515 *LPSERVER_INFO_1515;
typedef struct _SERVER_INFO_1516 {
    int sv1516_timesource;
} SERVER_INFO_1516;
typedef struct _SERVER_INFO_1516 *PSERVER_INFO_1516;
typedef struct _SERVER_INFO_1516 *LPSERVER_INFO_1516;
typedef struct _SERVER_INFO_1518 {
    int sv1518_lmannounce;
} SERVER_INFO_1518;
typedef struct _SERVER_INFO_1518 *PSERVER_INFO_1518;
typedef struct _SERVER_INFO_1518 *LPSERVER_INFO_1518;
typedef struct _SERVER_INFO_1523 {
    DWORD sv1523_maxkeepsearch;
} SERVER_INFO_1523;
typedef struct _SERVER_INFO_1523 *PSERVER_INFO_1523;
typedef struct _SERVER_INFO_1523 *LPSERVER_INFO_1523;
typedef struct _SERVER_INFO_1528 {
    DWORD sv1528_scavtimeout;
} SERVER_INFO_1528;
typedef struct _SERVER_INFO_1528 *PSERVER_INFO_1528;
typedef struct _SERVER_INFO_1528 *LPSERVER_INFO_1528;
typedef struct _SERVER_INFO_1529 {
    DWORD sv1529_minrcvqueue;
} SERVER_INFO_1529;
typedef struct _SERVER_INFO_1529 *PSERVER_INFO_1529;
typedef struct _SERVER_INFO_1529 *LPSERVER_INFO_1529;
typedef struct _SERVER_INFO_1530 {
    DWORD sv1530_minfreeworkitems;
} SERVER_INFO_1530;
typedef struct _SERVER_INFO_1530 *PSERVER_INFO_1530;
typedef struct _SERVER_INFO_1530 *LPSERVER_INFO_1530;
typedef struct _SERVER_INFO_1533 {
    DWORD sv1533_maxmpxct;
} SERVER_INFO_1533;
typedef struct _SERVER_INFO_1533 *PSERVER_INFO_1533;
typedef struct _SERVER_INFO_1533 *LPSERVER_INFO_1533;
typedef struct _SERVER_INFO_1534 {
    DWORD sv1534_oplockbreakwait;
} SERVER_INFO_1534;
typedef struct _SERVER_INFO_1534 *PSERVER_INFO_1534;
typedef struct _SERVER_INFO_1534 *LPSERVER_INFO_1534;
typedef struct _SERVER_INFO_1535 {
    DWORD sv1535_oplockbreakresponsewait;
} SERVER_INFO_1535;
typedef struct _SERVER_INFO_1535 *PSERVER_INFO_1535;
typedef struct _SERVER_INFO_1535 *LPSERVER_INFO_1535;
typedef struct _SERVER_INFO_1536 {
    int sv1536_enableoplocks;
} SERVER_INFO_1536;
typedef struct _SERVER_INFO_1536 *PSERVER_INFO_1536;
typedef struct _SERVER_INFO_1536 *LPSERVER_INFO_1536;
typedef struct _SERVER_INFO_1538 {
    int sv1538_enablefcbopens;
} SERVER_INFO_1538;
typedef struct _SERVER_INFO_1538 *PSERVER_INFO_1538;
typedef struct _SERVER_INFO_1538 *LPSERVER_INFO_1538;
typedef struct _SERVER_INFO_1539 {
    int sv1539_enableraw;
} SERVER_INFO_1539;
typedef struct _SERVER_INFO_1539 *PSERVER_INFO_1539;
typedef struct _SERVER_INFO_1539 *LPSERVER_INFO_1539;
typedef struct _SERVER_INFO_1540 {
    int sv1540_enablesharednetdrives;
} SERVER_INFO_1540;
typedef struct _SERVER_INFO_1540 *PSERVER_INFO_1540;
typedef struct _SERVER_INFO_1540 *LPSERVER_INFO_1540;
typedef struct _SERVER_INFO_1541 {
    int sv1541_minfreeconnections;
} SERVER_INFO_1541;
typedef struct _SERVER_INFO_1541 *PSERVER_INFO_1541;
typedef struct _SERVER_INFO_1541 *LPSERVER_INFO_1541;
typedef struct _SERVER_INFO_1542 {
    int sv1542_maxfreeconnections;
} SERVER_INFO_1542;
typedef struct _SERVER_INFO_1542 *PSERVER_INFO_1542;
typedef struct _SERVER_INFO_1542 *LPSERVER_INFO_1542;
typedef struct _SERVER_INFO_1543 {
    DWORD sv1543_initsesstable;
} SERVER_INFO_1543;
typedef struct _SERVER_INFO_1543 *PSERVER_INFO_1543;
typedef struct _SERVER_INFO_1543 *LPSERVER_INFO_1543;
typedef struct _SERVER_INFO_1544 {
    DWORD sv1544_initconntable;
} SERVER_INFO_1544;
typedef struct _SERVER_INFO_1544 *PSERVER_INFO_1544;
typedef struct _SERVER_INFO_1544 *LPSERVER_INFO_1544;
typedef struct _SERVER_INFO_1545 {
    DWORD sv1545_initfiletable;
} SERVER_INFO_1545;
typedef struct _SERVER_INFO_1545 *PSERVER_INFO_1545;
typedef struct _SERVER_INFO_1545 *LPSERVER_INFO_1545;
typedef struct _SERVER_INFO_1546 {
    DWORD sv1546_initsearchtable;
} SERVER_INFO_1546;
typedef struct _SERVER_INFO_1546 *PSERVER_INFO_1546;
typedef struct _SERVER_INFO_1546 *LPSERVER_INFO_1546;
typedef struct _SERVER_INFO_1547 {
    DWORD sv1547_alertschedule;
} SERVER_INFO_1547;
typedef struct _SERVER_INFO_1547 *PSERVER_INFO_1547;
typedef struct _SERVER_INFO_1547 *LPSERVER_INFO_1547;
typedef struct _SERVER_INFO_1548 {
    DWORD sv1548_errorthreshold;
} SERVER_INFO_1548;
typedef struct _SERVER_INFO_1548 *PSERVER_INFO_1548;
typedef struct _SERVER_INFO_1548 *LPSERVER_INFO_1548;
typedef struct _SERVER_INFO_1549 {
    DWORD sv1549_networkerrorthreshold;
} SERVER_INFO_1549;
typedef struct _SERVER_INFO_1549 *PSERVER_INFO_1549;
typedef struct _SERVER_INFO_1549 *LPSERVER_INFO_1549;
typedef struct _SERVER_INFO_1550 {
    DWORD sv1550_diskspacethreshold;
} SERVER_INFO_1550;
typedef struct _SERVER_INFO_1550 *PSERVER_INFO_1550;
typedef struct _SERVER_INFO_1550 *LPSERVER_INFO_1550;
typedef struct _SERVER_INFO_1552 {
    DWORD sv1552_maxlinkdelay;
} SERVER_INFO_1552;
typedef struct _SERVER_INFO_1552 *PSERVER_INFO_1552;
typedef struct _SERVER_INFO_1552 *LPSERVER_INFO_1552;
typedef struct _SERVER_INFO_1553 {
    DWORD sv1553_minlinkthroughput;
} SERVER_INFO_1553;
typedef struct _SERVER_INFO_1553 *PSERVER_INFO_1553;
typedef struct _SERVER_INFO_1553 *LPSERVER_INFO_1553;
typedef struct _SERVER_INFO_1554 {
    DWORD sv1554_linkinfovalidtime;
} SERVER_INFO_1554;
typedef struct _SERVER_INFO_1554 *PSERVER_INFO_1554;
typedef struct _SERVER_INFO_1554 *LPSERVER_INFO_1554;
typedef struct _SERVER_INFO_1555 {
    DWORD sv1555_scavqosinfoupdatetime;
} SERVER_INFO_1555;
typedef struct _SERVER_INFO_1555 *PSERVER_INFO_1555;
typedef struct _SERVER_INFO_1555 *LPSERVER_INFO_1555;
typedef struct _SERVER_INFO_1556 {
    DWORD sv1556_maxworkitemidletime;
} SERVER_INFO_1556;
typedef struct _SERVER_INFO_1556 *PSERVER_INFO_1556;
typedef struct _SERVER_INFO_1556 *LPSERVER_INFO_1556;
typedef union _SERVER_INFO {
    LPSERVER_INFO_100 ServerInfo100;
    LPSERVER_INFO_101 ServerInfo101;
    LPSERVER_INFO_102 ServerInfo102;
    LPSERVER_INFO_103 ServerInfo103;
    LPSERVER_INFO_502 ServerInfo502;
    LPSERVER_INFO_503 ServerInfo503;
    LPSERVER_INFO_599 ServerInfo599;
    LPSERVER_INFO_1005 ServerInfo1005;
    LPSERVER_INFO_1107 ServerInfo1107;
    LPSERVER_INFO_1010 ServerInfo1010;
    LPSERVER_INFO_1016 ServerInfo1016;
    LPSERVER_INFO_1017 ServerInfo1017;
    LPSERVER_INFO_1018 ServerInfo1018;
    LPSERVER_INFO_1501 ServerInfo1501;
    LPSERVER_INFO_1502 ServerInfo1502;
    LPSERVER_INFO_1503 ServerInfo1503;
    LPSERVER_INFO_1506 ServerInfo1506;
    LPSERVER_INFO_1510 ServerInfo1510;
    LPSERVER_INFO_1511 ServerInfo1511;
    LPSERVER_INFO_1512 ServerInfo1512;
    LPSERVER_INFO_1513 ServerInfo1513;
    LPSERVER_INFO_1514 ServerInfo1514;
    LPSERVER_INFO_1515 ServerInfo1515;
    LPSERVER_INFO_1516 ServerInfo1516;
    LPSERVER_INFO_1518 ServerInfo1518;
    LPSERVER_INFO_1523 ServerInfo1523;
    LPSERVER_INFO_1528 ServerInfo1528;
    LPSERVER_INFO_1529 ServerInfo1529;
    LPSERVER_INFO_1530 ServerInfo1530;
    LPSERVER_INFO_1533 ServerInfo1533;
    LPSERVER_INFO_1534 ServerInfo1534;
    LPSERVER_INFO_1535 ServerInfo1535;
    LPSERVER_INFO_1536 ServerInfo1536;
    LPSERVER_INFO_1538 ServerInfo1538;
    LPSERVER_INFO_1539 ServerInfo1539;
    LPSERVER_INFO_1540 ServerInfo1540;
    LPSERVER_INFO_1541 ServerInfo1541;
    LPSERVER_INFO_1542 ServerInfo1542;
    LPSERVER_INFO_1543 ServerInfo1543;
    LPSERVER_INFO_1544 ServerInfo1544;
    LPSERVER_INFO_1545 ServerInfo1545;
    LPSERVER_INFO_1546 ServerInfo1546;
    LPSERVER_INFO_1547 ServerInfo1547;
    LPSERVER_INFO_1548 ServerInfo1548;
    LPSERVER_INFO_1549 ServerInfo1549;
    LPSERVER_INFO_1550 ServerInfo1550;
    LPSERVER_INFO_1552 ServerInfo1552;
    LPSERVER_INFO_1553 ServerInfo1553;
    LPSERVER_INFO_1554 ServerInfo1554;
    LPSERVER_INFO_1555 ServerInfo1555;
    LPSERVER_INFO_1556 ServerInfo1556;
} SERVER_INFO;
typedef union _SERVER_INFO *PSERVER_INFO;
typedef union _SERVER_INFO *LPSERVER_INFO;
typedef struct _DISK_INFO {
    WCHAR Disk[3];
} DISK_INFO;
typedef struct _DISK_INFO *PDISK_INFO;
typedef struct _DISK_INFO *LPDISK_INFO;
typedef struct _DISK_ENUM_CONTAINER {
    DWORD EntriesRead;
    LPDISK_INFO Buffer;
} DISK_ENUM_CONTAINER;
typedef struct _SERVER_TRANSPORT_INFO_0 {
    DWORD svti0_numberofvcs;
    wchar_t *svti0_transportname;
    unsigned char *svti0_transportaddress;
    DWORD svti0_transportaddresslength;
    wchar_t *svti0_networkaddress;
} SERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_TRANSPORT_INFO_0 *PSERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_TRANSPORT_INFO_0 *LPSERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_XPORT_INFO_0_CONTAINER {
    DWORD EntriesRead;
    LPSERVER_TRANSPORT_INFO_0 Buffer;
} SERVER_XPORT_INFO_0_CONTAINER;
typedef struct _SERVER_XPORT_INFO_0_CONTAINER *PSERVER_XPORT_INFO_0_CONTAINER;
typedef struct _SERVER_TRANSPORT_INFO_1 {
    DWORD svti1_numberofvcs;
    wchar_t *svti1_transportname;
    unsigned char *svti1_transportaddress;
    DWORD svti1_transportaddresslength;
    wchar_t *svti1_networkaddress;
    wchar_t *svti1_domain;
} SERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_TRANSPORT_INFO_1 *PSERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_TRANSPORT_INFO_1 *LPSERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_XPORT_INFO_1_CONTAINER {
    DWORD EntriesRead;
    LPSERVER_TRANSPORT_INFO_1 Buffer;
} SERVER_XPORT_INFO_1_CONTAINER;
typedef struct _SERVER_XPORT_INFO_1_CONTAINER *PSERVER_XPORT_INFO_1_CONTAINER;
typedef struct _SERVER_TRANSPORT_INFO_2 {
    DWORD svti2_numberofvcs;
    wchar_t *svti2_transportname;
    unsigned char *svti2_transportaddress;
    DWORD svti2_transportaddresslength;
    wchar_t *svti2_networkaddress;
    wchar_t *svti2_domain;
    ULONG svti2_flags;
} SERVER_TRANSPORT_INFO_2;
typedef struct _SERVER_TRANSPORT_INFO_2 *PSERVER_TRANSPORT_INFO_2;
typedef struct _SERVER_TRANSPORT_INFO_2 *LPSERVER_TRANSPORT_INFO_2;
typedef struct _SERVER_XPORT_INFO_2_CONTAINER {
    DWORD EntriesRead;
    LPSERVER_TRANSPORT_INFO_2 Buffer;
} SERVER_XPORT_INFO_2_CONTAINER;
typedef struct _SERVER_XPORT_INFO_2_CONTAINER *PSERVER_XPORT_INFO_2_CONTAINER;
typedef struct _SERVER_TRANSPORT_INFO_3 {
    DWORD svti3_numberofvcs;
    wchar_t *svti3_transportname;
    unsigned char *svti3_transportaddress;
    DWORD svti3_transportaddresslength;
    wchar_t *svti3_networkaddress;
    wchar_t *svti3_domain;
    ULONG svti3_flags;
    DWORD svti3_passwordlength;
    unsigned char svti3_password[256];
} SERVER_TRANSPORT_INFO_3;
typedef struct _SERVER_TRANSPORT_INFO_3 *PSERVER_TRANSPORT_INFO_3;
typedef struct _SERVER_TRANSPORT_INFO_3 *LPSERVER_TRANSPORT_INFO_3;
typedef struct _SERVER_XPORT_INFO_3_CONTAINER {
    DWORD EntriesRead;
    LPSERVER_TRANSPORT_INFO_3 Buffer;
} SERVER_XPORT_INFO_3_CONTAINER;
typedef struct _SERVER_XPORT_INFO_3_CONTAINER *PSERVER_XPORT_INFO_3_CONTAINER;
typedef union _TRANSPORT_INFO {
    SERVER_TRANSPORT_INFO_0 Transport0;
    SERVER_TRANSPORT_INFO_1 Transport1;
    SERVER_TRANSPORT_INFO_2 Transport2;
    SERVER_TRANSPORT_INFO_3 Transport3;
} TRANSPORT_INFO;
typedef union _TRANSPORT_INFO *PTRANSPORT_INFO;
typedef union _TRANSPORT_INFO *LPTRANSPORT_INFO;
typedef union _SERVER_XPORT_ENUM_UNION {
    PSERVER_XPORT_INFO_0_CONTAINER Level0;
    PSERVER_XPORT_INFO_1_CONTAINER Level1;
    PSERVER_XPORT_INFO_2_CONTAINER Level2;
    PSERVER_XPORT_INFO_3_CONTAINER Level3;
} SERVER_XPORT_ENUM_UNION;
typedef struct _SERVER_XPORT_ENUM_STRUCT {
    DWORD Level;
    SERVER_XPORT_ENUM_UNION XportInfo;
} SERVER_XPORT_ENUM_STRUCT;
typedef struct _SERVER_XPORT_ENUM_STRUCT *PSERVER_XPORT_ENUM_STRUCT;
typedef struct _SERVER_XPORT_ENUM_STRUCT *LPSERVER_XPORT_ENUM_STRUCT;
typedef void *SHARE_DEL_HANDLE;
typedef SHARE_DEL_HANDLE *PSHARE_DEL_HANDLE;
typedef struct _ADT_SECURITY_DESCRIPTOR {
    DWORD Length;
    unsigned char *Buffer;
} ADT_SECURITY_DESCRIPTOR;
typedef struct _ADT_SECURITY_DESCRIPTOR *PADT_SECURITY_DESCRIPTOR;
typedef struct _STAT_SERVER_0 {
    DWORD sts0_start;
    DWORD sts0_fopens;
    DWORD sts0_devopens;
    DWORD sts0_jobsqueued;
    DWORD sts0_sopens;
    DWORD sts0_stimedout;
    DWORD sts0_serrorout;
    DWORD sts0_pwerrors;
    DWORD sts0_permerrors;
    DWORD sts0_syserrors;
    DWORD sts0_bytessent_low;
    DWORD sts0_bytessent_high;
    DWORD sts0_bytesrcvd_low;
    DWORD sts0_bytesrcvd_high;
    DWORD sts0_avresponse;
    DWORD sts0_reqbufneed;
    DWORD sts0_bigbufneed;
} STAT_SERVER_0;
typedef struct _STAT_SERVER_0 *PSTAT_SERVER_0;
typedef struct _STAT_SERVER_0 *LPSTAT_SERVER_0;
typedef struct _TIME_OF_DAY_INFO {
    DWORD tod_elapsedt;
    DWORD tod_msecs;
    DWORD tod_hours;
    DWORD tod_mins;
    DWORD tod_secs;
    DWORD tod_hunds;
    LONG tod_timezone;
    DWORD tod_tinterval;
    DWORD tod_day;
    DWORD tod_month;
    DWORD tod_year;
    DWORD tod_weekday;
} TIME_OF_DAY_INFO;
typedef struct _TIME_OF_DAY_INFO *PTIME_OF_DAY_INFO;
typedef struct _TIME_OF_DAY_INFO *LPTIME_OF_DAY_INFO;
typedef struct _NET_DFS_ENTRY_ID {
    GUID Uid;
    WCHAR *Prefix;
} NET_DFS_ENTRY_ID;
typedef struct _NET_DFS_ENTRY_ID *LPNET_DFS_ENTRY_ID;
typedef struct _NET_DFS_ENTRY_ID_CONTAINER {
    ULONG Count;
    LPNET_DFS_ENTRY_ID Buffer;
} NET_DFS_ENTRY_ID_CONTAINER;
typedef struct _NET_DFS_ENTRY_ID_CONTAINER *LPNET_DFS_ENTRY_ID_CONTAINER;
typedef struct _DFS_SITENAME_INFO {
    ULONG SiteFlags;
    WCHAR *SiteName;
} DFS_SITENAME_INFO;
typedef struct _DFS_SITENAME_INFO *PDFS_SITENAME_INFO;
typedef struct _DFS_SITENAME_INFO *LPDFS_SITENAME_INFO;
typedef struct _DFS_SITELIST_INFO {
    ULONG cSites;
    DFS_SITENAME_INFO Site[1];
} DFS_SITELIST_INFO;
typedef struct _DFS_SITELIST_INFO *PDFS_SITELIST_INFO;
typedef struct _DFS_SITELIST_INFO *LPDFS_SITELIST_INFO;
typedef struct _SERVER_ALIAS_INFO_0 {
    LMSTR srvai0_alias;
    LMSTR srvai0_target;
    BOOLEAN srvai0_default;
    ULONG srvai0_reserved;
} SERVER_ALIAS_INFO_0;
typedef struct _SERVER_ALIAS_INFO_0 *PSERVER_ALIAS_INFO_0;
typedef struct _SERVER_ALIAS_INFO_0 *LPSERVER_ALIAS_INFO_0;
typedef struct _SERVER_ALIAS_INFO_0_CONTAINER {
    DWORD EntriesRead;
    LPSERVER_ALIAS_INFO_0 Buffer;
} SERVER_ALIAS_INFO_0_CONTAINER;
typedef struct _SERVER_ALIAS_ENUM_STRUCT {
    DWORD Level;
    union SERVER_ALIAS_ENUM_UNION {
        SERVER_ALIAS_INFO_0_CONTAINER *Level0;
    } ServerAliasInfo;
} SERVER_ALIAS_ENUM_STRUCT;
typedef struct _SERVER_ALIAS_ENUM_STRUCT *PSERVER_ALIAS_ENUM_STRUCT;
typedef struct _SERVER_ALIAS_ENUM_STRUCT *LPSERVER_ALIAS_ENUM_STRUCT;
typedef union _SERVER_ALIAS_INFO {
    LPSERVER_ALIAS_INFO_0 ServerAliasInfo0;
} SERVER_ALIAS_INFO;
typedef union _SERVER_ALIAS_INFO *PSERVER_ALIAS_INFO;
typedef union _SERVER_ALIAS_INFO *LPSERVER_ALIAS_INFO;
/*****************************************************************************
 * srvsvc interface (v3.0)
 */
#ifndef __srvsvc_INTERFACE_DEFINED__
#define __srvsvc_INTERFACE_DEFINED__

extern handle_t hBinding;
extern RPC_IF_HANDLE srvsvc_v3_0_c_ifspec;
extern RPC_IF_HANDLE srvsvc_v3_0_s_ifspec;
void __stdcall Opnum0NotUsedOnWire(
    void);

void __stdcall Opnum1NotUsedOnWire(
    void);

void __stdcall Opnum2NotUsedOnWire(
    void);

void __stdcall Opnum3NotUsedOnWire(
    void);

void __stdcall Opnum4NotUsedOnWire(
    void);

void __stdcall Opnum5NotUsedOnWire(
    void);

void __stdcall Opnum6NotUsedOnWire(
    void);

void __stdcall Opnum7NotUsedOnWire(
    void);

NET_API_STATUS __stdcall NetrConnectionEnum(
    SRVSVC_HANDLE ServerName,
    WCHAR *Qualifier,
    LPCONNECT_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrFileEnum(
    SRVSVC_HANDLE ServerName,
    WCHAR *BasePath,
    WCHAR *UserName,
    PFILE_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrFileGetInfo(
    SRVSVC_HANDLE ServerName,
    DWORD FileId,
    DWORD Level,
    LPFILE_INFO InfoStruct);

NET_API_STATUS __stdcall NetrFileClose(
    SRVSVC_HANDLE ServerName,
    DWORD FileId);

NET_API_STATUS __stdcall NetrSessionEnum(
    SRVSVC_HANDLE ServerName,
    WCHAR *ClientName,
    WCHAR *UserName,
    PSESSION_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrSessionDel(
    SRVSVC_HANDLE ServerName,
    WCHAR *ClientName,
    WCHAR *UserName);

NET_API_STATUS __stdcall NetrShareAdd(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPSHARE_INFO InfoStruct,
    DWORD *ParmErr);

NET_API_STATUS __stdcall NetrShareEnum(
    SRVSVC_HANDLE ServerName,
    LPSHARE_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrShareGetInfo(
    SRVSVC_HANDLE ServerName,
    WCHAR *NetName,
    DWORD Level,
    LPSHARE_INFO InfoStruct);

NET_API_STATUS __stdcall NetrShareSetInfo(
    SRVSVC_HANDLE ServerName,
    WCHAR *NetName,
    DWORD Level,
    LPSHARE_INFO ShareInfo,
    DWORD *ParmErr);

NET_API_STATUS __stdcall NetrShareDel(
    SRVSVC_HANDLE ServerName,
    WCHAR *NetName,
    DWORD Reserved);

NET_API_STATUS __stdcall NetrShareDelSticky(
    SRVSVC_HANDLE ServerName,
    WCHAR *NetName,
    DWORD Reserved);

NET_API_STATUS __stdcall NetrShareCheck(
    SRVSVC_HANDLE ServerName,
    WCHAR *Device,
    DWORD *Type);

NET_API_STATUS __stdcall NetrServerGetInfo(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPSERVER_INFO InfoStruct);

NET_API_STATUS __stdcall NetrServerSetInfo(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPSERVER_INFO ServerInfo,
    DWORD *ParmErr);

NET_API_STATUS __stdcall NetrServerDiskEnum(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    DISK_ENUM_CONTAINER *DiskInfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrServerStatisticsGet(
    SRVSVC_HANDLE ServerName,
    WCHAR *Service,
    DWORD Level,
    DWORD Options,
    LPSTAT_SERVER_0 *InfoStruct);

NET_API_STATUS __stdcall NetrServerTransportAdd(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPSERVER_TRANSPORT_INFO_0 Buffer);

NET_API_STATUS __stdcall NetrServerTransportEnum(
    SRVSVC_HANDLE ServerName,
    LPSERVER_XPORT_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrServerTransportDel(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPSERVER_TRANSPORT_INFO_0 Buffer);

NET_API_STATUS __stdcall NetrRemoteTOD(
    SRVSVC_HANDLE ServerName,
    LPTIME_OF_DAY_INFO *BufferPtr);

void __stdcall Opnum29NotUsedOnWire(
    void);

NET_API_STATUS __stdcall NetprPathType(
    SRVSVC_HANDLE ServerName,
    WCHAR *PathName,
    DWORD *PathType,
    DWORD Flags);

NET_API_STATUS __stdcall NetprPathCanonicalize(
    SRVSVC_HANDLE ServerName,
    WCHAR *PathName,
    unsigned char *Outbuf,
    DWORD OutbufLen,
    WCHAR *Prefix,
    DWORD *PathType,
    DWORD Flags);

LONG __stdcall NetprPathCompare(
    SRVSVC_HANDLE ServerName,
    WCHAR *PathName1,
    WCHAR *PathName2,
    DWORD PathType,
    DWORD Flags);

NET_API_STATUS __stdcall NetprNameValidate(
    SRVSVC_HANDLE ServerName,
    WCHAR *Name,
    DWORD NameType,
    DWORD Flags);

NET_API_STATUS __stdcall NetprNameCanonicalize(
    SRVSVC_HANDLE ServerName,
    WCHAR *Name,
    WCHAR *Outbuf,
    DWORD OutbufLen,
    DWORD NameType,
    DWORD Flags);

LONG __stdcall NetprNameCompare(
    SRVSVC_HANDLE ServerName,
    WCHAR *Name1,
    WCHAR *Name2,
    DWORD NameType,
    DWORD Flags);

NET_API_STATUS __stdcall NetrShareEnumSticky(
    SRVSVC_HANDLE ServerName,
    LPSHARE_ENUM_STRUCT InfoStruct,
    DWORD PreferedMaximumLength,
    DWORD *TotalEntries,
    DWORD *ResumeHandle);

NET_API_STATUS __stdcall NetrShareDelStart(
    SRVSVC_HANDLE ServerName,
    WCHAR *NetName,
    DWORD Reserved,
    PSHARE_DEL_HANDLE ContextHandle);

NET_API_STATUS __stdcall NetrShareDelCommit(
    PSHARE_DEL_HANDLE ContextHandle);

DWORD __stdcall NetrpGetFileSecurity(
    SRVSVC_HANDLE ServerName,
    WCHAR *ShareName,
    WCHAR *lpFileName,
    SECURITY_INFORMATION RequestedInformation,
    PADT_SECURITY_DESCRIPTOR *SecurityDescriptor);

DWORD __stdcall NetrpSetFileSecurity(
    SRVSVC_HANDLE ServerName,
    WCHAR *ShareName,
    WCHAR *lpFileName,
    SECURITY_INFORMATION SecurityInformation,
    PADT_SECURITY_DESCRIPTOR SecurityDescriptor);

NET_API_STATUS __stdcall NetrServerTransportAddEx(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPTRANSPORT_INFO Buffer);

void __stdcall Opnum42NotUsedOnWire(
    void);

NET_API_STATUS __stdcall NetrDfsGetVersion(
    SRVSVC_HANDLE ServerName,
    DWORD *Version);

NET_API_STATUS __stdcall NetrDfsCreateLocalPartition(
    SRVSVC_HANDLE ServerName,
    WCHAR *ShareName,
    GUID *EntryUid,
    WCHAR *EntryPrefix,
    WCHAR *ShortName,
    LPNET_DFS_ENTRY_ID_CONTAINER RelationInfo,
    int Force);

NET_API_STATUS __stdcall NetrDfsDeleteLocalPartition(
    SRVSVC_HANDLE ServerName,
    GUID *Uid,
    WCHAR *Prefix);

NET_API_STATUS __stdcall NetrDfsSetLocalVolumeState(
    SRVSVC_HANDLE ServerName,
    GUID *Uid,
    WCHAR *Prefix,
    ULONG State);

void __stdcall Opnum47NotUsedOnWire(
    void);

NET_API_STATUS __stdcall NetrDfsCreateExitPoint(
    SRVSVC_HANDLE ServerName,
    GUID *Uid,
    WCHAR *Prefix,
    ULONG Type,
    DWORD ShortPrefixLen,
    WCHAR *ShortPrefix);

NET_API_STATUS __stdcall NetrDfsDeleteExitPoint(
    SRVSVC_HANDLE ServerName,
    GUID *Uid,
    WCHAR *Prefix,
    ULONG Type);

NET_API_STATUS __stdcall NetrDfsModifyPrefix(
    SRVSVC_HANDLE ServerName,
    GUID *Uid,
    WCHAR *Prefix);

NET_API_STATUS __stdcall NetrDfsFixLocalVolume(
    SRVSVC_HANDLE ServerName,
    WCHAR *VolumeName,
    ULONG EntryType,
    ULONG ServiceType,
    WCHAR *StgId,
    GUID *EntryUid,
    WCHAR *EntryPrefix,
    LPNET_DFS_ENTRY_ID_CONTAINER RelationInfo,
    ULONG CreateDisposition);

NET_API_STATUS __stdcall NetrDfsManagerReportSiteInfo(
    SRVSVC_HANDLE ServerName,
    LPDFS_SITELIST_INFO *ppSiteInfo);

NET_API_STATUS __stdcall NetrServerTransportDelEx(
    SRVSVC_HANDLE ServerName,
    DWORD Level,
    LPTRANSPORT_INFO Buffer);


#endif  /* __srvsvc_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

handle_t __RPC_USER SRVSVC_HANDLE_bind(SRVSVC_HANDLE);
void __RPC_USER SRVSVC_HANDLE_unbind(SRVSVC_HANDLE, handle_t);
void __RPC_USER SHARE_DEL_HANDLE_rundown(SHARE_DEL_HANDLE);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __srvsvc_c_h__ */
