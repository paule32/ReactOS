/*** Autogenerated by WIDL <undefined version> from /home/jens/winos/reactos/dll/win32/wshom.ocx/wshom.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifdef __REACTOS__
#define WIN32_LEAN_AND_MEAN
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __wshom_h__
#define __wshom_h__

/* Forward declarations */

#ifndef __ITextStream_FWD_DEFINED__
#define __ITextStream_FWD_DEFINED__
typedef interface ITextStream ITextStream;
#ifdef __cplusplus
interface ITextStream;
#endif /* __cplusplus */
#endif

#ifndef __IDrive_FWD_DEFINED__
#define __IDrive_FWD_DEFINED__
typedef interface IDrive IDrive;
#ifdef __cplusplus
interface IDrive;
#endif /* __cplusplus */
#endif

#ifndef __IFile_FWD_DEFINED__
#define __IFile_FWD_DEFINED__
typedef interface IFile IFile;
#ifdef __cplusplus
interface IFile;
#endif /* __cplusplus */
#endif

#ifndef __IFileCollection_FWD_DEFINED__
#define __IFileCollection_FWD_DEFINED__
typedef interface IFileCollection IFileCollection;
#ifdef __cplusplus
interface IFileCollection;
#endif /* __cplusplus */
#endif

#ifndef __IFolder_FWD_DEFINED__
#define __IFolder_FWD_DEFINED__
typedef interface IFolder IFolder;
#ifdef __cplusplus
interface IFolder;
#endif /* __cplusplus */
#endif

#ifndef __IFolderCollection_FWD_DEFINED__
#define __IFolderCollection_FWD_DEFINED__
typedef interface IFolderCollection IFolderCollection;
#ifdef __cplusplus
interface IFolderCollection;
#endif /* __cplusplus */
#endif

#ifndef __IWshCollection_FWD_DEFINED__
#define __IWshCollection_FWD_DEFINED__
typedef interface IWshCollection IWshCollection;
#ifdef __cplusplus
interface IWshCollection;
#endif /* __cplusplus */
#endif

#ifndef __IWshEnvironment_FWD_DEFINED__
#define __IWshEnvironment_FWD_DEFINED__
typedef interface IWshEnvironment IWshEnvironment;
#ifdef __cplusplus
interface IWshEnvironment;
#endif /* __cplusplus */
#endif

#ifndef __IWshExec_FWD_DEFINED__
#define __IWshExec_FWD_DEFINED__
typedef interface IWshExec IWshExec;
#ifdef __cplusplus
interface IWshExec;
#endif /* __cplusplus */
#endif

#ifndef __IWshShortcut_FWD_DEFINED__
#define __IWshShortcut_FWD_DEFINED__
typedef interface IWshShortcut IWshShortcut;
#ifdef __cplusplus
interface IWshShortcut;
#endif /* __cplusplus */
#endif

#ifndef __IWshShell_FWD_DEFINED__
#define __IWshShell_FWD_DEFINED__
typedef interface IWshShell IWshShell;
#ifdef __cplusplus
interface IWshShell;
#endif /* __cplusplus */
#endif

#ifndef __IWshShell2_FWD_DEFINED__
#define __IWshShell2_FWD_DEFINED__
typedef interface IWshShell2 IWshShell2;
#ifdef __cplusplus
interface IWshShell2;
#endif /* __cplusplus */
#endif

#ifndef __IWshShell3_FWD_DEFINED__
#define __IWshShell3_FWD_DEFINED__
typedef interface IWshShell3 IWshShell3;
#ifdef __cplusplus
interface IWshShell3;
#endif /* __cplusplus */
#endif

#ifndef __IWshNetwork2_FWD_DEFINED__
#define __IWshNetwork2_FWD_DEFINED__
typedef interface IWshNetwork2 IWshNetwork2;
#ifdef __cplusplus
interface IWshNetwork2;
#endif /* __cplusplus */
#endif

#ifndef __IWshShell_Class_FWD_DEFINED__
#define __IWshShell_Class_FWD_DEFINED__
#ifdef __cplusplus
typedef class IWshShell_Class IWshShell_Class;
#else
typedef struct IWshShell_Class IWshShell_Class;
#endif /* defined __cplusplus */
#endif /* defined __IWshShell_Class_FWD_DEFINED__ */

#ifndef __WshShell_FWD_DEFINED__
#define __WshShell_FWD_DEFINED__
#ifdef __cplusplus
typedef class WshShell WshShell;
#else
typedef struct WshShell WshShell;
#endif /* defined __cplusplus */
#endif /* defined __WshShell_FWD_DEFINED__ */

#ifndef __IWshNetwork_Class_FWD_DEFINED__
#define __IWshNetwork_Class_FWD_DEFINED__
#ifdef __cplusplus
typedef class IWshNetwork_Class IWshNetwork_Class;
#else
typedef struct IWshNetwork_Class IWshNetwork_Class;
#endif /* defined __cplusplus */
#endif /* defined __IWshNetwork_Class_FWD_DEFINED__ */

#ifndef __WshNetwork_FWD_DEFINED__
#define __WshNetwork_FWD_DEFINED__
#ifdef __cplusplus
typedef class WshNetwork WshNetwork;
#else
typedef struct WshNetwork WshNetwork;
#endif /* defined __cplusplus */
#endif /* defined __WshNetwork_FWD_DEFINED__ */

#ifndef __WshExec_FWD_DEFINED__
#define __WshExec_FWD_DEFINED__
#ifdef __cplusplus
typedef class WshExec WshExec;
#else
typedef struct WshExec WshExec;
#endif /* defined __cplusplus */
#endif /* defined __WshExec_FWD_DEFINED__ */

/* Headers for imported files */

#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#undef ExpandEnvironmentStrings

DEFINE_GUID(LIBID_IWshRuntimeLibrary, 0xf935dc20, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);

typedef enum __WIDL_wshom_generated_name_00000001 {
    WshRunning = 0,
    WshFinished = 1,
    WshFailed = 2
} WshExecStatus;
typedef enum __WIDL_wshom_generated_name_00000002 {
    UnknownType = 0,
    Removable = 1,
    Fixed = 2,
    Remote = 3,
    CDRom = 4,
    RamDisk = 5
} DriveTypeConst;
typedef enum __WIDL_wshom_generated_name_00000003 {
    Normal = 0x0,
    ReadOnly = 0x1,
    Hidden = 0x2,
    System = 0x4,
    Volume = 0x8,
    Directory = 0x10,
    Archive = 0x20,
    Alias = 0x400,
    Compressed = 0x800
} FileAttribute;
typedef enum __WIDL_wshom_generated_name_00000004 {
    ForReading = 0x1,
    ForWriting = 0x2,
    ForAppending = 0x8
} IOMode;
typedef enum __WIDL_wshom_generated_name_00000005 {
    TristateTrue = -1,
    TristateFalse = 0,
    TristateUseDefault = -2,
    TristateMixed = -2
} Tristate;
#ifndef __IFolder_FWD_DEFINED__
#define __IFolder_FWD_DEFINED__
typedef interface IFolder IFolder;
#ifdef __cplusplus
interface IFolder;
#endif /* __cplusplus */
#endif

#ifndef __IFolderCollection_FWD_DEFINED__
#define __IFolderCollection_FWD_DEFINED__
typedef interface IFolderCollection IFolderCollection;
#ifdef __cplusplus
interface IFolderCollection;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * ITextStream interface
 */
#ifndef __ITextStream_INTERFACE_DEFINED__
#define __ITextStream_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53bad8c1-e718-11cf-893d-00a0c9054228")
ITextStream : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Line(
        LONG *Line) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Column(
        LONG *Column) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfStream(
        VARIANT_BOOL *EOS) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AtEndOfLine(
        VARIANT_BOOL *EOL) = 0;

    virtual HRESULT STDMETHODCALLTYPE Read(
        LONG Characters,
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadLine(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadAll(
        BSTR *Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE Write(
        BSTR Text) = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteLine(
        BSTR Text = L"") = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteBlankLines(
        LONG Lines) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        LONG Characters) = 0;

    virtual HRESULT STDMETHODCALLTYPE SkipLine(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Close(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITextStream, 0x53bad8c1, 0xe718, 0x11cf, 0x89,0x3d, 0x00,0xa0,0xc9,0x05,0x42,0x28)
#endif
#else
typedef struct ITextStreamVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITextStream *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITextStream *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITextStream *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITextStream *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITextStream *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITextStream *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITextStream *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITextStream methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Line)(
        ITextStream *This,
        LONG *Line);

    HRESULT (STDMETHODCALLTYPE *get_Column)(
        ITextStream *This,
        LONG *Column);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfStream)(
        ITextStream *This,
        VARIANT_BOOL *EOS);

    HRESULT (STDMETHODCALLTYPE *get_AtEndOfLine)(
        ITextStream *This,
        VARIANT_BOOL *EOL);

    HRESULT (STDMETHODCALLTYPE *Read)(
        ITextStream *This,
        LONG Characters,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadLine)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *ReadAll)(
        ITextStream *This,
        BSTR *Text);

    HRESULT (STDMETHODCALLTYPE *Write)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteLine)(
        ITextStream *This,
        BSTR Text);

    HRESULT (STDMETHODCALLTYPE *WriteBlankLines)(
        ITextStream *This,
        LONG Lines);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        ITextStream *This,
        LONG Characters);

    HRESULT (STDMETHODCALLTYPE *SkipLine)(
        ITextStream *This);

    HRESULT (STDMETHODCALLTYPE *Close)(
        ITextStream *This);

    END_INTERFACE
} ITextStreamVtbl;

interface ITextStream {
    CONST_VTBL ITextStreamVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITextStream_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITextStream_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITextStream_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITextStream_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITextStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITextStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITextStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITextStream methods ***/
#define ITextStream_get_Line(This,Line) (This)->lpVtbl->get_Line(This,Line)
#define ITextStream_get_Column(This,Column) (This)->lpVtbl->get_Column(This,Column)
#define ITextStream_get_AtEndOfStream(This,EOS) (This)->lpVtbl->get_AtEndOfStream(This,EOS)
#define ITextStream_get_AtEndOfLine(This,EOL) (This)->lpVtbl->get_AtEndOfLine(This,EOL)
#define ITextStream_Read(This,Characters,Text) (This)->lpVtbl->Read(This,Characters,Text)
#define ITextStream_ReadLine(This,Text) (This)->lpVtbl->ReadLine(This,Text)
#define ITextStream_ReadAll(This,Text) (This)->lpVtbl->ReadAll(This,Text)
#define ITextStream_Write(This,Text) (This)->lpVtbl->Write(This,Text)
#define ITextStream_WriteLine(This,Text) (This)->lpVtbl->WriteLine(This,Text)
#define ITextStream_WriteBlankLines(This,Lines) (This)->lpVtbl->WriteBlankLines(This,Lines)
#define ITextStream_Skip(This,Characters) (This)->lpVtbl->Skip(This,Characters)
#define ITextStream_SkipLine(This) (This)->lpVtbl->SkipLine(This)
#define ITextStream_Close(This) (This)->lpVtbl->Close(This)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT ITextStream_QueryInterface(ITextStream* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG ITextStream_AddRef(ITextStream* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG ITextStream_Release(ITextStream* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT ITextStream_GetTypeInfoCount(ITextStream* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT ITextStream_GetTypeInfo(ITextStream* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT ITextStream_GetIDsOfNames(ITextStream* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT ITextStream_Invoke(ITextStream* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITextStream methods ***/
FORCEINLINE HRESULT ITextStream_get_Line(ITextStream* This,LONG *Line) {
    return This->lpVtbl->get_Line(This,Line);
}
FORCEINLINE HRESULT ITextStream_get_Column(ITextStream* This,LONG *Column) {
    return This->lpVtbl->get_Column(This,Column);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfStream(ITextStream* This,VARIANT_BOOL *EOS) {
    return This->lpVtbl->get_AtEndOfStream(This,EOS);
}
FORCEINLINE HRESULT ITextStream_get_AtEndOfLine(ITextStream* This,VARIANT_BOOL *EOL) {
    return This->lpVtbl->get_AtEndOfLine(This,EOL);
}
FORCEINLINE HRESULT ITextStream_Read(ITextStream* This,LONG Characters,BSTR *Text) {
    return This->lpVtbl->Read(This,Characters,Text);
}
FORCEINLINE HRESULT ITextStream_ReadLine(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_ReadAll(ITextStream* This,BSTR *Text) {
    return This->lpVtbl->ReadAll(This,Text);
}
FORCEINLINE HRESULT ITextStream_Write(ITextStream* This,BSTR Text) {
    return This->lpVtbl->Write(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteLine(ITextStream* This,BSTR Text) {
    return This->lpVtbl->WriteLine(This,Text);
}
FORCEINLINE HRESULT ITextStream_WriteBlankLines(ITextStream* This,LONG Lines) {
    return This->lpVtbl->WriteBlankLines(This,Lines);
}
FORCEINLINE HRESULT ITextStream_Skip(ITextStream* This,LONG Characters) {
    return This->lpVtbl->Skip(This,Characters);
}
FORCEINLINE HRESULT ITextStream_SkipLine(ITextStream* This) {
    return This->lpVtbl->SkipLine(This);
}
FORCEINLINE HRESULT ITextStream_Close(ITextStream* This) {
    return This->lpVtbl->Close(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ITextStream_get_Line_Proxy(
    ITextStream* This,
    LONG *Line);
void __RPC_STUB ITextStream_get_Line_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_Column_Proxy(
    ITextStream* This,
    LONG *Column);
void __RPC_STUB ITextStream_get_Column_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfStream_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOS);
void __RPC_STUB ITextStream_get_AtEndOfStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_get_AtEndOfLine_Proxy(
    ITextStream* This,
    VARIANT_BOOL *EOL);
void __RPC_STUB ITextStream_get_AtEndOfLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Read_Proxy(
    ITextStream* This,
    LONG Characters,
    BSTR *Text);
void __RPC_STUB ITextStream_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadLine_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_ReadAll_Proxy(
    ITextStream* This,
    BSTR *Text);
void __RPC_STUB ITextStream_ReadAll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Write_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteLine_Proxy(
    ITextStream* This,
    BSTR Text);
void __RPC_STUB ITextStream_WriteLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_WriteBlankLines_Proxy(
    ITextStream* This,
    LONG Lines);
void __RPC_STUB ITextStream_WriteBlankLines_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Skip_Proxy(
    ITextStream* This,
    LONG Characters);
void __RPC_STUB ITextStream_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_SkipLine_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_SkipLine_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITextStream_Close_Proxy(
    ITextStream* This);
void __RPC_STUB ITextStream_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ITextStream_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDrive interface
 */
#ifndef __IDrive_INTERFACE_DEFINED__
#define __IDrive_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDrive, 0xc7c3f5a0, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a0-88a3-11d0-abcb-00a0c90fffc0")
IDrive : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DriveLetter(
        BSTR *letter) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShareName(
        BSTR *ShareName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DriveType(
        DriveTypeConst *type) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RootFolder(
        IFolder **folder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AvailableSpace(
        VARIANT *Avail) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FreeSpace(
        VARIANT *pFree) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TotalSize(
        VARIANT *Total) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VolumeName(
        BSTR *Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VolumeName(
        BSTR Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FileSystem(
        BSTR *pFileSystem) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SerialNumber(
        LONG *SerialNumber) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsReady(
        VARIANT_BOOL *pfReady) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDrive, 0xc7c3f5a0, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IDriveVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDrive *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDrive *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDrive *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDrive *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDrive *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDrive *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDrive *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDrive methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IDrive *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_DriveLetter)(
        IDrive *This,
        BSTR *letter);

    HRESULT (STDMETHODCALLTYPE *get_ShareName)(
        IDrive *This,
        BSTR *ShareName);

    HRESULT (STDMETHODCALLTYPE *get_DriveType)(
        IDrive *This,
        DriveTypeConst *type);

    HRESULT (STDMETHODCALLTYPE *get_RootFolder)(
        IDrive *This,
        IFolder **folder);

    HRESULT (STDMETHODCALLTYPE *get_AvailableSpace)(
        IDrive *This,
        VARIANT *Avail);

    HRESULT (STDMETHODCALLTYPE *get_FreeSpace)(
        IDrive *This,
        VARIANT *pFree);

    HRESULT (STDMETHODCALLTYPE *get_TotalSize)(
        IDrive *This,
        VARIANT *Total);

    HRESULT (STDMETHODCALLTYPE *get_VolumeName)(
        IDrive *This,
        BSTR *Name);

    HRESULT (STDMETHODCALLTYPE *put_VolumeName)(
        IDrive *This,
        BSTR Name);

    HRESULT (STDMETHODCALLTYPE *get_FileSystem)(
        IDrive *This,
        BSTR *pFileSystem);

    HRESULT (STDMETHODCALLTYPE *get_SerialNumber)(
        IDrive *This,
        LONG *SerialNumber);

    HRESULT (STDMETHODCALLTYPE *get_IsReady)(
        IDrive *This,
        VARIANT_BOOL *pfReady);

    END_INTERFACE
} IDriveVtbl;

interface IDrive {
    CONST_VTBL IDriveVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDrive_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDrive_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDrive_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDrive_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDrive_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDrive_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDrive_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDrive methods ***/
#define IDrive_get_Path(This,path) (This)->lpVtbl->get_Path(This,path)
#define IDrive_get_DriveLetter(This,letter) (This)->lpVtbl->get_DriveLetter(This,letter)
#define IDrive_get_ShareName(This,ShareName) (This)->lpVtbl->get_ShareName(This,ShareName)
#define IDrive_get_DriveType(This,type) (This)->lpVtbl->get_DriveType(This,type)
#define IDrive_get_RootFolder(This,folder) (This)->lpVtbl->get_RootFolder(This,folder)
#define IDrive_get_AvailableSpace(This,Avail) (This)->lpVtbl->get_AvailableSpace(This,Avail)
#define IDrive_get_FreeSpace(This,pFree) (This)->lpVtbl->get_FreeSpace(This,pFree)
#define IDrive_get_TotalSize(This,Total) (This)->lpVtbl->get_TotalSize(This,Total)
#define IDrive_get_VolumeName(This,Name) (This)->lpVtbl->get_VolumeName(This,Name)
#define IDrive_put_VolumeName(This,Name) (This)->lpVtbl->put_VolumeName(This,Name)
#define IDrive_get_FileSystem(This,pFileSystem) (This)->lpVtbl->get_FileSystem(This,pFileSystem)
#define IDrive_get_SerialNumber(This,SerialNumber) (This)->lpVtbl->get_SerialNumber(This,SerialNumber)
#define IDrive_get_IsReady(This,pfReady) (This)->lpVtbl->get_IsReady(This,pfReady)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IDrive_QueryInterface(IDrive* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IDrive_AddRef(IDrive* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IDrive_Release(IDrive* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IDrive_GetTypeInfoCount(IDrive* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IDrive_GetTypeInfo(IDrive* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IDrive_GetIDsOfNames(IDrive* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IDrive_Invoke(IDrive* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDrive methods ***/
FORCEINLINE HRESULT IDrive_get_Path(IDrive* This,BSTR *path) {
    return This->lpVtbl->get_Path(This,path);
}
FORCEINLINE HRESULT IDrive_get_DriveLetter(IDrive* This,BSTR *letter) {
    return This->lpVtbl->get_DriveLetter(This,letter);
}
FORCEINLINE HRESULT IDrive_get_ShareName(IDrive* This,BSTR *ShareName) {
    return This->lpVtbl->get_ShareName(This,ShareName);
}
FORCEINLINE HRESULT IDrive_get_DriveType(IDrive* This,DriveTypeConst *type) {
    return This->lpVtbl->get_DriveType(This,type);
}
FORCEINLINE HRESULT IDrive_get_RootFolder(IDrive* This,IFolder **folder) {
    return This->lpVtbl->get_RootFolder(This,folder);
}
FORCEINLINE HRESULT IDrive_get_AvailableSpace(IDrive* This,VARIANT *Avail) {
    return This->lpVtbl->get_AvailableSpace(This,Avail);
}
FORCEINLINE HRESULT IDrive_get_FreeSpace(IDrive* This,VARIANT *pFree) {
    return This->lpVtbl->get_FreeSpace(This,pFree);
}
FORCEINLINE HRESULT IDrive_get_TotalSize(IDrive* This,VARIANT *Total) {
    return This->lpVtbl->get_TotalSize(This,Total);
}
FORCEINLINE HRESULT IDrive_get_VolumeName(IDrive* This,BSTR *Name) {
    return This->lpVtbl->get_VolumeName(This,Name);
}
FORCEINLINE HRESULT IDrive_put_VolumeName(IDrive* This,BSTR Name) {
    return This->lpVtbl->put_VolumeName(This,Name);
}
FORCEINLINE HRESULT IDrive_get_FileSystem(IDrive* This,BSTR *pFileSystem) {
    return This->lpVtbl->get_FileSystem(This,pFileSystem);
}
FORCEINLINE HRESULT IDrive_get_SerialNumber(IDrive* This,LONG *SerialNumber) {
    return This->lpVtbl->get_SerialNumber(This,SerialNumber);
}
FORCEINLINE HRESULT IDrive_get_IsReady(IDrive* This,VARIANT_BOOL *pfReady) {
    return This->lpVtbl->get_IsReady(This,pfReady);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IDrive_get_Path_Proxy(
    IDrive* This,
    BSTR *path);
void __RPC_STUB IDrive_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_DriveLetter_Proxy(
    IDrive* This,
    BSTR *letter);
void __RPC_STUB IDrive_get_DriveLetter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_ShareName_Proxy(
    IDrive* This,
    BSTR *ShareName);
void __RPC_STUB IDrive_get_ShareName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_DriveType_Proxy(
    IDrive* This,
    DriveTypeConst *type);
void __RPC_STUB IDrive_get_DriveType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_RootFolder_Proxy(
    IDrive* This,
    IFolder **folder);
void __RPC_STUB IDrive_get_RootFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_AvailableSpace_Proxy(
    IDrive* This,
    VARIANT *Avail);
void __RPC_STUB IDrive_get_AvailableSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_FreeSpace_Proxy(
    IDrive* This,
    VARIANT *pFree);
void __RPC_STUB IDrive_get_FreeSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_TotalSize_Proxy(
    IDrive* This,
    VARIANT *Total);
void __RPC_STUB IDrive_get_TotalSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_VolumeName_Proxy(
    IDrive* This,
    BSTR *Name);
void __RPC_STUB IDrive_get_VolumeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_put_VolumeName_Proxy(
    IDrive* This,
    BSTR Name);
void __RPC_STUB IDrive_put_VolumeName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_FileSystem_Proxy(
    IDrive* This,
    BSTR *pFileSystem);
void __RPC_STUB IDrive_get_FileSystem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_SerialNumber_Proxy(
    IDrive* This,
    LONG *SerialNumber);
void __RPC_STUB IDrive_get_SerialNumber_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IDrive_get_IsReady_Proxy(
    IDrive* This,
    VARIANT_BOOL *pfReady);
void __RPC_STUB IDrive_get_IsReady_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IDrive_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFile interface
 */
#ifndef __IFile_INTERFACE_DEFINED__
#define __IFile_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFile, 0xc7c3f5a4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a4-88a3-11d0-abcb-00a0c90fffc0")
IFile : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortPath(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortName(
        BSTR *Name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Drive(
        IDrive **drive) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParentFolder(
        IFolder **folder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Attributes(
        FileAttribute *attr) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Attributes(
        FileAttribute attr) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateCreated(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastAccessed(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        VARIANT *Size) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        BSTR *Type) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delete(
        VARIANT_BOOL Force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE Move(
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenAsTextStream(
        IOMode IOMode,
        Tristate Format,
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFile, 0xc7c3f5a4, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFileVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFile *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFile *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFile *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFile *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFile *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFile *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFile *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFile methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IFile *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFile *This,
        BSTR *Name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFile *This,
        BSTR Name);

    HRESULT (STDMETHODCALLTYPE *get_ShortPath)(
        IFile *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_ShortName)(
        IFile *This,
        BSTR *Name);

    HRESULT (STDMETHODCALLTYPE *get_Drive)(
        IFile *This,
        IDrive **drive);

    HRESULT (STDMETHODCALLTYPE *get_ParentFolder)(
        IFile *This,
        IFolder **folder);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFile *This,
        FileAttribute *attr);

    HRESULT (STDMETHODCALLTYPE *put_Attributes)(
        IFile *This,
        FileAttribute attr);

    HRESULT (STDMETHODCALLTYPE *get_DateCreated)(
        IFile *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_DateLastModified)(
        IFile *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_DateLastAccessed)(
        IFile *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFile *This,
        VARIANT *Size);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFile *This,
        BSTR *Type);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFile *This,
        VARIANT_BOOL Force);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IFile *This,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *Move)(
        IFile *This,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *OpenAsTextStream)(
        IFile *This,
        IOMode IOMode,
        Tristate Format,
        ITextStream **ppts);

    END_INTERFACE
} IFileVtbl;

interface IFile {
    CONST_VTBL IFileVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFile_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFile_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFile_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFile_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFile_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFile methods ***/
#define IFile_get_Path(This,path) (This)->lpVtbl->get_Path(This,path)
#define IFile_get_Name(This,Name) (This)->lpVtbl->get_Name(This,Name)
#define IFile_put_Name(This,Name) (This)->lpVtbl->put_Name(This,Name)
#define IFile_get_ShortPath(This,path) (This)->lpVtbl->get_ShortPath(This,path)
#define IFile_get_ShortName(This,Name) (This)->lpVtbl->get_ShortName(This,Name)
#define IFile_get_Drive(This,drive) (This)->lpVtbl->get_Drive(This,drive)
#define IFile_get_ParentFolder(This,folder) (This)->lpVtbl->get_ParentFolder(This,folder)
#define IFile_get_Attributes(This,attr) (This)->lpVtbl->get_Attributes(This,attr)
#define IFile_put_Attributes(This,attr) (This)->lpVtbl->put_Attributes(This,attr)
#define IFile_get_DateCreated(This,date) (This)->lpVtbl->get_DateCreated(This,date)
#define IFile_get_DateLastModified(This,date) (This)->lpVtbl->get_DateLastModified(This,date)
#define IFile_get_DateLastAccessed(This,date) (This)->lpVtbl->get_DateLastAccessed(This,date)
#define IFile_get_Size(This,Size) (This)->lpVtbl->get_Size(This,Size)
#define IFile_get_Type(This,Type) (This)->lpVtbl->get_Type(This,Type)
#define IFile_Delete(This,Force) (This)->lpVtbl->Delete(This,Force)
#define IFile_Copy(This,Destination,OverWriteFiles) (This)->lpVtbl->Copy(This,Destination,OverWriteFiles)
#define IFile_Move(This,Destination) (This)->lpVtbl->Move(This,Destination)
#define IFile_OpenAsTextStream(This,IOMode,Format,ppts) (This)->lpVtbl->OpenAsTextStream(This,IOMode,Format,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFile_QueryInterface(IFile* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFile_AddRef(IFile* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFile_Release(IFile* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFile_GetTypeInfoCount(IFile* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFile_GetTypeInfo(IFile* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFile_GetIDsOfNames(IFile* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFile_Invoke(IFile* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFile methods ***/
FORCEINLINE HRESULT IFile_get_Path(IFile* This,BSTR *path) {
    return This->lpVtbl->get_Path(This,path);
}
FORCEINLINE HRESULT IFile_get_Name(IFile* This,BSTR *Name) {
    return This->lpVtbl->get_Name(This,Name);
}
FORCEINLINE HRESULT IFile_put_Name(IFile* This,BSTR Name) {
    return This->lpVtbl->put_Name(This,Name);
}
FORCEINLINE HRESULT IFile_get_ShortPath(IFile* This,BSTR *path) {
    return This->lpVtbl->get_ShortPath(This,path);
}
FORCEINLINE HRESULT IFile_get_ShortName(IFile* This,BSTR *Name) {
    return This->lpVtbl->get_ShortName(This,Name);
}
FORCEINLINE HRESULT IFile_get_Drive(IFile* This,IDrive **drive) {
    return This->lpVtbl->get_Drive(This,drive);
}
FORCEINLINE HRESULT IFile_get_ParentFolder(IFile* This,IFolder **folder) {
    return This->lpVtbl->get_ParentFolder(This,folder);
}
FORCEINLINE HRESULT IFile_get_Attributes(IFile* This,FileAttribute *attr) {
    return This->lpVtbl->get_Attributes(This,attr);
}
FORCEINLINE HRESULT IFile_put_Attributes(IFile* This,FileAttribute attr) {
    return This->lpVtbl->put_Attributes(This,attr);
}
FORCEINLINE HRESULT IFile_get_DateCreated(IFile* This,DATE *date) {
    return This->lpVtbl->get_DateCreated(This,date);
}
FORCEINLINE HRESULT IFile_get_DateLastModified(IFile* This,DATE *date) {
    return This->lpVtbl->get_DateLastModified(This,date);
}
FORCEINLINE HRESULT IFile_get_DateLastAccessed(IFile* This,DATE *date) {
    return This->lpVtbl->get_DateLastAccessed(This,date);
}
FORCEINLINE HRESULT IFile_get_Size(IFile* This,VARIANT *Size) {
    return This->lpVtbl->get_Size(This,Size);
}
FORCEINLINE HRESULT IFile_get_Type(IFile* This,BSTR *Type) {
    return This->lpVtbl->get_Type(This,Type);
}
FORCEINLINE HRESULT IFile_Delete(IFile* This,VARIANT_BOOL Force) {
    return This->lpVtbl->Delete(This,Force);
}
FORCEINLINE HRESULT IFile_Copy(IFile* This,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->Copy(This,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFile_Move(IFile* This,BSTR Destination) {
    return This->lpVtbl->Move(This,Destination);
}
FORCEINLINE HRESULT IFile_OpenAsTextStream(IFile* This,IOMode IOMode,Tristate Format,ITextStream **ppts) {
    return This->lpVtbl->OpenAsTextStream(This,IOMode,Format,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFile_get_Path_Proxy(
    IFile* This,
    BSTR *path);
void __RPC_STUB IFile_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Name_Proxy(
    IFile* This,
    BSTR *Name);
void __RPC_STUB IFile_get_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_put_Name_Proxy(
    IFile* This,
    BSTR Name);
void __RPC_STUB IFile_put_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ShortPath_Proxy(
    IFile* This,
    BSTR *path);
void __RPC_STUB IFile_get_ShortPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ShortName_Proxy(
    IFile* This,
    BSTR *Name);
void __RPC_STUB IFile_get_ShortName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Drive_Proxy(
    IFile* This,
    IDrive **drive);
void __RPC_STUB IFile_get_Drive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_ParentFolder_Proxy(
    IFile* This,
    IFolder **folder);
void __RPC_STUB IFile_get_ParentFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Attributes_Proxy(
    IFile* This,
    FileAttribute *attr);
void __RPC_STUB IFile_get_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_put_Attributes_Proxy(
    IFile* This,
    FileAttribute attr);
void __RPC_STUB IFile_put_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateCreated_Proxy(
    IFile* This,
    DATE *date);
void __RPC_STUB IFile_get_DateCreated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateLastModified_Proxy(
    IFile* This,
    DATE *date);
void __RPC_STUB IFile_get_DateLastModified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_DateLastAccessed_Proxy(
    IFile* This,
    DATE *date);
void __RPC_STUB IFile_get_DateLastAccessed_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Size_Proxy(
    IFile* This,
    VARIANT *Size);
void __RPC_STUB IFile_get_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_get_Type_Proxy(
    IFile* This,
    BSTR *Type);
void __RPC_STUB IFile_get_Type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Delete_Proxy(
    IFile* This,
    VARIANT_BOOL Force);
void __RPC_STUB IFile_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Copy_Proxy(
    IFile* This,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFile_Copy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_Move_Proxy(
    IFile* This,
    BSTR Destination);
void __RPC_STUB IFile_Move_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFile_OpenAsTextStream_Proxy(
    IFile* This,
    IOMode IOMode,
    Tristate Format,
    ITextStream **ppts);
void __RPC_STUB IFile_OpenAsTextStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFile_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFileCollection interface
 */
#ifndef __IFileCollection_INTERFACE_DEFINED__
#define __IFileCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileCollection, 0xc7c3f5a5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a5-88a3-11d0-abcb-00a0c90fffc0")
IFileCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Key,
        IFile **ppfile) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *count) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileCollection, 0xc7c3f5a5, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFileCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFileCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFileCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFileCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFileCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFileCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IFileCollection *This,
        VARIANT Key,
        IFile **ppfile);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IFileCollection *This,
        IUnknown **ppenum);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IFileCollection *This,
        LONG *count);

    END_INTERFACE
} IFileCollectionVtbl;

interface IFileCollection {
    CONST_VTBL IFileCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFileCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFileCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFileCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFileCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFileCollection methods ***/
#define IFileCollection_get_Item(This,Key,ppfile) (This)->lpVtbl->get_Item(This,Key,ppfile)
#define IFileCollection_get__NewEnum(This,ppenum) (This)->lpVtbl->get__NewEnum(This,ppenum)
#define IFileCollection_get_Count(This,count) (This)->lpVtbl->get_Count(This,count)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFileCollection_QueryInterface(IFileCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFileCollection_AddRef(IFileCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFileCollection_Release(IFileCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFileCollection_GetTypeInfoCount(IFileCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFileCollection_GetTypeInfo(IFileCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFileCollection_GetIDsOfNames(IFileCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFileCollection_Invoke(IFileCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFileCollection methods ***/
FORCEINLINE HRESULT IFileCollection_get_Item(IFileCollection* This,VARIANT Key,IFile **ppfile) {
    return This->lpVtbl->get_Item(This,Key,ppfile);
}
FORCEINLINE HRESULT IFileCollection_get__NewEnum(IFileCollection* This,IUnknown **ppenum) {
    return This->lpVtbl->get__NewEnum(This,ppenum);
}
FORCEINLINE HRESULT IFileCollection_get_Count(IFileCollection* This,LONG *count) {
    return This->lpVtbl->get_Count(This,count);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFileCollection_get_Item_Proxy(
    IFileCollection* This,
    VARIANT Key,
    IFile **ppfile);
void __RPC_STUB IFileCollection_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileCollection_get__NewEnum_Proxy(
    IFileCollection* This,
    IUnknown **ppenum);
void __RPC_STUB IFileCollection_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFileCollection_get_Count_Proxy(
    IFileCollection* This,
    LONG *count);
void __RPC_STUB IFileCollection_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFileCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFolder interface
 */
#ifndef __IFolder_INTERFACE_DEFINED__
#define __IFolder_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFolder, 0xc7c3f5a2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a2-88a3-11d0-abcb-00a0c90fffc0")
IFolder : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Path(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortPath(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShortName(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Drive(
        IDrive **drive) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParentFolder(
        IFolder **folder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Attributes(
        FileAttribute *attr) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Attributes(
        FileAttribute attr) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateCreated(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DateLastAccessed(
        DATE *date) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        BSTR *type) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delete(
        VARIANT_BOOL force = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles = -1) = 0;

    virtual HRESULT STDMETHODCALLTYPE Move(
        BSTR Destination) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsRootFolder(
        VARIANT_BOOL *root) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        VARIANT *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SubFolders(
        IFolderCollection **folders) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Files(
        IFileCollection **files) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateTextFile(
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFolder, 0xc7c3f5a2, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFolderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFolder *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFolder *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFolder *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFolder *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFolder *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFolder *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFolder *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFolder methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Path)(
        IFolder *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFolder *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFolder *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_ShortPath)(
        IFolder *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_ShortName)(
        IFolder *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_Drive)(
        IFolder *This,
        IDrive **drive);

    HRESULT (STDMETHODCALLTYPE *get_ParentFolder)(
        IFolder *This,
        IFolder **folder);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFolder *This,
        FileAttribute *attr);

    HRESULT (STDMETHODCALLTYPE *put_Attributes)(
        IFolder *This,
        FileAttribute attr);

    HRESULT (STDMETHODCALLTYPE *get_DateCreated)(
        IFolder *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_DateLastModified)(
        IFolder *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_DateLastAccessed)(
        IFolder *This,
        DATE *date);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFolder *This,
        BSTR *type);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFolder *This,
        VARIANT_BOOL force);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IFolder *This,
        BSTR Destination,
        VARIANT_BOOL OverWriteFiles);

    HRESULT (STDMETHODCALLTYPE *Move)(
        IFolder *This,
        BSTR Destination);

    HRESULT (STDMETHODCALLTYPE *get_IsRootFolder)(
        IFolder *This,
        VARIANT_BOOL *root);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFolder *This,
        VARIANT *size);

    HRESULT (STDMETHODCALLTYPE *get_SubFolders)(
        IFolder *This,
        IFolderCollection **folders);

    HRESULT (STDMETHODCALLTYPE *get_Files)(
        IFolder *This,
        IFileCollection **files);

    HRESULT (STDMETHODCALLTYPE *CreateTextFile)(
        IFolder *This,
        BSTR FileName,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL Unicode,
        ITextStream **ppts);

    END_INTERFACE
} IFolderVtbl;

interface IFolder {
    CONST_VTBL IFolderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFolder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFolder_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFolder_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFolder_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFolder_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFolder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFolder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFolder methods ***/
#define IFolder_get_Path(This,path) (This)->lpVtbl->get_Path(This,path)
#define IFolder_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFolder_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFolder_get_ShortPath(This,path) (This)->lpVtbl->get_ShortPath(This,path)
#define IFolder_get_ShortName(This,name) (This)->lpVtbl->get_ShortName(This,name)
#define IFolder_get_Drive(This,drive) (This)->lpVtbl->get_Drive(This,drive)
#define IFolder_get_ParentFolder(This,folder) (This)->lpVtbl->get_ParentFolder(This,folder)
#define IFolder_get_Attributes(This,attr) (This)->lpVtbl->get_Attributes(This,attr)
#define IFolder_put_Attributes(This,attr) (This)->lpVtbl->put_Attributes(This,attr)
#define IFolder_get_DateCreated(This,date) (This)->lpVtbl->get_DateCreated(This,date)
#define IFolder_get_DateLastModified(This,date) (This)->lpVtbl->get_DateLastModified(This,date)
#define IFolder_get_DateLastAccessed(This,date) (This)->lpVtbl->get_DateLastAccessed(This,date)
#define IFolder_get_Type(This,type) (This)->lpVtbl->get_Type(This,type)
#define IFolder_Delete(This,force) (This)->lpVtbl->Delete(This,force)
#define IFolder_Copy(This,Destination,OverWriteFiles) (This)->lpVtbl->Copy(This,Destination,OverWriteFiles)
#define IFolder_Move(This,Destination) (This)->lpVtbl->Move(This,Destination)
#define IFolder_get_IsRootFolder(This,root) (This)->lpVtbl->get_IsRootFolder(This,root)
#define IFolder_get_Size(This,size) (This)->lpVtbl->get_Size(This,size)
#define IFolder_get_SubFolders(This,folders) (This)->lpVtbl->get_SubFolders(This,folders)
#define IFolder_get_Files(This,files) (This)->lpVtbl->get_Files(This,files)
#define IFolder_CreateTextFile(This,FileName,Overwrite,Unicode,ppts) (This)->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFolder_QueryInterface(IFolder* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFolder_AddRef(IFolder* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFolder_Release(IFolder* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFolder_GetTypeInfoCount(IFolder* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFolder_GetTypeInfo(IFolder* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFolder_GetIDsOfNames(IFolder* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFolder_Invoke(IFolder* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFolder methods ***/
FORCEINLINE HRESULT IFolder_get_Path(IFolder* This,BSTR *path) {
    return This->lpVtbl->get_Path(This,path);
}
FORCEINLINE HRESULT IFolder_get_Name(IFolder* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
FORCEINLINE HRESULT IFolder_put_Name(IFolder* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
FORCEINLINE HRESULT IFolder_get_ShortPath(IFolder* This,BSTR *path) {
    return This->lpVtbl->get_ShortPath(This,path);
}
FORCEINLINE HRESULT IFolder_get_ShortName(IFolder* This,BSTR *name) {
    return This->lpVtbl->get_ShortName(This,name);
}
FORCEINLINE HRESULT IFolder_get_Drive(IFolder* This,IDrive **drive) {
    return This->lpVtbl->get_Drive(This,drive);
}
FORCEINLINE HRESULT IFolder_get_ParentFolder(IFolder* This,IFolder **folder) {
    return This->lpVtbl->get_ParentFolder(This,folder);
}
FORCEINLINE HRESULT IFolder_get_Attributes(IFolder* This,FileAttribute *attr) {
    return This->lpVtbl->get_Attributes(This,attr);
}
FORCEINLINE HRESULT IFolder_put_Attributes(IFolder* This,FileAttribute attr) {
    return This->lpVtbl->put_Attributes(This,attr);
}
FORCEINLINE HRESULT IFolder_get_DateCreated(IFolder* This,DATE *date) {
    return This->lpVtbl->get_DateCreated(This,date);
}
FORCEINLINE HRESULT IFolder_get_DateLastModified(IFolder* This,DATE *date) {
    return This->lpVtbl->get_DateLastModified(This,date);
}
FORCEINLINE HRESULT IFolder_get_DateLastAccessed(IFolder* This,DATE *date) {
    return This->lpVtbl->get_DateLastAccessed(This,date);
}
FORCEINLINE HRESULT IFolder_get_Type(IFolder* This,BSTR *type) {
    return This->lpVtbl->get_Type(This,type);
}
FORCEINLINE HRESULT IFolder_Delete(IFolder* This,VARIANT_BOOL force) {
    return This->lpVtbl->Delete(This,force);
}
FORCEINLINE HRESULT IFolder_Copy(IFolder* This,BSTR Destination,VARIANT_BOOL OverWriteFiles) {
    return This->lpVtbl->Copy(This,Destination,OverWriteFiles);
}
FORCEINLINE HRESULT IFolder_Move(IFolder* This,BSTR Destination) {
    return This->lpVtbl->Move(This,Destination);
}
FORCEINLINE HRESULT IFolder_get_IsRootFolder(IFolder* This,VARIANT_BOOL *root) {
    return This->lpVtbl->get_IsRootFolder(This,root);
}
FORCEINLINE HRESULT IFolder_get_Size(IFolder* This,VARIANT *size) {
    return This->lpVtbl->get_Size(This,size);
}
FORCEINLINE HRESULT IFolder_get_SubFolders(IFolder* This,IFolderCollection **folders) {
    return This->lpVtbl->get_SubFolders(This,folders);
}
FORCEINLINE HRESULT IFolder_get_Files(IFolder* This,IFileCollection **files) {
    return This->lpVtbl->get_Files(This,files);
}
FORCEINLINE HRESULT IFolder_CreateTextFile(IFolder* This,BSTR FileName,VARIANT_BOOL Overwrite,VARIANT_BOOL Unicode,ITextStream **ppts) {
    return This->lpVtbl->CreateTextFile(This,FileName,Overwrite,Unicode,ppts);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFolder_get_Path_Proxy(
    IFolder* This,
    BSTR *path);
void __RPC_STUB IFolder_get_Path_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Name_Proxy(
    IFolder* This,
    BSTR *name);
void __RPC_STUB IFolder_get_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_put_Name_Proxy(
    IFolder* This,
    BSTR name);
void __RPC_STUB IFolder_put_Name_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ShortPath_Proxy(
    IFolder* This,
    BSTR *path);
void __RPC_STUB IFolder_get_ShortPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ShortName_Proxy(
    IFolder* This,
    BSTR *name);
void __RPC_STUB IFolder_get_ShortName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Drive_Proxy(
    IFolder* This,
    IDrive **drive);
void __RPC_STUB IFolder_get_Drive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_ParentFolder_Proxy(
    IFolder* This,
    IFolder **folder);
void __RPC_STUB IFolder_get_ParentFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Attributes_Proxy(
    IFolder* This,
    FileAttribute *attr);
void __RPC_STUB IFolder_get_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_put_Attributes_Proxy(
    IFolder* This,
    FileAttribute attr);
void __RPC_STUB IFolder_put_Attributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateCreated_Proxy(
    IFolder* This,
    DATE *date);
void __RPC_STUB IFolder_get_DateCreated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateLastModified_Proxy(
    IFolder* This,
    DATE *date);
void __RPC_STUB IFolder_get_DateLastModified_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_DateLastAccessed_Proxy(
    IFolder* This,
    DATE *date);
void __RPC_STUB IFolder_get_DateLastAccessed_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Type_Proxy(
    IFolder* This,
    BSTR *type);
void __RPC_STUB IFolder_get_Type_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Delete_Proxy(
    IFolder* This,
    VARIANT_BOOL force);
void __RPC_STUB IFolder_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Copy_Proxy(
    IFolder* This,
    BSTR Destination,
    VARIANT_BOOL OverWriteFiles);
void __RPC_STUB IFolder_Copy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_Move_Proxy(
    IFolder* This,
    BSTR Destination);
void __RPC_STUB IFolder_Move_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_IsRootFolder_Proxy(
    IFolder* This,
    VARIANT_BOOL *root);
void __RPC_STUB IFolder_get_IsRootFolder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Size_Proxy(
    IFolder* This,
    VARIANT *size);
void __RPC_STUB IFolder_get_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_SubFolders_Proxy(
    IFolder* This,
    IFolderCollection **folders);
void __RPC_STUB IFolder_get_SubFolders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_get_Files_Proxy(
    IFolder* This,
    IFileCollection **files);
void __RPC_STUB IFolder_get_Files_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolder_CreateTextFile_Proxy(
    IFolder* This,
    BSTR FileName,
    VARIANT_BOOL Overwrite,
    VARIANT_BOOL Unicode,
    ITextStream **ppts);
void __RPC_STUB IFolder_CreateTextFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFolder_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFolderCollection interface
 */
#ifndef __IFolderCollection_INTERFACE_DEFINED__
#define __IFolderCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFolderCollection, 0xc7c3f5a3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7c3f5a3-88a3-11d0-abcb-00a0c90fffc0")
IFolderCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Add(
        BSTR Name,
        IFolder **folder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Key,
        IFolder **folder) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *count) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFolderCollection, 0xc7c3f5a3, 0x88a3, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct IFolderCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFolderCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFolderCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFolderCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFolderCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFolderCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFolderCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFolderCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFolderCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *Add)(
        IFolderCollection *This,
        BSTR Name,
        IFolder **folder);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IFolderCollection *This,
        VARIANT Key,
        IFolder **folder);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IFolderCollection *This,
        IUnknown **ppenum);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IFolderCollection *This,
        LONG *count);

    END_INTERFACE
} IFolderCollectionVtbl;

interface IFolderCollection {
    CONST_VTBL IFolderCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFolderCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFolderCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFolderCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFolderCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFolderCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFolderCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFolderCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFolderCollection methods ***/
#define IFolderCollection_Add(This,Name,folder) (This)->lpVtbl->Add(This,Name,folder)
#define IFolderCollection_get_Item(This,Key,folder) (This)->lpVtbl->get_Item(This,Key,folder)
#define IFolderCollection_get__NewEnum(This,ppenum) (This)->lpVtbl->get__NewEnum(This,ppenum)
#define IFolderCollection_get_Count(This,count) (This)->lpVtbl->get_Count(This,count)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IFolderCollection_QueryInterface(IFolderCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IFolderCollection_AddRef(IFolderCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IFolderCollection_Release(IFolderCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IFolderCollection_GetTypeInfoCount(IFolderCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IFolderCollection_GetTypeInfo(IFolderCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IFolderCollection_GetIDsOfNames(IFolderCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IFolderCollection_Invoke(IFolderCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFolderCollection methods ***/
FORCEINLINE HRESULT IFolderCollection_Add(IFolderCollection* This,BSTR Name,IFolder **folder) {
    return This->lpVtbl->Add(This,Name,folder);
}
FORCEINLINE HRESULT IFolderCollection_get_Item(IFolderCollection* This,VARIANT Key,IFolder **folder) {
    return This->lpVtbl->get_Item(This,Key,folder);
}
FORCEINLINE HRESULT IFolderCollection_get__NewEnum(IFolderCollection* This,IUnknown **ppenum) {
    return This->lpVtbl->get__NewEnum(This,ppenum);
}
FORCEINLINE HRESULT IFolderCollection_get_Count(IFolderCollection* This,LONG *count) {
    return This->lpVtbl->get_Count(This,count);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IFolderCollection_Add_Proxy(
    IFolderCollection* This,
    BSTR Name,
    IFolder **folder);
void __RPC_STUB IFolderCollection_Add_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get_Item_Proxy(
    IFolderCollection* This,
    VARIANT Key,
    IFolder **folder);
void __RPC_STUB IFolderCollection_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get__NewEnum_Proxy(
    IFolderCollection* This,
    IUnknown **ppenum);
void __RPC_STUB IFolderCollection_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IFolderCollection_get_Count_Proxy(
    IFolderCollection* This,
    LONG *count);
void __RPC_STUB IFolderCollection_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IFolderCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshCollection interface
 */
#ifndef __IWshCollection_INTERFACE_DEFINED__
#define __IWshCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshCollection, 0xf935dc27, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f935dc27-1cf0-11d0-adb9-00c04fd58a0b")
IWshCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Item(
        VARIANT *Index,
        VARIANT *out_Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE Count(
        LONG *out_Count) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_length(
        LONG *out_Count) = 0;

    virtual HRESULT STDMETHODCALLTYPE _NewEnum(
        IUnknown *out_Enum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshCollection, 0xf935dc27, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#else
typedef struct IWshCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *Item)(
        IWshCollection *This,
        VARIANT *Index,
        VARIANT *out_Value);

    HRESULT (STDMETHODCALLTYPE *Count)(
        IWshCollection *This,
        LONG *out_Count);

    HRESULT (STDMETHODCALLTYPE *get_length)(
        IWshCollection *This,
        LONG *out_Count);

    HRESULT (STDMETHODCALLTYPE *_NewEnum)(
        IWshCollection *This,
        IUnknown *out_Enum);

    END_INTERFACE
} IWshCollectionVtbl;

interface IWshCollection {
    CONST_VTBL IWshCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshCollection methods ***/
#define IWshCollection_Item(This,Index,out_Value) (This)->lpVtbl->Item(This,Index,out_Value)
#define IWshCollection_Count(This,out_Count) (This)->lpVtbl->Count(This,out_Count)
#define IWshCollection_get_length(This,out_Count) (This)->lpVtbl->get_length(This,out_Count)
#define IWshCollection__NewEnum(This,out_Enum) (This)->lpVtbl->_NewEnum(This,out_Enum)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshCollection_QueryInterface(IWshCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshCollection_AddRef(IWshCollection* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshCollection_Release(IWshCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshCollection_GetTypeInfoCount(IWshCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshCollection_GetTypeInfo(IWshCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshCollection_GetIDsOfNames(IWshCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshCollection_Invoke(IWshCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshCollection methods ***/
FORCEINLINE HRESULT IWshCollection_Item(IWshCollection* This,VARIANT *Index,VARIANT *out_Value) {
    return This->lpVtbl->Item(This,Index,out_Value);
}
FORCEINLINE HRESULT IWshCollection_Count(IWshCollection* This,LONG *out_Count) {
    return This->lpVtbl->Count(This,out_Count);
}
FORCEINLINE HRESULT IWshCollection_get_length(IWshCollection* This,LONG *out_Count) {
    return This->lpVtbl->get_length(This,out_Count);
}
FORCEINLINE HRESULT IWshCollection__NewEnum(IWshCollection* This,IUnknown *out_Enum) {
    return This->lpVtbl->_NewEnum(This,out_Enum);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshCollection_Item_Proxy(
    IWshCollection* This,
    VARIANT *Index,
    VARIANT *out_Value);
void __RPC_STUB IWshCollection_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshCollection_Count_Proxy(
    IWshCollection* This,
    LONG *out_Count);
void __RPC_STUB IWshCollection_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshCollection_get_length_Proxy(
    IWshCollection* This,
    LONG *out_Count);
void __RPC_STUB IWshCollection_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshCollection__NewEnum_Proxy(
    IWshCollection* This,
    IUnknown *out_Enum);
void __RPC_STUB IWshCollection__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshEnvironment interface
 */
#ifndef __IWshEnvironment_INTERFACE_DEFINED__
#define __IWshEnvironment_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshEnvironment, 0xf935dc29, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f935dc29-1cf0-11d0-adb9-00c04fd58a0b")
IWshEnvironment : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Item(
        BSTR Name,
        BSTR *out_Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Item(
        BSTR Name,
        BSTR Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE Count(
        LONG *out_Count) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_length(
        LONG *out_Count) = 0;

    virtual HRESULT STDMETHODCALLTYPE _NewEnum(
        IUnknown **out_Enum) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        BSTR Name) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshEnvironment, 0xf935dc29, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#else
typedef struct IWshEnvironmentVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshEnvironment *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshEnvironment *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshEnvironment *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshEnvironment *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshEnvironment *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshEnvironment *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshEnvironment *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshEnvironment methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IWshEnvironment *This,
        BSTR Name,
        BSTR *out_Value);

    HRESULT (STDMETHODCALLTYPE *put_Item)(
        IWshEnvironment *This,
        BSTR Name,
        BSTR Value);

    HRESULT (STDMETHODCALLTYPE *Count)(
        IWshEnvironment *This,
        LONG *out_Count);

    HRESULT (STDMETHODCALLTYPE *get_length)(
        IWshEnvironment *This,
        LONG *out_Count);

    HRESULT (STDMETHODCALLTYPE *_NewEnum)(
        IWshEnvironment *This,
        IUnknown **out_Enum);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IWshEnvironment *This,
        BSTR Name);

    END_INTERFACE
} IWshEnvironmentVtbl;

interface IWshEnvironment {
    CONST_VTBL IWshEnvironmentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshEnvironment_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshEnvironment_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshEnvironment_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshEnvironment_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshEnvironment_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshEnvironment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshEnvironment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshEnvironment methods ***/
#define IWshEnvironment_get_Item(This,Name,out_Value) (This)->lpVtbl->get_Item(This,Name,out_Value)
#define IWshEnvironment_put_Item(This,Name,Value) (This)->lpVtbl->put_Item(This,Name,Value)
#define IWshEnvironment_Count(This,out_Count) (This)->lpVtbl->Count(This,out_Count)
#define IWshEnvironment_get_length(This,out_Count) (This)->lpVtbl->get_length(This,out_Count)
#define IWshEnvironment__NewEnum(This,out_Enum) (This)->lpVtbl->_NewEnum(This,out_Enum)
#define IWshEnvironment_Remove(This,Name) (This)->lpVtbl->Remove(This,Name)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshEnvironment_QueryInterface(IWshEnvironment* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshEnvironment_AddRef(IWshEnvironment* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshEnvironment_Release(IWshEnvironment* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshEnvironment_GetTypeInfoCount(IWshEnvironment* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshEnvironment_GetTypeInfo(IWshEnvironment* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshEnvironment_GetIDsOfNames(IWshEnvironment* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshEnvironment_Invoke(IWshEnvironment* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshEnvironment methods ***/
FORCEINLINE HRESULT IWshEnvironment_get_Item(IWshEnvironment* This,BSTR Name,BSTR *out_Value) {
    return This->lpVtbl->get_Item(This,Name,out_Value);
}
FORCEINLINE HRESULT IWshEnvironment_put_Item(IWshEnvironment* This,BSTR Name,BSTR Value) {
    return This->lpVtbl->put_Item(This,Name,Value);
}
FORCEINLINE HRESULT IWshEnvironment_Count(IWshEnvironment* This,LONG *out_Count) {
    return This->lpVtbl->Count(This,out_Count);
}
FORCEINLINE HRESULT IWshEnvironment_get_length(IWshEnvironment* This,LONG *out_Count) {
    return This->lpVtbl->get_length(This,out_Count);
}
FORCEINLINE HRESULT IWshEnvironment__NewEnum(IWshEnvironment* This,IUnknown **out_Enum) {
    return This->lpVtbl->_NewEnum(This,out_Enum);
}
FORCEINLINE HRESULT IWshEnvironment_Remove(IWshEnvironment* This,BSTR Name) {
    return This->lpVtbl->Remove(This,Name);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshEnvironment_get_Item_Proxy(
    IWshEnvironment* This,
    BSTR Name,
    BSTR *out_Value);
void __RPC_STUB IWshEnvironment_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshEnvironment_put_Item_Proxy(
    IWshEnvironment* This,
    BSTR Name,
    BSTR Value);
void __RPC_STUB IWshEnvironment_put_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshEnvironment_Count_Proxy(
    IWshEnvironment* This,
    LONG *out_Count);
void __RPC_STUB IWshEnvironment_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshEnvironment_get_length_Proxy(
    IWshEnvironment* This,
    LONG *out_Count);
void __RPC_STUB IWshEnvironment_get_length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshEnvironment__NewEnum_Proxy(
    IWshEnvironment* This,
    IUnknown **out_Enum);
void __RPC_STUB IWshEnvironment__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshEnvironment_Remove_Proxy(
    IWshEnvironment* This,
    BSTR Name);
void __RPC_STUB IWshEnvironment_Remove_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshEnvironment_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshExec interface
 */
#ifndef __IWshExec_INTERFACE_DEFINED__
#define __IWshExec_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshExec, 0x08fed190, 0xbe19, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("08fed190-be19-11d3-a28b-00104bd35090")
IWshExec : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Status(
        WshExecStatus *Status) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdIn(
        ITextStream **stream) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdOut(
        ITextStream **stream) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StdErr(
        ITextStream **stream) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ProcessID(
        DWORD *pid) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ExitCode(
        DWORD *code) = 0;

    virtual HRESULT STDMETHODCALLTYPE Terminate(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshExec, 0x08fed190, 0xbe19, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#else
typedef struct IWshExecVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshExec *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshExec *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshExec *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshExec *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshExec *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshExec *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshExec *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshExec methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Status)(
        IWshExec *This,
        WshExecStatus *Status);

    HRESULT (STDMETHODCALLTYPE *get_StdIn)(
        IWshExec *This,
        ITextStream **stream);

    HRESULT (STDMETHODCALLTYPE *get_StdOut)(
        IWshExec *This,
        ITextStream **stream);

    HRESULT (STDMETHODCALLTYPE *get_StdErr)(
        IWshExec *This,
        ITextStream **stream);

    HRESULT (STDMETHODCALLTYPE *get_ProcessID)(
        IWshExec *This,
        DWORD *pid);

    HRESULT (STDMETHODCALLTYPE *get_ExitCode)(
        IWshExec *This,
        DWORD *code);

    HRESULT (STDMETHODCALLTYPE *Terminate)(
        IWshExec *This);

    END_INTERFACE
} IWshExecVtbl;

interface IWshExec {
    CONST_VTBL IWshExecVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshExec_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshExec_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshExec_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshExec_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshExec_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshExec_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshExec_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshExec methods ***/
#define IWshExec_get_Status(This,Status) (This)->lpVtbl->get_Status(This,Status)
#define IWshExec_get_StdIn(This,stream) (This)->lpVtbl->get_StdIn(This,stream)
#define IWshExec_get_StdOut(This,stream) (This)->lpVtbl->get_StdOut(This,stream)
#define IWshExec_get_StdErr(This,stream) (This)->lpVtbl->get_StdErr(This,stream)
#define IWshExec_get_ProcessID(This,pid) (This)->lpVtbl->get_ProcessID(This,pid)
#define IWshExec_get_ExitCode(This,code) (This)->lpVtbl->get_ExitCode(This,code)
#define IWshExec_Terminate(This) (This)->lpVtbl->Terminate(This)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshExec_QueryInterface(IWshExec* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshExec_AddRef(IWshExec* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshExec_Release(IWshExec* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshExec_GetTypeInfoCount(IWshExec* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshExec_GetTypeInfo(IWshExec* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshExec_GetIDsOfNames(IWshExec* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshExec_Invoke(IWshExec* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshExec methods ***/
FORCEINLINE HRESULT IWshExec_get_Status(IWshExec* This,WshExecStatus *Status) {
    return This->lpVtbl->get_Status(This,Status);
}
FORCEINLINE HRESULT IWshExec_get_StdIn(IWshExec* This,ITextStream **stream) {
    return This->lpVtbl->get_StdIn(This,stream);
}
FORCEINLINE HRESULT IWshExec_get_StdOut(IWshExec* This,ITextStream **stream) {
    return This->lpVtbl->get_StdOut(This,stream);
}
FORCEINLINE HRESULT IWshExec_get_StdErr(IWshExec* This,ITextStream **stream) {
    return This->lpVtbl->get_StdErr(This,stream);
}
FORCEINLINE HRESULT IWshExec_get_ProcessID(IWshExec* This,DWORD *pid) {
    return This->lpVtbl->get_ProcessID(This,pid);
}
FORCEINLINE HRESULT IWshExec_get_ExitCode(IWshExec* This,DWORD *code) {
    return This->lpVtbl->get_ExitCode(This,code);
}
FORCEINLINE HRESULT IWshExec_Terminate(IWshExec* This) {
    return This->lpVtbl->Terminate(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshExec_get_Status_Proxy(
    IWshExec* This,
    WshExecStatus *Status);
void __RPC_STUB IWshExec_get_Status_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_get_StdIn_Proxy(
    IWshExec* This,
    ITextStream **stream);
void __RPC_STUB IWshExec_get_StdIn_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_get_StdOut_Proxy(
    IWshExec* This,
    ITextStream **stream);
void __RPC_STUB IWshExec_get_StdOut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_get_StdErr_Proxy(
    IWshExec* This,
    ITextStream **stream);
void __RPC_STUB IWshExec_get_StdErr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_get_ProcessID_Proxy(
    IWshExec* This,
    DWORD *pid);
void __RPC_STUB IWshExec_get_ProcessID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_get_ExitCode_Proxy(
    IWshExec* This,
    DWORD *code);
void __RPC_STUB IWshExec_get_ExitCode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshExec_Terminate_Proxy(
    IWshExec* This);
void __RPC_STUB IWshExec_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshExec_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshShortcut interface
 */
#ifndef __IWshShortcut_INTERFACE_DEFINED__
#define __IWshShortcut_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshShortcut, 0xf935dc23, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f935dc23-1cf0-11d0-adb9-00c04fd58a0b")
IWshShortcut : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_FullName(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Arguments(
        BSTR *Arguments) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Arguments(
        BSTR Arguments) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Description(
        BSTR *Description) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Description(
        BSTR Description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Hotkey(
        BSTR *HotKey) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Hotkey(
        BSTR HotKey) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IconLocation(
        BSTR *IconPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IconLocation(
        BSTR IconPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RelativePath(
        BSTR rhs) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TargetPath(
        BSTR *Path) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TargetPath(
        BSTR Path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WindowStyle(
        int *ShowCmd) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WindowStyle(
        int ShowCmd) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WorkingDirectory(
        BSTR *WorkingDirectory) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WorkingDirectory(
        BSTR WorkingDirectory) = 0;

    virtual HRESULT STDMETHODCALLTYPE Load(
        BSTR PathLink) = 0;

    virtual HRESULT STDMETHODCALLTYPE Save(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshShortcut, 0xf935dc23, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#else
typedef struct IWshShortcutVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshShortcut *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshShortcut *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshShortcut *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshShortcut *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshShortcut *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshShortcut *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshShortcut *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshShortcut methods ***/
    HRESULT (STDMETHODCALLTYPE *get_FullName)(
        IWshShortcut *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_Arguments)(
        IWshShortcut *This,
        BSTR *Arguments);

    HRESULT (STDMETHODCALLTYPE *put_Arguments)(
        IWshShortcut *This,
        BSTR Arguments);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IWshShortcut *This,
        BSTR *Description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IWshShortcut *This,
        BSTR Description);

    HRESULT (STDMETHODCALLTYPE *get_Hotkey)(
        IWshShortcut *This,
        BSTR *HotKey);

    HRESULT (STDMETHODCALLTYPE *put_Hotkey)(
        IWshShortcut *This,
        BSTR HotKey);

    HRESULT (STDMETHODCALLTYPE *get_IconLocation)(
        IWshShortcut *This,
        BSTR *IconPath);

    HRESULT (STDMETHODCALLTYPE *put_IconLocation)(
        IWshShortcut *This,
        BSTR IconPath);

    HRESULT (STDMETHODCALLTYPE *put_RelativePath)(
        IWshShortcut *This,
        BSTR rhs);

    HRESULT (STDMETHODCALLTYPE *get_TargetPath)(
        IWshShortcut *This,
        BSTR *Path);

    HRESULT (STDMETHODCALLTYPE *put_TargetPath)(
        IWshShortcut *This,
        BSTR Path);

    HRESULT (STDMETHODCALLTYPE *get_WindowStyle)(
        IWshShortcut *This,
        int *ShowCmd);

    HRESULT (STDMETHODCALLTYPE *put_WindowStyle)(
        IWshShortcut *This,
        int ShowCmd);

    HRESULT (STDMETHODCALLTYPE *get_WorkingDirectory)(
        IWshShortcut *This,
        BSTR *WorkingDirectory);

    HRESULT (STDMETHODCALLTYPE *put_WorkingDirectory)(
        IWshShortcut *This,
        BSTR WorkingDirectory);

    HRESULT (STDMETHODCALLTYPE *Load)(
        IWshShortcut *This,
        BSTR PathLink);

    HRESULT (STDMETHODCALLTYPE *Save)(
        IWshShortcut *This);

    END_INTERFACE
} IWshShortcutVtbl;

interface IWshShortcut {
    CONST_VTBL IWshShortcutVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshShortcut_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshShortcut_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshShortcut_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshShortcut_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshShortcut_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshShortcut_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshShortcut_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshShortcut methods ***/
#define IWshShortcut_get_FullName(This,name) (This)->lpVtbl->get_FullName(This,name)
#define IWshShortcut_get_Arguments(This,Arguments) (This)->lpVtbl->get_Arguments(This,Arguments)
#define IWshShortcut_put_Arguments(This,Arguments) (This)->lpVtbl->put_Arguments(This,Arguments)
#define IWshShortcut_get_Description(This,Description) (This)->lpVtbl->get_Description(This,Description)
#define IWshShortcut_put_Description(This,Description) (This)->lpVtbl->put_Description(This,Description)
#define IWshShortcut_get_Hotkey(This,HotKey) (This)->lpVtbl->get_Hotkey(This,HotKey)
#define IWshShortcut_put_Hotkey(This,HotKey) (This)->lpVtbl->put_Hotkey(This,HotKey)
#define IWshShortcut_get_IconLocation(This,IconPath) (This)->lpVtbl->get_IconLocation(This,IconPath)
#define IWshShortcut_put_IconLocation(This,IconPath) (This)->lpVtbl->put_IconLocation(This,IconPath)
#define IWshShortcut_put_RelativePath(This,rhs) (This)->lpVtbl->put_RelativePath(This,rhs)
#define IWshShortcut_get_TargetPath(This,Path) (This)->lpVtbl->get_TargetPath(This,Path)
#define IWshShortcut_put_TargetPath(This,Path) (This)->lpVtbl->put_TargetPath(This,Path)
#define IWshShortcut_get_WindowStyle(This,ShowCmd) (This)->lpVtbl->get_WindowStyle(This,ShowCmd)
#define IWshShortcut_put_WindowStyle(This,ShowCmd) (This)->lpVtbl->put_WindowStyle(This,ShowCmd)
#define IWshShortcut_get_WorkingDirectory(This,WorkingDirectory) (This)->lpVtbl->get_WorkingDirectory(This,WorkingDirectory)
#define IWshShortcut_put_WorkingDirectory(This,WorkingDirectory) (This)->lpVtbl->put_WorkingDirectory(This,WorkingDirectory)
#define IWshShortcut_Load(This,PathLink) (This)->lpVtbl->Load(This,PathLink)
#define IWshShortcut_Save(This) (This)->lpVtbl->Save(This)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshShortcut_QueryInterface(IWshShortcut* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshShortcut_AddRef(IWshShortcut* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshShortcut_Release(IWshShortcut* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshShortcut_GetTypeInfoCount(IWshShortcut* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshShortcut_GetTypeInfo(IWshShortcut* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshShortcut_GetIDsOfNames(IWshShortcut* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshShortcut_Invoke(IWshShortcut* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshShortcut methods ***/
FORCEINLINE HRESULT IWshShortcut_get_FullName(IWshShortcut* This,BSTR *name) {
    return This->lpVtbl->get_FullName(This,name);
}
FORCEINLINE HRESULT IWshShortcut_get_Arguments(IWshShortcut* This,BSTR *Arguments) {
    return This->lpVtbl->get_Arguments(This,Arguments);
}
FORCEINLINE HRESULT IWshShortcut_put_Arguments(IWshShortcut* This,BSTR Arguments) {
    return This->lpVtbl->put_Arguments(This,Arguments);
}
FORCEINLINE HRESULT IWshShortcut_get_Description(IWshShortcut* This,BSTR *Description) {
    return This->lpVtbl->get_Description(This,Description);
}
FORCEINLINE HRESULT IWshShortcut_put_Description(IWshShortcut* This,BSTR Description) {
    return This->lpVtbl->put_Description(This,Description);
}
FORCEINLINE HRESULT IWshShortcut_get_Hotkey(IWshShortcut* This,BSTR *HotKey) {
    return This->lpVtbl->get_Hotkey(This,HotKey);
}
FORCEINLINE HRESULT IWshShortcut_put_Hotkey(IWshShortcut* This,BSTR HotKey) {
    return This->lpVtbl->put_Hotkey(This,HotKey);
}
FORCEINLINE HRESULT IWshShortcut_get_IconLocation(IWshShortcut* This,BSTR *IconPath) {
    return This->lpVtbl->get_IconLocation(This,IconPath);
}
FORCEINLINE HRESULT IWshShortcut_put_IconLocation(IWshShortcut* This,BSTR IconPath) {
    return This->lpVtbl->put_IconLocation(This,IconPath);
}
FORCEINLINE HRESULT IWshShortcut_put_RelativePath(IWshShortcut* This,BSTR rhs) {
    return This->lpVtbl->put_RelativePath(This,rhs);
}
FORCEINLINE HRESULT IWshShortcut_get_TargetPath(IWshShortcut* This,BSTR *Path) {
    return This->lpVtbl->get_TargetPath(This,Path);
}
FORCEINLINE HRESULT IWshShortcut_put_TargetPath(IWshShortcut* This,BSTR Path) {
    return This->lpVtbl->put_TargetPath(This,Path);
}
FORCEINLINE HRESULT IWshShortcut_get_WindowStyle(IWshShortcut* This,int *ShowCmd) {
    return This->lpVtbl->get_WindowStyle(This,ShowCmd);
}
FORCEINLINE HRESULT IWshShortcut_put_WindowStyle(IWshShortcut* This,int ShowCmd) {
    return This->lpVtbl->put_WindowStyle(This,ShowCmd);
}
FORCEINLINE HRESULT IWshShortcut_get_WorkingDirectory(IWshShortcut* This,BSTR *WorkingDirectory) {
    return This->lpVtbl->get_WorkingDirectory(This,WorkingDirectory);
}
FORCEINLINE HRESULT IWshShortcut_put_WorkingDirectory(IWshShortcut* This,BSTR WorkingDirectory) {
    return This->lpVtbl->put_WorkingDirectory(This,WorkingDirectory);
}
FORCEINLINE HRESULT IWshShortcut_Load(IWshShortcut* This,BSTR PathLink) {
    return This->lpVtbl->Load(This,PathLink);
}
FORCEINLINE HRESULT IWshShortcut_Save(IWshShortcut* This) {
    return This->lpVtbl->Save(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshShortcut_get_FullName_Proxy(
    IWshShortcut* This,
    BSTR *name);
void __RPC_STUB IWshShortcut_get_FullName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_Arguments_Proxy(
    IWshShortcut* This,
    BSTR *Arguments);
void __RPC_STUB IWshShortcut_get_Arguments_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_Arguments_Proxy(
    IWshShortcut* This,
    BSTR Arguments);
void __RPC_STUB IWshShortcut_put_Arguments_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_Description_Proxy(
    IWshShortcut* This,
    BSTR *Description);
void __RPC_STUB IWshShortcut_get_Description_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_Description_Proxy(
    IWshShortcut* This,
    BSTR Description);
void __RPC_STUB IWshShortcut_put_Description_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_Hotkey_Proxy(
    IWshShortcut* This,
    BSTR *HotKey);
void __RPC_STUB IWshShortcut_get_Hotkey_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_Hotkey_Proxy(
    IWshShortcut* This,
    BSTR HotKey);
void __RPC_STUB IWshShortcut_put_Hotkey_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_IconLocation_Proxy(
    IWshShortcut* This,
    BSTR *IconPath);
void __RPC_STUB IWshShortcut_get_IconLocation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_IconLocation_Proxy(
    IWshShortcut* This,
    BSTR IconPath);
void __RPC_STUB IWshShortcut_put_IconLocation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_RelativePath_Proxy(
    IWshShortcut* This,
    BSTR rhs);
void __RPC_STUB IWshShortcut_put_RelativePath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_TargetPath_Proxy(
    IWshShortcut* This,
    BSTR *Path);
void __RPC_STUB IWshShortcut_get_TargetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_TargetPath_Proxy(
    IWshShortcut* This,
    BSTR Path);
void __RPC_STUB IWshShortcut_put_TargetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_WindowStyle_Proxy(
    IWshShortcut* This,
    int *ShowCmd);
void __RPC_STUB IWshShortcut_get_WindowStyle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_WindowStyle_Proxy(
    IWshShortcut* This,
    int ShowCmd);
void __RPC_STUB IWshShortcut_put_WindowStyle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_get_WorkingDirectory_Proxy(
    IWshShortcut* This,
    BSTR *WorkingDirectory);
void __RPC_STUB IWshShortcut_get_WorkingDirectory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_put_WorkingDirectory_Proxy(
    IWshShortcut* This,
    BSTR WorkingDirectory);
void __RPC_STUB IWshShortcut_put_WorkingDirectory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_Load_Proxy(
    IWshShortcut* This,
    BSTR PathLink);
void __RPC_STUB IWshShortcut_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShortcut_Save_Proxy(
    IWshShortcut* This);
void __RPC_STUB IWshShortcut_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshShortcut_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshShell interface
 */
#ifndef __IWshShell_INTERFACE_DEFINED__
#define __IWshShell_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshShell, 0xf935dc21, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f935dc21-1cf0-11d0-adb9-00c04fd58a0b")
IWshShell : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_SpecialFolders(
        IWshCollection **out_Folders) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Environment(
        VARIANT *Type,
        IWshEnvironment **out_Env) = 0;

    virtual HRESULT STDMETHODCALLTYPE Run(
        BSTR Command,
        VARIANT *WindowStyle,
        VARIANT *WaitOnReturn,
        DWORD *out_ExitCode) = 0;

    virtual HRESULT STDMETHODCALLTYPE Popup(
        BSTR Text,
        VARIANT *SecondsToWait,
        VARIANT *Title,
        VARIANT *Type,
        int *out_Button) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateShortcut(
        BSTR PathLink,
        IDispatch **out_Shortcut) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExpandEnvironmentStrings(
        BSTR Src,
        BSTR *out_Dst) = 0;

    virtual HRESULT STDMETHODCALLTYPE RegRead(
        BSTR Name,
        VARIANT *out_Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE RegWrite(
        BSTR Name,
        VARIANT *Value,
        VARIANT *Type) = 0;

    virtual HRESULT STDMETHODCALLTYPE RegDelete(
        BSTR Name) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshShell, 0xf935dc21, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#else
typedef struct IWshShellVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshShell *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshShell *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshShell *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshShell *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshShell *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshShell *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshShell *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshShell methods ***/
    HRESULT (STDMETHODCALLTYPE *get_SpecialFolders)(
        IWshShell *This,
        IWshCollection **out_Folders);

    HRESULT (STDMETHODCALLTYPE *get_Environment)(
        IWshShell *This,
        VARIANT *Type,
        IWshEnvironment **out_Env);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IWshShell *This,
        BSTR Command,
        VARIANT *WindowStyle,
        VARIANT *WaitOnReturn,
        DWORD *out_ExitCode);

    HRESULT (STDMETHODCALLTYPE *Popup)(
        IWshShell *This,
        BSTR Text,
        VARIANT *SecondsToWait,
        VARIANT *Title,
        VARIANT *Type,
        int *out_Button);

    HRESULT (STDMETHODCALLTYPE *CreateShortcut)(
        IWshShell *This,
        BSTR PathLink,
        IDispatch **out_Shortcut);

    HRESULT (STDMETHODCALLTYPE *ExpandEnvironmentStrings)(
        IWshShell *This,
        BSTR Src,
        BSTR *out_Dst);

    HRESULT (STDMETHODCALLTYPE *RegRead)(
        IWshShell *This,
        BSTR Name,
        VARIANT *out_Value);

    HRESULT (STDMETHODCALLTYPE *RegWrite)(
        IWshShell *This,
        BSTR Name,
        VARIANT *Value,
        VARIANT *Type);

    HRESULT (STDMETHODCALLTYPE *RegDelete)(
        IWshShell *This,
        BSTR Name);

    END_INTERFACE
} IWshShellVtbl;

interface IWshShell {
    CONST_VTBL IWshShellVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshShell_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshShell_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshShell_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshShell_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshShell_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshShell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshShell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshShell methods ***/
#define IWshShell_get_SpecialFolders(This,out_Folders) (This)->lpVtbl->get_SpecialFolders(This,out_Folders)
#define IWshShell_get_Environment(This,Type,out_Env) (This)->lpVtbl->get_Environment(This,Type,out_Env)
#define IWshShell_Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode) (This)->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode)
#define IWshShell_Popup(This,Text,SecondsToWait,Title,Type,out_Button) (This)->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button)
#define IWshShell_CreateShortcut(This,PathLink,out_Shortcut) (This)->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut)
#define IWshShell_ExpandEnvironmentStrings(This,Src,out_Dst) (This)->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst)
#define IWshShell_RegRead(This,Name,out_Value) (This)->lpVtbl->RegRead(This,Name,out_Value)
#define IWshShell_RegWrite(This,Name,Value,Type) (This)->lpVtbl->RegWrite(This,Name,Value,Type)
#define IWshShell_RegDelete(This,Name) (This)->lpVtbl->RegDelete(This,Name)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshShell_QueryInterface(IWshShell* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshShell_AddRef(IWshShell* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshShell_Release(IWshShell* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshShell_GetTypeInfoCount(IWshShell* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshShell_GetTypeInfo(IWshShell* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshShell_GetIDsOfNames(IWshShell* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshShell_Invoke(IWshShell* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshShell methods ***/
FORCEINLINE HRESULT IWshShell_get_SpecialFolders(IWshShell* This,IWshCollection **out_Folders) {
    return This->lpVtbl->get_SpecialFolders(This,out_Folders);
}
FORCEINLINE HRESULT IWshShell_get_Environment(IWshShell* This,VARIANT *Type,IWshEnvironment **out_Env) {
    return This->lpVtbl->get_Environment(This,Type,out_Env);
}
FORCEINLINE HRESULT IWshShell_Run(IWshShell* This,BSTR Command,VARIANT *WindowStyle,VARIANT *WaitOnReturn,DWORD *out_ExitCode) {
    return This->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode);
}
FORCEINLINE HRESULT IWshShell_Popup(IWshShell* This,BSTR Text,VARIANT *SecondsToWait,VARIANT *Title,VARIANT *Type,int *out_Button) {
    return This->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button);
}
FORCEINLINE HRESULT IWshShell_CreateShortcut(IWshShell* This,BSTR PathLink,IDispatch **out_Shortcut) {
    return This->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut);
}
FORCEINLINE HRESULT IWshShell_ExpandEnvironmentStrings(IWshShell* This,BSTR Src,BSTR *out_Dst) {
    return This->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst);
}
FORCEINLINE HRESULT IWshShell_RegRead(IWshShell* This,BSTR Name,VARIANT *out_Value) {
    return This->lpVtbl->RegRead(This,Name,out_Value);
}
FORCEINLINE HRESULT IWshShell_RegWrite(IWshShell* This,BSTR Name,VARIANT *Value,VARIANT *Type) {
    return This->lpVtbl->RegWrite(This,Name,Value,Type);
}
FORCEINLINE HRESULT IWshShell_RegDelete(IWshShell* This,BSTR Name) {
    return This->lpVtbl->RegDelete(This,Name);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshShell_get_SpecialFolders_Proxy(
    IWshShell* This,
    IWshCollection **out_Folders);
void __RPC_STUB IWshShell_get_SpecialFolders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_get_Environment_Proxy(
    IWshShell* This,
    VARIANT *Type,
    IWshEnvironment **out_Env);
void __RPC_STUB IWshShell_get_Environment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_Run_Proxy(
    IWshShell* This,
    BSTR Command,
    VARIANT *WindowStyle,
    VARIANT *WaitOnReturn,
    DWORD *out_ExitCode);
void __RPC_STUB IWshShell_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_Popup_Proxy(
    IWshShell* This,
    BSTR Text,
    VARIANT *SecondsToWait,
    VARIANT *Title,
    VARIANT *Type,
    int *out_Button);
void __RPC_STUB IWshShell_Popup_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_CreateShortcut_Proxy(
    IWshShell* This,
    BSTR PathLink,
    IDispatch **out_Shortcut);
void __RPC_STUB IWshShell_CreateShortcut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_ExpandEnvironmentStrings_Proxy(
    IWshShell* This,
    BSTR Src,
    BSTR *out_Dst);
void __RPC_STUB IWshShell_ExpandEnvironmentStrings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_RegRead_Proxy(
    IWshShell* This,
    BSTR Name,
    VARIANT *out_Value);
void __RPC_STUB IWshShell_RegRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_RegWrite_Proxy(
    IWshShell* This,
    BSTR Name,
    VARIANT *Value,
    VARIANT *Type);
void __RPC_STUB IWshShell_RegWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell_RegDelete_Proxy(
    IWshShell* This,
    BSTR Name);
void __RPC_STUB IWshShell_RegDelete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshShell_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshShell2 interface
 */
#ifndef __IWshShell2_INTERFACE_DEFINED__
#define __IWshShell2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshShell2, 0x24be5a30, 0xedfe, 0x11d2, 0xb9,0x33, 0x00,0x10,0x4b,0x36,0x5c,0x9f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("24be5a30-edfe-11d2-b933-00104b365c9f")
IWshShell2 : public IWshShell
{
    virtual HRESULT STDMETHODCALLTYPE LogEvent(
        VARIANT *Type,
        BSTR Message,
        BSTR Target,
        VARIANT_BOOL *out_Success) = 0;

    virtual HRESULT STDMETHODCALLTYPE AppActivate(
        VARIANT *App,
        VARIANT *Wait,
        VARIANT_BOOL *out_Success) = 0;

    virtual HRESULT STDMETHODCALLTYPE SendKeys(
        BSTR Keys,
        VARIANT *Wait) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshShell2, 0x24be5a30, 0xedfe, 0x11d2, 0xb9,0x33, 0x00,0x10,0x4b,0x36,0x5c,0x9f)
#endif
#else
typedef struct IWshShell2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshShell2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshShell2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshShell2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshShell2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshShell2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshShell2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshShell2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshShell methods ***/
    HRESULT (STDMETHODCALLTYPE *get_SpecialFolders)(
        IWshShell2 *This,
        IWshCollection **out_Folders);

    HRESULT (STDMETHODCALLTYPE *get_Environment)(
        IWshShell2 *This,
        VARIANT *Type,
        IWshEnvironment **out_Env);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IWshShell2 *This,
        BSTR Command,
        VARIANT *WindowStyle,
        VARIANT *WaitOnReturn,
        DWORD *out_ExitCode);

    HRESULT (STDMETHODCALLTYPE *Popup)(
        IWshShell2 *This,
        BSTR Text,
        VARIANT *SecondsToWait,
        VARIANT *Title,
        VARIANT *Type,
        int *out_Button);

    HRESULT (STDMETHODCALLTYPE *CreateShortcut)(
        IWshShell2 *This,
        BSTR PathLink,
        IDispatch **out_Shortcut);

    HRESULT (STDMETHODCALLTYPE *ExpandEnvironmentStrings)(
        IWshShell2 *This,
        BSTR Src,
        BSTR *out_Dst);

    HRESULT (STDMETHODCALLTYPE *RegRead)(
        IWshShell2 *This,
        BSTR Name,
        VARIANT *out_Value);

    HRESULT (STDMETHODCALLTYPE *RegWrite)(
        IWshShell2 *This,
        BSTR Name,
        VARIANT *Value,
        VARIANT *Type);

    HRESULT (STDMETHODCALLTYPE *RegDelete)(
        IWshShell2 *This,
        BSTR Name);

    /*** IWshShell2 methods ***/
    HRESULT (STDMETHODCALLTYPE *LogEvent)(
        IWshShell2 *This,
        VARIANT *Type,
        BSTR Message,
        BSTR Target,
        VARIANT_BOOL *out_Success);

    HRESULT (STDMETHODCALLTYPE *AppActivate)(
        IWshShell2 *This,
        VARIANT *App,
        VARIANT *Wait,
        VARIANT_BOOL *out_Success);

    HRESULT (STDMETHODCALLTYPE *SendKeys)(
        IWshShell2 *This,
        BSTR Keys,
        VARIANT *Wait);

    END_INTERFACE
} IWshShell2Vtbl;

interface IWshShell2 {
    CONST_VTBL IWshShell2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshShell2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshShell2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshShell2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshShell2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshShell2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshShell2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshShell2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshShell methods ***/
#define IWshShell2_get_SpecialFolders(This,out_Folders) (This)->lpVtbl->get_SpecialFolders(This,out_Folders)
#define IWshShell2_get_Environment(This,Type,out_Env) (This)->lpVtbl->get_Environment(This,Type,out_Env)
#define IWshShell2_Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode) (This)->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode)
#define IWshShell2_Popup(This,Text,SecondsToWait,Title,Type,out_Button) (This)->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button)
#define IWshShell2_CreateShortcut(This,PathLink,out_Shortcut) (This)->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut)
#define IWshShell2_ExpandEnvironmentStrings(This,Src,out_Dst) (This)->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst)
#define IWshShell2_RegRead(This,Name,out_Value) (This)->lpVtbl->RegRead(This,Name,out_Value)
#define IWshShell2_RegWrite(This,Name,Value,Type) (This)->lpVtbl->RegWrite(This,Name,Value,Type)
#define IWshShell2_RegDelete(This,Name) (This)->lpVtbl->RegDelete(This,Name)
/*** IWshShell2 methods ***/
#define IWshShell2_LogEvent(This,Type,Message,Target,out_Success) (This)->lpVtbl->LogEvent(This,Type,Message,Target,out_Success)
#define IWshShell2_AppActivate(This,App,Wait,out_Success) (This)->lpVtbl->AppActivate(This,App,Wait,out_Success)
#define IWshShell2_SendKeys(This,Keys,Wait) (This)->lpVtbl->SendKeys(This,Keys,Wait)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshShell2_QueryInterface(IWshShell2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshShell2_AddRef(IWshShell2* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshShell2_Release(IWshShell2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshShell2_GetTypeInfoCount(IWshShell2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshShell2_GetTypeInfo(IWshShell2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshShell2_GetIDsOfNames(IWshShell2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshShell2_Invoke(IWshShell2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshShell methods ***/
FORCEINLINE HRESULT IWshShell2_get_SpecialFolders(IWshShell2* This,IWshCollection **out_Folders) {
    return This->lpVtbl->get_SpecialFolders(This,out_Folders);
}
FORCEINLINE HRESULT IWshShell2_get_Environment(IWshShell2* This,VARIANT *Type,IWshEnvironment **out_Env) {
    return This->lpVtbl->get_Environment(This,Type,out_Env);
}
FORCEINLINE HRESULT IWshShell2_Run(IWshShell2* This,BSTR Command,VARIANT *WindowStyle,VARIANT *WaitOnReturn,DWORD *out_ExitCode) {
    return This->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode);
}
FORCEINLINE HRESULT IWshShell2_Popup(IWshShell2* This,BSTR Text,VARIANT *SecondsToWait,VARIANT *Title,VARIANT *Type,int *out_Button) {
    return This->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button);
}
FORCEINLINE HRESULT IWshShell2_CreateShortcut(IWshShell2* This,BSTR PathLink,IDispatch **out_Shortcut) {
    return This->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut);
}
FORCEINLINE HRESULT IWshShell2_ExpandEnvironmentStrings(IWshShell2* This,BSTR Src,BSTR *out_Dst) {
    return This->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst);
}
FORCEINLINE HRESULT IWshShell2_RegRead(IWshShell2* This,BSTR Name,VARIANT *out_Value) {
    return This->lpVtbl->RegRead(This,Name,out_Value);
}
FORCEINLINE HRESULT IWshShell2_RegWrite(IWshShell2* This,BSTR Name,VARIANT *Value,VARIANT *Type) {
    return This->lpVtbl->RegWrite(This,Name,Value,Type);
}
FORCEINLINE HRESULT IWshShell2_RegDelete(IWshShell2* This,BSTR Name) {
    return This->lpVtbl->RegDelete(This,Name);
}
/*** IWshShell2 methods ***/
FORCEINLINE HRESULT IWshShell2_LogEvent(IWshShell2* This,VARIANT *Type,BSTR Message,BSTR Target,VARIANT_BOOL *out_Success) {
    return This->lpVtbl->LogEvent(This,Type,Message,Target,out_Success);
}
FORCEINLINE HRESULT IWshShell2_AppActivate(IWshShell2* This,VARIANT *App,VARIANT *Wait,VARIANT_BOOL *out_Success) {
    return This->lpVtbl->AppActivate(This,App,Wait,out_Success);
}
FORCEINLINE HRESULT IWshShell2_SendKeys(IWshShell2* This,BSTR Keys,VARIANT *Wait) {
    return This->lpVtbl->SendKeys(This,Keys,Wait);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshShell2_LogEvent_Proxy(
    IWshShell2* This,
    VARIANT *Type,
    BSTR Message,
    BSTR Target,
    VARIANT_BOOL *out_Success);
void __RPC_STUB IWshShell2_LogEvent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell2_AppActivate_Proxy(
    IWshShell2* This,
    VARIANT *App,
    VARIANT *Wait,
    VARIANT_BOOL *out_Success);
void __RPC_STUB IWshShell2_AppActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell2_SendKeys_Proxy(
    IWshShell2* This,
    BSTR Keys,
    VARIANT *Wait);
void __RPC_STUB IWshShell2_SendKeys_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshShell2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshShell3 interface
 */
#ifndef __IWshShell3_INTERFACE_DEFINED__
#define __IWshShell3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshShell3, 0x41904400, 0xbe18, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("41904400-be18-11d3-a28b-00104bd35090")
IWshShell3 : public IWshShell2
{
    virtual HRESULT STDMETHODCALLTYPE Exec(
        BSTR Command,
        IWshExec **out_Exec) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentDirectory(
        BSTR *out_Directory) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CurrentDirectory(
        BSTR out_Directory) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshShell3, 0x41904400, 0xbe18, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#else
typedef struct IWshShell3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshShell3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshShell3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshShell3 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshShell3 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshShell3 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshShell3 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshShell3 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshShell methods ***/
    HRESULT (STDMETHODCALLTYPE *get_SpecialFolders)(
        IWshShell3 *This,
        IWshCollection **out_Folders);

    HRESULT (STDMETHODCALLTYPE *get_Environment)(
        IWshShell3 *This,
        VARIANT *Type,
        IWshEnvironment **out_Env);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IWshShell3 *This,
        BSTR Command,
        VARIANT *WindowStyle,
        VARIANT *WaitOnReturn,
        DWORD *out_ExitCode);

    HRESULT (STDMETHODCALLTYPE *Popup)(
        IWshShell3 *This,
        BSTR Text,
        VARIANT *SecondsToWait,
        VARIANT *Title,
        VARIANT *Type,
        int *out_Button);

    HRESULT (STDMETHODCALLTYPE *CreateShortcut)(
        IWshShell3 *This,
        BSTR PathLink,
        IDispatch **out_Shortcut);

    HRESULT (STDMETHODCALLTYPE *ExpandEnvironmentStrings)(
        IWshShell3 *This,
        BSTR Src,
        BSTR *out_Dst);

    HRESULT (STDMETHODCALLTYPE *RegRead)(
        IWshShell3 *This,
        BSTR Name,
        VARIANT *out_Value);

    HRESULT (STDMETHODCALLTYPE *RegWrite)(
        IWshShell3 *This,
        BSTR Name,
        VARIANT *Value,
        VARIANT *Type);

    HRESULT (STDMETHODCALLTYPE *RegDelete)(
        IWshShell3 *This,
        BSTR Name);

    /*** IWshShell2 methods ***/
    HRESULT (STDMETHODCALLTYPE *LogEvent)(
        IWshShell3 *This,
        VARIANT *Type,
        BSTR Message,
        BSTR Target,
        VARIANT_BOOL *out_Success);

    HRESULT (STDMETHODCALLTYPE *AppActivate)(
        IWshShell3 *This,
        VARIANT *App,
        VARIANT *Wait,
        VARIANT_BOOL *out_Success);

    HRESULT (STDMETHODCALLTYPE *SendKeys)(
        IWshShell3 *This,
        BSTR Keys,
        VARIANT *Wait);

    /*** IWshShell3 methods ***/
    HRESULT (STDMETHODCALLTYPE *Exec)(
        IWshShell3 *This,
        BSTR Command,
        IWshExec **out_Exec);

    HRESULT (STDMETHODCALLTYPE *get_CurrentDirectory)(
        IWshShell3 *This,
        BSTR *out_Directory);

    HRESULT (STDMETHODCALLTYPE *put_CurrentDirectory)(
        IWshShell3 *This,
        BSTR out_Directory);

    END_INTERFACE
} IWshShell3Vtbl;

interface IWshShell3 {
    CONST_VTBL IWshShell3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshShell3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshShell3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshShell3_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshShell3_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshShell3_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshShell3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshShell3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshShell methods ***/
#define IWshShell3_get_SpecialFolders(This,out_Folders) (This)->lpVtbl->get_SpecialFolders(This,out_Folders)
#define IWshShell3_get_Environment(This,Type,out_Env) (This)->lpVtbl->get_Environment(This,Type,out_Env)
#define IWshShell3_Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode) (This)->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode)
#define IWshShell3_Popup(This,Text,SecondsToWait,Title,Type,out_Button) (This)->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button)
#define IWshShell3_CreateShortcut(This,PathLink,out_Shortcut) (This)->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut)
#define IWshShell3_ExpandEnvironmentStrings(This,Src,out_Dst) (This)->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst)
#define IWshShell3_RegRead(This,Name,out_Value) (This)->lpVtbl->RegRead(This,Name,out_Value)
#define IWshShell3_RegWrite(This,Name,Value,Type) (This)->lpVtbl->RegWrite(This,Name,Value,Type)
#define IWshShell3_RegDelete(This,Name) (This)->lpVtbl->RegDelete(This,Name)
/*** IWshShell2 methods ***/
#define IWshShell3_LogEvent(This,Type,Message,Target,out_Success) (This)->lpVtbl->LogEvent(This,Type,Message,Target,out_Success)
#define IWshShell3_AppActivate(This,App,Wait,out_Success) (This)->lpVtbl->AppActivate(This,App,Wait,out_Success)
#define IWshShell3_SendKeys(This,Keys,Wait) (This)->lpVtbl->SendKeys(This,Keys,Wait)
/*** IWshShell3 methods ***/
#define IWshShell3_Exec(This,Command,out_Exec) (This)->lpVtbl->Exec(This,Command,out_Exec)
#define IWshShell3_get_CurrentDirectory(This,out_Directory) (This)->lpVtbl->get_CurrentDirectory(This,out_Directory)
#define IWshShell3_put_CurrentDirectory(This,out_Directory) (This)->lpVtbl->put_CurrentDirectory(This,out_Directory)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshShell3_QueryInterface(IWshShell3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshShell3_AddRef(IWshShell3* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshShell3_Release(IWshShell3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshShell3_GetTypeInfoCount(IWshShell3* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshShell3_GetTypeInfo(IWshShell3* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshShell3_GetIDsOfNames(IWshShell3* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshShell3_Invoke(IWshShell3* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshShell methods ***/
FORCEINLINE HRESULT IWshShell3_get_SpecialFolders(IWshShell3* This,IWshCollection **out_Folders) {
    return This->lpVtbl->get_SpecialFolders(This,out_Folders);
}
FORCEINLINE HRESULT IWshShell3_get_Environment(IWshShell3* This,VARIANT *Type,IWshEnvironment **out_Env) {
    return This->lpVtbl->get_Environment(This,Type,out_Env);
}
FORCEINLINE HRESULT IWshShell3_Run(IWshShell3* This,BSTR Command,VARIANT *WindowStyle,VARIANT *WaitOnReturn,DWORD *out_ExitCode) {
    return This->lpVtbl->Run(This,Command,WindowStyle,WaitOnReturn,out_ExitCode);
}
FORCEINLINE HRESULT IWshShell3_Popup(IWshShell3* This,BSTR Text,VARIANT *SecondsToWait,VARIANT *Title,VARIANT *Type,int *out_Button) {
    return This->lpVtbl->Popup(This,Text,SecondsToWait,Title,Type,out_Button);
}
FORCEINLINE HRESULT IWshShell3_CreateShortcut(IWshShell3* This,BSTR PathLink,IDispatch **out_Shortcut) {
    return This->lpVtbl->CreateShortcut(This,PathLink,out_Shortcut);
}
FORCEINLINE HRESULT IWshShell3_ExpandEnvironmentStrings(IWshShell3* This,BSTR Src,BSTR *out_Dst) {
    return This->lpVtbl->ExpandEnvironmentStrings(This,Src,out_Dst);
}
FORCEINLINE HRESULT IWshShell3_RegRead(IWshShell3* This,BSTR Name,VARIANT *out_Value) {
    return This->lpVtbl->RegRead(This,Name,out_Value);
}
FORCEINLINE HRESULT IWshShell3_RegWrite(IWshShell3* This,BSTR Name,VARIANT *Value,VARIANT *Type) {
    return This->lpVtbl->RegWrite(This,Name,Value,Type);
}
FORCEINLINE HRESULT IWshShell3_RegDelete(IWshShell3* This,BSTR Name) {
    return This->lpVtbl->RegDelete(This,Name);
}
/*** IWshShell2 methods ***/
FORCEINLINE HRESULT IWshShell3_LogEvent(IWshShell3* This,VARIANT *Type,BSTR Message,BSTR Target,VARIANT_BOOL *out_Success) {
    return This->lpVtbl->LogEvent(This,Type,Message,Target,out_Success);
}
FORCEINLINE HRESULT IWshShell3_AppActivate(IWshShell3* This,VARIANT *App,VARIANT *Wait,VARIANT_BOOL *out_Success) {
    return This->lpVtbl->AppActivate(This,App,Wait,out_Success);
}
FORCEINLINE HRESULT IWshShell3_SendKeys(IWshShell3* This,BSTR Keys,VARIANT *Wait) {
    return This->lpVtbl->SendKeys(This,Keys,Wait);
}
/*** IWshShell3 methods ***/
FORCEINLINE HRESULT IWshShell3_Exec(IWshShell3* This,BSTR Command,IWshExec **out_Exec) {
    return This->lpVtbl->Exec(This,Command,out_Exec);
}
FORCEINLINE HRESULT IWshShell3_get_CurrentDirectory(IWshShell3* This,BSTR *out_Directory) {
    return This->lpVtbl->get_CurrentDirectory(This,out_Directory);
}
FORCEINLINE HRESULT IWshShell3_put_CurrentDirectory(IWshShell3* This,BSTR out_Directory) {
    return This->lpVtbl->put_CurrentDirectory(This,out_Directory);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshShell3_Exec_Proxy(
    IWshShell3* This,
    BSTR Command,
    IWshExec **out_Exec);
void __RPC_STUB IWshShell3_Exec_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell3_get_CurrentDirectory_Proxy(
    IWshShell3* This,
    BSTR *out_Directory);
void __RPC_STUB IWshShell3_get_CurrentDirectory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWshShell3_put_CurrentDirectory_Proxy(
    IWshShell3* This,
    BSTR out_Directory);
void __RPC_STUB IWshShell3_put_CurrentDirectory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshShell3_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshNetwork2 interface
 */
#ifndef __IWshNetwork2_INTERFACE_DEFINED__
#define __IWshNetwork2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWshNetwork2, 0x24be5a31, 0xedfe, 0x11d2, 0xb9,0x33, 0x00,0x10,0x4b,0x36,0x5c,0x9f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("24be5a31-edfe-11d2-b933-00104b365c9f")
IWshNetwork2 : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_UserDomain(
        BSTR *out_UserDomain) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshNetwork2, 0x24be5a31, 0xedfe, 0x11d2, 0xb9,0x33, 0x00,0x10,0x4b,0x36,0x5c,0x9f)
#endif
#else
typedef struct IWshNetwork2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWshNetwork2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWshNetwork2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWshNetwork2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWshNetwork2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWshNetwork2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWshNetwork2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWshNetwork2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWshNetwork2 methods ***/
    HRESULT (STDMETHODCALLTYPE *get_UserDomain)(
        IWshNetwork2 *This,
        BSTR *out_UserDomain);

    END_INTERFACE
} IWshNetwork2Vtbl;

interface IWshNetwork2 {
    CONST_VTBL IWshNetwork2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWshNetwork2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWshNetwork2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWshNetwork2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWshNetwork2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWshNetwork2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWshNetwork2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWshNetwork2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWshNetwork2 methods ***/
#define IWshNetwork2_get_UserDomain(This,out_UserDomain) (This)->lpVtbl->get_UserDomain(This,out_UserDomain)
#else
/*** IUnknown methods ***/
FORCEINLINE HRESULT IWshNetwork2_QueryInterface(IWshNetwork2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
FORCEINLINE ULONG IWshNetwork2_AddRef(IWshNetwork2* This) {
    return This->lpVtbl->AddRef(This);
}
FORCEINLINE ULONG IWshNetwork2_Release(IWshNetwork2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
FORCEINLINE HRESULT IWshNetwork2_GetTypeInfoCount(IWshNetwork2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
FORCEINLINE HRESULT IWshNetwork2_GetTypeInfo(IWshNetwork2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
FORCEINLINE HRESULT IWshNetwork2_GetIDsOfNames(IWshNetwork2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
FORCEINLINE HRESULT IWshNetwork2_Invoke(IWshNetwork2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWshNetwork2 methods ***/
FORCEINLINE HRESULT IWshNetwork2_get_UserDomain(IWshNetwork2* This,BSTR *out_UserDomain) {
    return This->lpVtbl->get_UserDomain(This,out_UserDomain);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IWshNetwork2_get_UserDomain_Proxy(
    IWshNetwork2* This,
    BSTR *out_UserDomain);
void __RPC_STUB IWshNetwork2_get_UserDomain_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWshNetwork2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWshShell_Class coclass
 */

DEFINE_GUID(CLSID_IWshShell_Class, 0xf935dc22, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);

#ifdef __cplusplus
class DECLSPEC_UUID("f935dc22-1cf0-11d0-adb9-00c04fd58a0b") IWshShell_Class;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshShell_Class, 0xf935dc22, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#endif

/*****************************************************************************
 * WshShell coclass
 */

DEFINE_GUID(CLSID_WshShell, 0x72c24dd5, 0xd70a, 0x438b, 0x8a,0x42, 0x98,0x42,0x4b,0x88,0xaf,0xb8);

#ifdef __cplusplus
class DECLSPEC_UUID("72c24dd5-d70a-438b-8a42-98424b88afb8") WshShell;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WshShell, 0x72c24dd5, 0xd70a, 0x438b, 0x8a,0x42, 0x98,0x42,0x4b,0x88,0xaf,0xb8)
#endif
#endif

/*****************************************************************************
 * IWshNetwork_Class coclass
 */

DEFINE_GUID(CLSID_IWshNetwork_Class, 0xf935dc26, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b);

#ifdef __cplusplus
class DECLSPEC_UUID("f935dc26-1cf0-11d0-adb9-00c04fd58a0b") IWshNetwork_Class;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWshNetwork_Class, 0xf935dc26, 0x1cf0, 0x11d0, 0xad,0xb9, 0x00,0xc0,0x4f,0xd5,0x8a,0x0b)
#endif
#endif

/*****************************************************************************
 * WshNetwork coclass
 */

DEFINE_GUID(CLSID_WshNetwork, 0x093ff999, 0x1ea0, 0x4079, 0x95,0x25, 0x96,0x14,0xc3,0x50,0x4b,0x74);

#ifdef __cplusplus
class DECLSPEC_UUID("093ff999-1ea0-4079-9525-9614c3504b74") WshNetwork;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WshNetwork, 0x093ff999, 0x1ea0, 0x4079, 0x95,0x25, 0x96,0x14,0xc3,0x50,0x4b,0x74)
#endif
#endif

/*****************************************************************************
 * WshExec coclass
 */

DEFINE_GUID(CLSID_WshExec, 0x08fed191, 0xbe19, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90);

#ifdef __cplusplus
class DECLSPEC_UUID("08fed191-be19-11d3-a28b-00104bd35090") WshExec;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WshExec, 0x08fed191, 0xbe19, 0x11d3, 0xa2,0x8b, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#endif

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __wshom_h__ */
